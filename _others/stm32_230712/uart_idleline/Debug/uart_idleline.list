
uart_idleline.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000860c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004e8  08008720  08008720  00018720  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008c08  08008c08  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  08008c08  08008c08  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008c08  08008c08  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008c08  08008c08  00018c08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008c0c  08008c0c  00018c0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08008c10  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000075c  200001e0  08008df0  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000093c  08008df0  0002093c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000118b4  00000000  00000000  00020209  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002278  00000000  00000000  00031abd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001168  00000000  00000000  00033d38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010a8  00000000  00000000  00034ea0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018ea2  00000000  00000000  00035f48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013307  00000000  00000000  0004edea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008fe9e  00000000  00000000  000620f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f1f8f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005e40  00000000  00000000  000f1fe0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e0 	.word	0x200001e0
 800012c:	00000000 	.word	0x00000000
 8000130:	08008704 	.word	0x08008704

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e4 	.word	0x200001e4
 800014c:	08008704 	.word	0x08008704

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_d2uiz>:
 8000a0c:	004a      	lsls	r2, r1, #1
 8000a0e:	d211      	bcs.n	8000a34 <__aeabi_d2uiz+0x28>
 8000a10:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a14:	d211      	bcs.n	8000a3a <__aeabi_d2uiz+0x2e>
 8000a16:	d50d      	bpl.n	8000a34 <__aeabi_d2uiz+0x28>
 8000a18:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a1c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a20:	d40e      	bmi.n	8000a40 <__aeabi_d2uiz+0x34>
 8000a22:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a26:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a2a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a32:	4770      	bx	lr
 8000a34:	f04f 0000 	mov.w	r0, #0
 8000a38:	4770      	bx	lr
 8000a3a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a3e:	d102      	bne.n	8000a46 <__aeabi_d2uiz+0x3a>
 8000a40:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000a44:	4770      	bx	lr
 8000a46:	f04f 0000 	mov.w	r0, #0
 8000a4a:	4770      	bx	lr

08000a4c <__aeabi_d2f>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a54:	bf24      	itt	cs
 8000a56:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a5a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a5e:	d90d      	bls.n	8000a7c <__aeabi_d2f+0x30>
 8000a60:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a64:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a68:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a6c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a70:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a74:	bf08      	it	eq
 8000a76:	f020 0001 	biceq.w	r0, r0, #1
 8000a7a:	4770      	bx	lr
 8000a7c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a80:	d121      	bne.n	8000ac6 <__aeabi_d2f+0x7a>
 8000a82:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a86:	bfbc      	itt	lt
 8000a88:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a8c:	4770      	bxlt	lr
 8000a8e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a92:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a96:	f1c2 0218 	rsb	r2, r2, #24
 8000a9a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a9e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000aa2:	fa20 f002 	lsr.w	r0, r0, r2
 8000aa6:	bf18      	it	ne
 8000aa8:	f040 0001 	orrne.w	r0, r0, #1
 8000aac:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ab4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ab8:	ea40 000c 	orr.w	r0, r0, ip
 8000abc:	fa23 f302 	lsr.w	r3, r3, r2
 8000ac0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ac4:	e7cc      	b.n	8000a60 <__aeabi_d2f+0x14>
 8000ac6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aca:	d107      	bne.n	8000adc <__aeabi_d2f+0x90>
 8000acc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ad0:	bf1e      	ittt	ne
 8000ad2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ad6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ada:	4770      	bxne	lr
 8000adc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ae0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ae4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop

08000aec <__aeabi_frsub>:
 8000aec:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000af0:	e002      	b.n	8000af8 <__addsf3>
 8000af2:	bf00      	nop

08000af4 <__aeabi_fsub>:
 8000af4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000af8 <__addsf3>:
 8000af8:	0042      	lsls	r2, r0, #1
 8000afa:	bf1f      	itttt	ne
 8000afc:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b00:	ea92 0f03 	teqne	r2, r3
 8000b04:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b08:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b0c:	d06a      	beq.n	8000be4 <__addsf3+0xec>
 8000b0e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b12:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b16:	bfc1      	itttt	gt
 8000b18:	18d2      	addgt	r2, r2, r3
 8000b1a:	4041      	eorgt	r1, r0
 8000b1c:	4048      	eorgt	r0, r1
 8000b1e:	4041      	eorgt	r1, r0
 8000b20:	bfb8      	it	lt
 8000b22:	425b      	neglt	r3, r3
 8000b24:	2b19      	cmp	r3, #25
 8000b26:	bf88      	it	hi
 8000b28:	4770      	bxhi	lr
 8000b2a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b2e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b32:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b36:	bf18      	it	ne
 8000b38:	4240      	negne	r0, r0
 8000b3a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b3e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b42:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b46:	bf18      	it	ne
 8000b48:	4249      	negne	r1, r1
 8000b4a:	ea92 0f03 	teq	r2, r3
 8000b4e:	d03f      	beq.n	8000bd0 <__addsf3+0xd8>
 8000b50:	f1a2 0201 	sub.w	r2, r2, #1
 8000b54:	fa41 fc03 	asr.w	ip, r1, r3
 8000b58:	eb10 000c 	adds.w	r0, r0, ip
 8000b5c:	f1c3 0320 	rsb	r3, r3, #32
 8000b60:	fa01 f103 	lsl.w	r1, r1, r3
 8000b64:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b68:	d502      	bpl.n	8000b70 <__addsf3+0x78>
 8000b6a:	4249      	negs	r1, r1
 8000b6c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b70:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b74:	d313      	bcc.n	8000b9e <__addsf3+0xa6>
 8000b76:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b7a:	d306      	bcc.n	8000b8a <__addsf3+0x92>
 8000b7c:	0840      	lsrs	r0, r0, #1
 8000b7e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b82:	f102 0201 	add.w	r2, r2, #1
 8000b86:	2afe      	cmp	r2, #254	; 0xfe
 8000b88:	d251      	bcs.n	8000c2e <__addsf3+0x136>
 8000b8a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b8e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b92:	bf08      	it	eq
 8000b94:	f020 0001 	biceq.w	r0, r0, #1
 8000b98:	ea40 0003 	orr.w	r0, r0, r3
 8000b9c:	4770      	bx	lr
 8000b9e:	0049      	lsls	r1, r1, #1
 8000ba0:	eb40 0000 	adc.w	r0, r0, r0
 8000ba4:	3a01      	subs	r2, #1
 8000ba6:	bf28      	it	cs
 8000ba8:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000bac:	d2ed      	bcs.n	8000b8a <__addsf3+0x92>
 8000bae:	fab0 fc80 	clz	ip, r0
 8000bb2:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bb6:	ebb2 020c 	subs.w	r2, r2, ip
 8000bba:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bbe:	bfaa      	itet	ge
 8000bc0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000bc4:	4252      	neglt	r2, r2
 8000bc6:	4318      	orrge	r0, r3
 8000bc8:	bfbc      	itt	lt
 8000bca:	40d0      	lsrlt	r0, r2
 8000bcc:	4318      	orrlt	r0, r3
 8000bce:	4770      	bx	lr
 8000bd0:	f092 0f00 	teq	r2, #0
 8000bd4:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000bd8:	bf06      	itte	eq
 8000bda:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000bde:	3201      	addeq	r2, #1
 8000be0:	3b01      	subne	r3, #1
 8000be2:	e7b5      	b.n	8000b50 <__addsf3+0x58>
 8000be4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000be8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bec:	bf18      	it	ne
 8000bee:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bf2:	d021      	beq.n	8000c38 <__addsf3+0x140>
 8000bf4:	ea92 0f03 	teq	r2, r3
 8000bf8:	d004      	beq.n	8000c04 <__addsf3+0x10c>
 8000bfa:	f092 0f00 	teq	r2, #0
 8000bfe:	bf08      	it	eq
 8000c00:	4608      	moveq	r0, r1
 8000c02:	4770      	bx	lr
 8000c04:	ea90 0f01 	teq	r0, r1
 8000c08:	bf1c      	itt	ne
 8000c0a:	2000      	movne	r0, #0
 8000c0c:	4770      	bxne	lr
 8000c0e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c12:	d104      	bne.n	8000c1e <__addsf3+0x126>
 8000c14:	0040      	lsls	r0, r0, #1
 8000c16:	bf28      	it	cs
 8000c18:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c1c:	4770      	bx	lr
 8000c1e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c22:	bf3c      	itt	cc
 8000c24:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c28:	4770      	bxcc	lr
 8000c2a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c2e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c32:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c36:	4770      	bx	lr
 8000c38:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c3c:	bf16      	itet	ne
 8000c3e:	4608      	movne	r0, r1
 8000c40:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c44:	4601      	movne	r1, r0
 8000c46:	0242      	lsls	r2, r0, #9
 8000c48:	bf06      	itte	eq
 8000c4a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c4e:	ea90 0f01 	teqeq	r0, r1
 8000c52:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c56:	4770      	bx	lr

08000c58 <__aeabi_ui2f>:
 8000c58:	f04f 0300 	mov.w	r3, #0
 8000c5c:	e004      	b.n	8000c68 <__aeabi_i2f+0x8>
 8000c5e:	bf00      	nop

08000c60 <__aeabi_i2f>:
 8000c60:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c64:	bf48      	it	mi
 8000c66:	4240      	negmi	r0, r0
 8000c68:	ea5f 0c00 	movs.w	ip, r0
 8000c6c:	bf08      	it	eq
 8000c6e:	4770      	bxeq	lr
 8000c70:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c74:	4601      	mov	r1, r0
 8000c76:	f04f 0000 	mov.w	r0, #0
 8000c7a:	e01c      	b.n	8000cb6 <__aeabi_l2f+0x2a>

08000c7c <__aeabi_ul2f>:
 8000c7c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c80:	bf08      	it	eq
 8000c82:	4770      	bxeq	lr
 8000c84:	f04f 0300 	mov.w	r3, #0
 8000c88:	e00a      	b.n	8000ca0 <__aeabi_l2f+0x14>
 8000c8a:	bf00      	nop

08000c8c <__aeabi_l2f>:
 8000c8c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c90:	bf08      	it	eq
 8000c92:	4770      	bxeq	lr
 8000c94:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c98:	d502      	bpl.n	8000ca0 <__aeabi_l2f+0x14>
 8000c9a:	4240      	negs	r0, r0
 8000c9c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ca0:	ea5f 0c01 	movs.w	ip, r1
 8000ca4:	bf02      	ittt	eq
 8000ca6:	4684      	moveq	ip, r0
 8000ca8:	4601      	moveq	r1, r0
 8000caa:	2000      	moveq	r0, #0
 8000cac:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cb0:	bf08      	it	eq
 8000cb2:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cb6:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cba:	fabc f28c 	clz	r2, ip
 8000cbe:	3a08      	subs	r2, #8
 8000cc0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000cc4:	db10      	blt.n	8000ce8 <__aeabi_l2f+0x5c>
 8000cc6:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cca:	4463      	add	r3, ip
 8000ccc:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cd0:	f1c2 0220 	rsb	r2, r2, #32
 8000cd4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000cd8:	fa20 f202 	lsr.w	r2, r0, r2
 8000cdc:	eb43 0002 	adc.w	r0, r3, r2
 8000ce0:	bf08      	it	eq
 8000ce2:	f020 0001 	biceq.w	r0, r0, #1
 8000ce6:	4770      	bx	lr
 8000ce8:	f102 0220 	add.w	r2, r2, #32
 8000cec:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cf0:	f1c2 0220 	rsb	r2, r2, #32
 8000cf4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000cf8:	fa21 f202 	lsr.w	r2, r1, r2
 8000cfc:	eb43 0002 	adc.w	r0, r3, r2
 8000d00:	bf08      	it	eq
 8000d02:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_fmul>:
 8000d08:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d0c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d10:	bf1e      	ittt	ne
 8000d12:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d16:	ea92 0f0c 	teqne	r2, ip
 8000d1a:	ea93 0f0c 	teqne	r3, ip
 8000d1e:	d06f      	beq.n	8000e00 <__aeabi_fmul+0xf8>
 8000d20:	441a      	add	r2, r3
 8000d22:	ea80 0c01 	eor.w	ip, r0, r1
 8000d26:	0240      	lsls	r0, r0, #9
 8000d28:	bf18      	it	ne
 8000d2a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d2e:	d01e      	beq.n	8000d6e <__aeabi_fmul+0x66>
 8000d30:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d34:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d38:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d3c:	fba0 3101 	umull	r3, r1, r0, r1
 8000d40:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d44:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d48:	bf3e      	ittt	cc
 8000d4a:	0049      	lslcc	r1, r1, #1
 8000d4c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d50:	005b      	lslcc	r3, r3, #1
 8000d52:	ea40 0001 	orr.w	r0, r0, r1
 8000d56:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d5a:	2afd      	cmp	r2, #253	; 0xfd
 8000d5c:	d81d      	bhi.n	8000d9a <__aeabi_fmul+0x92>
 8000d5e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d62:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d66:	bf08      	it	eq
 8000d68:	f020 0001 	biceq.w	r0, r0, #1
 8000d6c:	4770      	bx	lr
 8000d6e:	f090 0f00 	teq	r0, #0
 8000d72:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d76:	bf08      	it	eq
 8000d78:	0249      	lsleq	r1, r1, #9
 8000d7a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d7e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d82:	3a7f      	subs	r2, #127	; 0x7f
 8000d84:	bfc2      	ittt	gt
 8000d86:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d8a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d8e:	4770      	bxgt	lr
 8000d90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d94:	f04f 0300 	mov.w	r3, #0
 8000d98:	3a01      	subs	r2, #1
 8000d9a:	dc5d      	bgt.n	8000e58 <__aeabi_fmul+0x150>
 8000d9c:	f112 0f19 	cmn.w	r2, #25
 8000da0:	bfdc      	itt	le
 8000da2:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000da6:	4770      	bxle	lr
 8000da8:	f1c2 0200 	rsb	r2, r2, #0
 8000dac:	0041      	lsls	r1, r0, #1
 8000dae:	fa21 f102 	lsr.w	r1, r1, r2
 8000db2:	f1c2 0220 	rsb	r2, r2, #32
 8000db6:	fa00 fc02 	lsl.w	ip, r0, r2
 8000dba:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dbe:	f140 0000 	adc.w	r0, r0, #0
 8000dc2:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000dc6:	bf08      	it	eq
 8000dc8:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000dcc:	4770      	bx	lr
 8000dce:	f092 0f00 	teq	r2, #0
 8000dd2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000dd6:	bf02      	ittt	eq
 8000dd8:	0040      	lsleq	r0, r0, #1
 8000dda:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000dde:	3a01      	subeq	r2, #1
 8000de0:	d0f9      	beq.n	8000dd6 <__aeabi_fmul+0xce>
 8000de2:	ea40 000c 	orr.w	r0, r0, ip
 8000de6:	f093 0f00 	teq	r3, #0
 8000dea:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000dee:	bf02      	ittt	eq
 8000df0:	0049      	lsleq	r1, r1, #1
 8000df2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000df6:	3b01      	subeq	r3, #1
 8000df8:	d0f9      	beq.n	8000dee <__aeabi_fmul+0xe6>
 8000dfa:	ea41 010c 	orr.w	r1, r1, ip
 8000dfe:	e78f      	b.n	8000d20 <__aeabi_fmul+0x18>
 8000e00:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e04:	ea92 0f0c 	teq	r2, ip
 8000e08:	bf18      	it	ne
 8000e0a:	ea93 0f0c 	teqne	r3, ip
 8000e0e:	d00a      	beq.n	8000e26 <__aeabi_fmul+0x11e>
 8000e10:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e14:	bf18      	it	ne
 8000e16:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e1a:	d1d8      	bne.n	8000dce <__aeabi_fmul+0xc6>
 8000e1c:	ea80 0001 	eor.w	r0, r0, r1
 8000e20:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e24:	4770      	bx	lr
 8000e26:	f090 0f00 	teq	r0, #0
 8000e2a:	bf17      	itett	ne
 8000e2c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e30:	4608      	moveq	r0, r1
 8000e32:	f091 0f00 	teqne	r1, #0
 8000e36:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e3a:	d014      	beq.n	8000e66 <__aeabi_fmul+0x15e>
 8000e3c:	ea92 0f0c 	teq	r2, ip
 8000e40:	d101      	bne.n	8000e46 <__aeabi_fmul+0x13e>
 8000e42:	0242      	lsls	r2, r0, #9
 8000e44:	d10f      	bne.n	8000e66 <__aeabi_fmul+0x15e>
 8000e46:	ea93 0f0c 	teq	r3, ip
 8000e4a:	d103      	bne.n	8000e54 <__aeabi_fmul+0x14c>
 8000e4c:	024b      	lsls	r3, r1, #9
 8000e4e:	bf18      	it	ne
 8000e50:	4608      	movne	r0, r1
 8000e52:	d108      	bne.n	8000e66 <__aeabi_fmul+0x15e>
 8000e54:	ea80 0001 	eor.w	r0, r0, r1
 8000e58:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e64:	4770      	bx	lr
 8000e66:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e6a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e6e:	4770      	bx	lr

08000e70 <__aeabi_fdiv>:
 8000e70:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e74:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e78:	bf1e      	ittt	ne
 8000e7a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e7e:	ea92 0f0c 	teqne	r2, ip
 8000e82:	ea93 0f0c 	teqne	r3, ip
 8000e86:	d069      	beq.n	8000f5c <__aeabi_fdiv+0xec>
 8000e88:	eba2 0203 	sub.w	r2, r2, r3
 8000e8c:	ea80 0c01 	eor.w	ip, r0, r1
 8000e90:	0249      	lsls	r1, r1, #9
 8000e92:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e96:	d037      	beq.n	8000f08 <__aeabi_fdiv+0x98>
 8000e98:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e9c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ea0:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ea4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ea8:	428b      	cmp	r3, r1
 8000eaa:	bf38      	it	cc
 8000eac:	005b      	lslcc	r3, r3, #1
 8000eae:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000eb2:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000eb6:	428b      	cmp	r3, r1
 8000eb8:	bf24      	itt	cs
 8000eba:	1a5b      	subcs	r3, r3, r1
 8000ebc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000ec0:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ec4:	bf24      	itt	cs
 8000ec6:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000eca:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000ece:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000ed2:	bf24      	itt	cs
 8000ed4:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000ed8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000edc:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000ee0:	bf24      	itt	cs
 8000ee2:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000ee6:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000eea:	011b      	lsls	r3, r3, #4
 8000eec:	bf18      	it	ne
 8000eee:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000ef2:	d1e0      	bne.n	8000eb6 <__aeabi_fdiv+0x46>
 8000ef4:	2afd      	cmp	r2, #253	; 0xfd
 8000ef6:	f63f af50 	bhi.w	8000d9a <__aeabi_fmul+0x92>
 8000efa:	428b      	cmp	r3, r1
 8000efc:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f00:	bf08      	it	eq
 8000f02:	f020 0001 	biceq.w	r0, r0, #1
 8000f06:	4770      	bx	lr
 8000f08:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f0c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f10:	327f      	adds	r2, #127	; 0x7f
 8000f12:	bfc2      	ittt	gt
 8000f14:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f18:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f1c:	4770      	bxgt	lr
 8000f1e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f22:	f04f 0300 	mov.w	r3, #0
 8000f26:	3a01      	subs	r2, #1
 8000f28:	e737      	b.n	8000d9a <__aeabi_fmul+0x92>
 8000f2a:	f092 0f00 	teq	r2, #0
 8000f2e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f32:	bf02      	ittt	eq
 8000f34:	0040      	lsleq	r0, r0, #1
 8000f36:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f3a:	3a01      	subeq	r2, #1
 8000f3c:	d0f9      	beq.n	8000f32 <__aeabi_fdiv+0xc2>
 8000f3e:	ea40 000c 	orr.w	r0, r0, ip
 8000f42:	f093 0f00 	teq	r3, #0
 8000f46:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f4a:	bf02      	ittt	eq
 8000f4c:	0049      	lsleq	r1, r1, #1
 8000f4e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f52:	3b01      	subeq	r3, #1
 8000f54:	d0f9      	beq.n	8000f4a <__aeabi_fdiv+0xda>
 8000f56:	ea41 010c 	orr.w	r1, r1, ip
 8000f5a:	e795      	b.n	8000e88 <__aeabi_fdiv+0x18>
 8000f5c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f60:	ea92 0f0c 	teq	r2, ip
 8000f64:	d108      	bne.n	8000f78 <__aeabi_fdiv+0x108>
 8000f66:	0242      	lsls	r2, r0, #9
 8000f68:	f47f af7d 	bne.w	8000e66 <__aeabi_fmul+0x15e>
 8000f6c:	ea93 0f0c 	teq	r3, ip
 8000f70:	f47f af70 	bne.w	8000e54 <__aeabi_fmul+0x14c>
 8000f74:	4608      	mov	r0, r1
 8000f76:	e776      	b.n	8000e66 <__aeabi_fmul+0x15e>
 8000f78:	ea93 0f0c 	teq	r3, ip
 8000f7c:	d104      	bne.n	8000f88 <__aeabi_fdiv+0x118>
 8000f7e:	024b      	lsls	r3, r1, #9
 8000f80:	f43f af4c 	beq.w	8000e1c <__aeabi_fmul+0x114>
 8000f84:	4608      	mov	r0, r1
 8000f86:	e76e      	b.n	8000e66 <__aeabi_fmul+0x15e>
 8000f88:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f8c:	bf18      	it	ne
 8000f8e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f92:	d1ca      	bne.n	8000f2a <__aeabi_fdiv+0xba>
 8000f94:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f98:	f47f af5c 	bne.w	8000e54 <__aeabi_fmul+0x14c>
 8000f9c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fa0:	f47f af3c 	bne.w	8000e1c <__aeabi_fmul+0x114>
 8000fa4:	e75f      	b.n	8000e66 <__aeabi_fmul+0x15e>
 8000fa6:	bf00      	nop

08000fa8 <__gesf2>:
 8000fa8:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000fac:	e006      	b.n	8000fbc <__cmpsf2+0x4>
 8000fae:	bf00      	nop

08000fb0 <__lesf2>:
 8000fb0:	f04f 0c01 	mov.w	ip, #1
 8000fb4:	e002      	b.n	8000fbc <__cmpsf2+0x4>
 8000fb6:	bf00      	nop

08000fb8 <__cmpsf2>:
 8000fb8:	f04f 0c01 	mov.w	ip, #1
 8000fbc:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000fc0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000fc4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000fc8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fcc:	bf18      	it	ne
 8000fce:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000fd2:	d011      	beq.n	8000ff8 <__cmpsf2+0x40>
 8000fd4:	b001      	add	sp, #4
 8000fd6:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000fda:	bf18      	it	ne
 8000fdc:	ea90 0f01 	teqne	r0, r1
 8000fe0:	bf58      	it	pl
 8000fe2:	ebb2 0003 	subspl.w	r0, r2, r3
 8000fe6:	bf88      	it	hi
 8000fe8:	17c8      	asrhi	r0, r1, #31
 8000fea:	bf38      	it	cc
 8000fec:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000ff0:	bf18      	it	ne
 8000ff2:	f040 0001 	orrne.w	r0, r0, #1
 8000ff6:	4770      	bx	lr
 8000ff8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ffc:	d102      	bne.n	8001004 <__cmpsf2+0x4c>
 8000ffe:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001002:	d105      	bne.n	8001010 <__cmpsf2+0x58>
 8001004:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001008:	d1e4      	bne.n	8000fd4 <__cmpsf2+0x1c>
 800100a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800100e:	d0e1      	beq.n	8000fd4 <__cmpsf2+0x1c>
 8001010:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop

08001018 <__aeabi_cfrcmple>:
 8001018:	4684      	mov	ip, r0
 800101a:	4608      	mov	r0, r1
 800101c:	4661      	mov	r1, ip
 800101e:	e7ff      	b.n	8001020 <__aeabi_cfcmpeq>

08001020 <__aeabi_cfcmpeq>:
 8001020:	b50f      	push	{r0, r1, r2, r3, lr}
 8001022:	f7ff ffc9 	bl	8000fb8 <__cmpsf2>
 8001026:	2800      	cmp	r0, #0
 8001028:	bf48      	it	mi
 800102a:	f110 0f00 	cmnmi.w	r0, #0
 800102e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08001030 <__aeabi_fcmpeq>:
 8001030:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001034:	f7ff fff4 	bl	8001020 <__aeabi_cfcmpeq>
 8001038:	bf0c      	ite	eq
 800103a:	2001      	moveq	r0, #1
 800103c:	2000      	movne	r0, #0
 800103e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001042:	bf00      	nop

08001044 <__aeabi_fcmplt>:
 8001044:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001048:	f7ff ffea 	bl	8001020 <__aeabi_cfcmpeq>
 800104c:	bf34      	ite	cc
 800104e:	2001      	movcc	r0, #1
 8001050:	2000      	movcs	r0, #0
 8001052:	f85d fb08 	ldr.w	pc, [sp], #8
 8001056:	bf00      	nop

08001058 <__aeabi_fcmple>:
 8001058:	f84d ed08 	str.w	lr, [sp, #-8]!
 800105c:	f7ff ffe0 	bl	8001020 <__aeabi_cfcmpeq>
 8001060:	bf94      	ite	ls
 8001062:	2001      	movls	r0, #1
 8001064:	2000      	movhi	r0, #0
 8001066:	f85d fb08 	ldr.w	pc, [sp], #8
 800106a:	bf00      	nop

0800106c <__aeabi_fcmpge>:
 800106c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001070:	f7ff ffd2 	bl	8001018 <__aeabi_cfrcmple>
 8001074:	bf94      	ite	ls
 8001076:	2001      	movls	r0, #1
 8001078:	2000      	movhi	r0, #0
 800107a:	f85d fb08 	ldr.w	pc, [sp], #8
 800107e:	bf00      	nop

08001080 <__aeabi_fcmpgt>:
 8001080:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001084:	f7ff ffc8 	bl	8001018 <__aeabi_cfrcmple>
 8001088:	bf34      	ite	cc
 800108a:	2001      	movcc	r0, #1
 800108c:	2000      	movcs	r0, #0
 800108e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001092:	bf00      	nop

08001094 <__aeabi_f2iz>:
 8001094:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001098:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 800109c:	d30f      	bcc.n	80010be <__aeabi_f2iz+0x2a>
 800109e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80010a2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010a6:	d90d      	bls.n	80010c4 <__aeabi_f2iz+0x30>
 80010a8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80010ac:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80010b0:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80010b4:	fa23 f002 	lsr.w	r0, r3, r2
 80010b8:	bf18      	it	ne
 80010ba:	4240      	negne	r0, r0
 80010bc:	4770      	bx	lr
 80010be:	f04f 0000 	mov.w	r0, #0
 80010c2:	4770      	bx	lr
 80010c4:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80010c8:	d101      	bne.n	80010ce <__aeabi_f2iz+0x3a>
 80010ca:	0242      	lsls	r2, r0, #9
 80010cc:	d105      	bne.n	80010da <__aeabi_f2iz+0x46>
 80010ce:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 80010d2:	bf08      	it	eq
 80010d4:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80010d8:	4770      	bx	lr
 80010da:	f04f 0000 	mov.w	r0, #0
 80010de:	4770      	bx	lr

080010e0 <__aeabi_d2lz>:
 80010e0:	b538      	push	{r3, r4, r5, lr}
 80010e2:	4605      	mov	r5, r0
 80010e4:	460c      	mov	r4, r1
 80010e6:	2200      	movs	r2, #0
 80010e8:	2300      	movs	r3, #0
 80010ea:	4628      	mov	r0, r5
 80010ec:	4621      	mov	r1, r4
 80010ee:	f7ff fc65 	bl	80009bc <__aeabi_dcmplt>
 80010f2:	b928      	cbnz	r0, 8001100 <__aeabi_d2lz+0x20>
 80010f4:	4628      	mov	r0, r5
 80010f6:	4621      	mov	r1, r4
 80010f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80010fc:	f000 b80a 	b.w	8001114 <__aeabi_d2ulz>
 8001100:	4628      	mov	r0, r5
 8001102:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8001106:	f000 f805 	bl	8001114 <__aeabi_d2ulz>
 800110a:	4240      	negs	r0, r0
 800110c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001110:	bd38      	pop	{r3, r4, r5, pc}
 8001112:	bf00      	nop

08001114 <__aeabi_d2ulz>:
 8001114:	b5d0      	push	{r4, r6, r7, lr}
 8001116:	2200      	movs	r2, #0
 8001118:	4b0b      	ldr	r3, [pc, #44]	; (8001148 <__aeabi_d2ulz+0x34>)
 800111a:	4606      	mov	r6, r0
 800111c:	460f      	mov	r7, r1
 800111e:	f7ff f9db 	bl	80004d8 <__aeabi_dmul>
 8001122:	f7ff fc73 	bl	8000a0c <__aeabi_d2uiz>
 8001126:	4604      	mov	r4, r0
 8001128:	f7ff f95c 	bl	80003e4 <__aeabi_ui2d>
 800112c:	2200      	movs	r2, #0
 800112e:	4b07      	ldr	r3, [pc, #28]	; (800114c <__aeabi_d2ulz+0x38>)
 8001130:	f7ff f9d2 	bl	80004d8 <__aeabi_dmul>
 8001134:	4602      	mov	r2, r0
 8001136:	460b      	mov	r3, r1
 8001138:	4630      	mov	r0, r6
 800113a:	4639      	mov	r1, r7
 800113c:	f7ff f814 	bl	8000168 <__aeabi_dsub>
 8001140:	f7ff fc64 	bl	8000a0c <__aeabi_d2uiz>
 8001144:	4621      	mov	r1, r4
 8001146:	bdd0      	pop	{r4, r6, r7, pc}
 8001148:	3df00000 	.word	0x3df00000
 800114c:	41f00000 	.word	0x41f00000

08001150 <read_angle>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// This is to read the angle from the magnetic encoder AS5048A
uint16_t read_angle(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b084      	sub	sp, #16
 8001154:	af02      	add	r7, sp, #8
  uint8_t txData[2] = {0xFF, 0xFF}; // Transmit buffer (command to request angle)
 8001156:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800115a:	80bb      	strh	r3, [r7, #4]
  uint8_t rxData[2] = {0x00, 0x00}; // Receive buffer
 800115c:	2300      	movs	r3, #0
 800115e:	803b      	strh	r3, [r7, #0]
  uint16_t angle = 0; // Angle
 8001160:	2300      	movs	r3, #0
 8001162:	80fb      	strh	r3, [r7, #6]

  // Make sure the Chip Select pin is high before starting a new transmission
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8001164:	2201      	movs	r2, #1
 8001166:	2110      	movs	r1, #16
 8001168:	4812      	ldr	r0, [pc, #72]	; (80011b4 <read_angle+0x64>)
 800116a:	f001 fcd5 	bl	8002b18 <HAL_GPIO_WritePin>

  // Wait for previous transmissions to finish
  //while(HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY){}; // or HAL_SPI_GetState(&hspi2) based on the SPI peripheral used

  // Pull the Chip Select pin low to start a new transmission
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 800116e:	2200      	movs	r2, #0
 8001170:	2110      	movs	r1, #16
 8001172:	4810      	ldr	r0, [pc, #64]	; (80011b4 <read_angle+0x64>)
 8001174:	f001 fcd0 	bl	8002b18 <HAL_GPIO_WritePin>

  // Transmit the command and receive the result
  HAL_SPI_TransmitReceive(&hspi1, txData, rxData, 2, 50); // or HAL_SPI_TransmitReceive(&hspi2) based on the SPI peripheral used
 8001178:	463a      	mov	r2, r7
 800117a:	1d39      	adds	r1, r7, #4
 800117c:	2332      	movs	r3, #50	; 0x32
 800117e:	9300      	str	r3, [sp, #0]
 8001180:	2302      	movs	r3, #2
 8001182:	480d      	ldr	r0, [pc, #52]	; (80011b8 <read_angle+0x68>)
 8001184:	f002 fe2a 	bl	8003ddc <HAL_SPI_TransmitReceive>

  // Push the Chip Select pin high to end the transmission
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8001188:	2201      	movs	r2, #1
 800118a:	2110      	movs	r1, #16
 800118c:	4809      	ldr	r0, [pc, #36]	; (80011b4 <read_angle+0x64>)
 800118e:	f001 fcc3 	bl	8002b18 <HAL_GPIO_WritePin>

  // Combine the two bytes received into one 16-bit number
  angle = ((rxData[0] << 8) | rxData[1]) & 0x3FFF; // The AS5048A only uses the lower 14 bits of this 16-bit number
 8001192:	783b      	ldrb	r3, [r7, #0]
 8001194:	021b      	lsls	r3, r3, #8
 8001196:	b21a      	sxth	r2, r3
 8001198:	787b      	ldrb	r3, [r7, #1]
 800119a:	b21b      	sxth	r3, r3
 800119c:	4313      	orrs	r3, r2
 800119e:	b21b      	sxth	r3, r3
 80011a0:	b29b      	uxth	r3, r3
 80011a2:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80011a6:	80fb      	strh	r3, [r7, #6]

  return angle;
 80011a8:	88fb      	ldrh	r3, [r7, #6]
}
 80011aa:	4618      	mov	r0, r3
 80011ac:	3708      	adds	r7, #8
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	40010800 	.word	0x40010800
 80011b8:	20000250 	.word	0x20000250

080011bc <pca9685_init>:


//This is for the motor driver pca9685
void pca9685_init(I2C_HandleTypeDef *hi2c, uint8_t address)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b086      	sub	sp, #24
 80011c0:	af02      	add	r7, sp, #8
 80011c2:	6078      	str	r0, [r7, #4]
 80011c4:	460b      	mov	r3, r1
 80011c6:	70fb      	strb	r3, [r7, #3]
#define PCA9685_MODE1 0x00
uint8_t initStruct[2];
uint8_t prescale = 0x144; // hardcoded
 80011c8:	2344      	movs	r3, #68	; 0x44
 80011ca:	73fb      	strb	r3, [r7, #15]
HAL_I2C_Master_Transmit(hi2c, address, PCA9685_MODE1, 1, 1);
 80011cc:	78fb      	ldrb	r3, [r7, #3]
 80011ce:	b299      	uxth	r1, r3
 80011d0:	2301      	movs	r3, #1
 80011d2:	9300      	str	r3, [sp, #0]
 80011d4:	2301      	movs	r3, #1
 80011d6:	2200      	movs	r2, #0
 80011d8:	6878      	ldr	r0, [r7, #4]
 80011da:	f001 fe13 	bl	8002e04 <HAL_I2C_Master_Transmit>
uint8_t oldmode = 0; // hardcoded
 80011de:	2300      	movs	r3, #0
 80011e0:	73bb      	strb	r3, [r7, #14]
// HAL_I2C_Master_Receive(hi2c, address, &oldmode, 1, 1);
uint8_t newmode = ((oldmode & 0x7F) | 0x10);
 80011e2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80011e6:	f003 036f 	and.w	r3, r3, #111	; 0x6f
 80011ea:	b25b      	sxtb	r3, r3
 80011ec:	f043 0310 	orr.w	r3, r3, #16
 80011f0:	b25b      	sxtb	r3, r3
 80011f2:	737b      	strb	r3, [r7, #13]
initStruct[0] = PCA9685_MODE1;
 80011f4:	2300      	movs	r3, #0
 80011f6:	723b      	strb	r3, [r7, #8]
initStruct[1] = newmode;
 80011f8:	7b7b      	ldrb	r3, [r7, #13]
 80011fa:	727b      	strb	r3, [r7, #9]
HAL_I2C_Master_Transmit(hi2c, address, initStruct, 2, 1);
 80011fc:	78fb      	ldrb	r3, [r7, #3]
 80011fe:	b299      	uxth	r1, r3
 8001200:	f107 0208 	add.w	r2, r7, #8
 8001204:	2301      	movs	r3, #1
 8001206:	9300      	str	r3, [sp, #0]
 8001208:	2302      	movs	r3, #2
 800120a:	6878      	ldr	r0, [r7, #4]
 800120c:	f001 fdfa 	bl	8002e04 <HAL_I2C_Master_Transmit>
initStruct[1] = prescale;
 8001210:	7bfb      	ldrb	r3, [r7, #15]
 8001212:	727b      	strb	r3, [r7, #9]
HAL_I2C_Master_Transmit(hi2c, address, initStruct, 2, 1);
 8001214:	78fb      	ldrb	r3, [r7, #3]
 8001216:	b299      	uxth	r1, r3
 8001218:	f107 0208 	add.w	r2, r7, #8
 800121c:	2301      	movs	r3, #1
 800121e:	9300      	str	r3, [sp, #0]
 8001220:	2302      	movs	r3, #2
 8001222:	6878      	ldr	r0, [r7, #4]
 8001224:	f001 fdee 	bl	8002e04 <HAL_I2C_Master_Transmit>
initStruct[1] = oldmode;
 8001228:	7bbb      	ldrb	r3, [r7, #14]
 800122a:	727b      	strb	r3, [r7, #9]
HAL_I2C_Master_Transmit(hi2c, address, initStruct, 2, 1);
 800122c:	78fb      	ldrb	r3, [r7, #3]
 800122e:	b299      	uxth	r1, r3
 8001230:	f107 0208 	add.w	r2, r7, #8
 8001234:	2301      	movs	r3, #1
 8001236:	9300      	str	r3, [sp, #0]
 8001238:	2302      	movs	r3, #2
 800123a:	6878      	ldr	r0, [r7, #4]
 800123c:	f001 fde2 	bl	8002e04 <HAL_I2C_Master_Transmit>
HAL_Delay(5);
 8001240:	2005      	movs	r0, #5
 8001242:	f000 ff11 	bl	8002068 <HAL_Delay>
initStruct[1] = (oldmode | 0xA1);
 8001246:	7bbb      	ldrb	r3, [r7, #14]
 8001248:	f063 035e 	orn	r3, r3, #94	; 0x5e
 800124c:	b2db      	uxtb	r3, r3
 800124e:	727b      	strb	r3, [r7, #9]
HAL_I2C_Master_Transmit(hi2c, address, initStruct, 2, 1);
 8001250:	78fb      	ldrb	r3, [r7, #3]
 8001252:	b299      	uxth	r1, r3
 8001254:	f107 0208 	add.w	r2, r7, #8
 8001258:	2301      	movs	r3, #1
 800125a:	9300      	str	r3, [sp, #0]
 800125c:	2302      	movs	r3, #2
 800125e:	6878      	ldr	r0, [r7, #4]
 8001260:	f001 fdd0 	bl	8002e04 <HAL_I2C_Master_Transmit>
}
 8001264:	bf00      	nop
 8001266:	3710      	adds	r7, #16
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}

0800126c <pca9685_pwm>:

void pca9685_pwm(I2C_HandleTypeDef *hi2c, uint8_t address, uint8_t num, uint16_t on, uint16_t off)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b086      	sub	sp, #24
 8001270:	af02      	add	r7, sp, #8
 8001272:	6078      	str	r0, [r7, #4]
 8001274:	4608      	mov	r0, r1
 8001276:	4611      	mov	r1, r2
 8001278:	461a      	mov	r2, r3
 800127a:	4603      	mov	r3, r0
 800127c:	70fb      	strb	r3, [r7, #3]
 800127e:	460b      	mov	r3, r1
 8001280:	70bb      	strb	r3, [r7, #2]
 8001282:	4613      	mov	r3, r2
 8001284:	803b      	strh	r3, [r7, #0]
uint8_t outputBuffer[5] = {0x06 + 4*num, on, (on >> 8), off, (off >> 8)};
 8001286:	78bb      	ldrb	r3, [r7, #2]
 8001288:	009b      	lsls	r3, r3, #2
 800128a:	b2db      	uxtb	r3, r3
 800128c:	3306      	adds	r3, #6
 800128e:	b2db      	uxtb	r3, r3
 8001290:	723b      	strb	r3, [r7, #8]
 8001292:	883b      	ldrh	r3, [r7, #0]
 8001294:	b2db      	uxtb	r3, r3
 8001296:	727b      	strb	r3, [r7, #9]
 8001298:	883b      	ldrh	r3, [r7, #0]
 800129a:	0a1b      	lsrs	r3, r3, #8
 800129c:	b29b      	uxth	r3, r3
 800129e:	b2db      	uxtb	r3, r3
 80012a0:	72bb      	strb	r3, [r7, #10]
 80012a2:	8b3b      	ldrh	r3, [r7, #24]
 80012a4:	b2db      	uxtb	r3, r3
 80012a6:	72fb      	strb	r3, [r7, #11]
 80012a8:	8b3b      	ldrh	r3, [r7, #24]
 80012aa:	0a1b      	lsrs	r3, r3, #8
 80012ac:	b29b      	uxth	r3, r3
 80012ae:	b2db      	uxtb	r3, r3
 80012b0:	733b      	strb	r3, [r7, #12]
HAL_I2C_Master_Transmit(&hi2c1, address, outputBuffer, 5, 1);
 80012b2:	78fb      	ldrb	r3, [r7, #3]
 80012b4:	b299      	uxth	r1, r3
 80012b6:	f107 0208 	add.w	r2, r7, #8
 80012ba:	2301      	movs	r3, #1
 80012bc:	9300      	str	r3, [sp, #0]
 80012be:	2305      	movs	r3, #5
 80012c0:	4803      	ldr	r0, [pc, #12]	; (80012d0 <pca9685_pwm+0x64>)
 80012c2:	f001 fd9f 	bl	8002e04 <HAL_I2C_Master_Transmit>
}
 80012c6:	bf00      	nop
 80012c8:	3710      	adds	r7, #16
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	200001fc 	.word	0x200001fc

080012d4 <HAL_UARTEx_RxEventCallback>:
int new_interesting = 0;
float tetha[Theta_SIZE];


void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80012d4:	b590      	push	{r4, r7, lr}
 80012d6:	b089      	sub	sp, #36	; 0x24
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
 80012dc:	460b      	mov	r3, r1
 80012de:	807b      	strh	r3, [r7, #2]
	int i;
	for (i=Size;i<RxBuf_SIZE;i++){
 80012e0:	887b      	ldrh	r3, [r7, #2]
 80012e2:	61fb      	str	r3, [r7, #28]
 80012e4:	e007      	b.n	80012f6 <HAL_UARTEx_RxEventCallback+0x22>
	  RxBuf[i] = 0;
 80012e6:	4a45      	ldr	r2, [pc, #276]	; (80013fc <HAL_UARTEx_RxEventCallback+0x128>)
 80012e8:	69fb      	ldr	r3, [r7, #28]
 80012ea:	4413      	add	r3, r2
 80012ec:	2200      	movs	r2, #0
 80012ee:	701a      	strb	r2, [r3, #0]
	for (i=Size;i<RxBuf_SIZE;i++){
 80012f0:	69fb      	ldr	r3, [r7, #28]
 80012f2:	3301      	adds	r3, #1
 80012f4:	61fb      	str	r3, [r7, #28]
 80012f6:	69fb      	ldr	r3, [r7, #28]
 80012f8:	f5b3 7f02 	cmp.w	r3, #520	; 0x208
 80012fc:	dbf3      	blt.n	80012e6 <HAL_UARTEx_RxEventCallback+0x12>
	}
	if (huart->Instance == USART1)
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	4a3f      	ldr	r2, [pc, #252]	; (8001400 <HAL_UARTEx_RxEventCallback+0x12c>)
 8001304:	4293      	cmp	r3, r2
 8001306:	d10d      	bne.n	8001324 <HAL_UARTEx_RxEventCallback+0x50>
	{
		/* start the DMA again */
		HAL_UARTEx_ReceiveToIdle_DMA(&huart1, (uint8_t *) RxBuf, RxBuf_SIZE);
 8001308:	f44f 7202 	mov.w	r2, #520	; 0x208
 800130c:	493b      	ldr	r1, [pc, #236]	; (80013fc <HAL_UARTEx_RxEventCallback+0x128>)
 800130e:	483d      	ldr	r0, [pc, #244]	; (8001404 <HAL_UARTEx_RxEventCallback+0x130>)
 8001310:	f003 fb6b 	bl	80049ea <HAL_UARTEx_ReceiveToIdle_DMA>
		__HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 8001314:	4b3c      	ldr	r3, [pc, #240]	; (8001408 <HAL_UARTEx_RxEventCallback+0x134>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	681a      	ldr	r2, [r3, #0]
 800131a:	4b3b      	ldr	r3, [pc, #236]	; (8001408 <HAL_UARTEx_RxEventCallback+0x134>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f022 0204 	bic.w	r2, r2, #4
 8001322:	601a      	str	r2, [r3, #0]

	}

	int j=0;
 8001324:	2300      	movs	r3, #0
 8001326:	61bb      	str	r3, [r7, #24]
	memset(interesting, '#', sizeof(interesting)); // Initialize the array with '#' character
 8001328:	f44f 7202 	mov.w	r2, #520	; 0x208
 800132c:	2123      	movs	r1, #35	; 0x23
 800132e:	4837      	ldr	r0, [pc, #220]	; (800140c <HAL_UARTEx_RxEventCallback+0x138>)
 8001330:	f004 faf2 	bl	8005918 <memset>
	for (int i=0; i<Size; i++)
 8001334:	2300      	movs	r3, #0
 8001336:	617b      	str	r3, [r7, #20]
 8001338:	e023      	b.n	8001382 <HAL_UARTEx_RxEventCallback+0xae>
	{
		if (RxBuf[i] == '$')
 800133a:	4a30      	ldr	r2, [pc, #192]	; (80013fc <HAL_UARTEx_RxEventCallback+0x128>)
 800133c:	697b      	ldr	r3, [r7, #20]
 800133e:	4413      	add	r3, r2
 8001340:	781b      	ldrb	r3, [r3, #0]
 8001342:	2b24      	cmp	r3, #36	; 0x24
 8001344:	d11a      	bne.n	800137c <HAL_UARTEx_RxEventCallback+0xa8>
		{
			new_interesting = 1;
 8001346:	4b32      	ldr	r3, [pc, #200]	; (8001410 <HAL_UARTEx_RxEventCallback+0x13c>)
 8001348:	2201      	movs	r2, #1
 800134a:	601a      	str	r2, [r3, #0]

			while(RxBuf[i+j+1] != '!')
 800134c:	e00d      	b.n	800136a <HAL_UARTEx_RxEventCallback+0x96>
				{
					interesting[j] = RxBuf[i+j+1];
 800134e:	697a      	ldr	r2, [r7, #20]
 8001350:	69bb      	ldr	r3, [r7, #24]
 8001352:	4413      	add	r3, r2
 8001354:	3301      	adds	r3, #1
 8001356:	4a29      	ldr	r2, [pc, #164]	; (80013fc <HAL_UARTEx_RxEventCallback+0x128>)
 8001358:	5cd1      	ldrb	r1, [r2, r3]
 800135a:	4a2c      	ldr	r2, [pc, #176]	; (800140c <HAL_UARTEx_RxEventCallback+0x138>)
 800135c:	69bb      	ldr	r3, [r7, #24]
 800135e:	4413      	add	r3, r2
 8001360:	460a      	mov	r2, r1
 8001362:	701a      	strb	r2, [r3, #0]
					j++;
 8001364:	69bb      	ldr	r3, [r7, #24]
 8001366:	3301      	adds	r3, #1
 8001368:	61bb      	str	r3, [r7, #24]
			while(RxBuf[i+j+1] != '!')
 800136a:	697a      	ldr	r2, [r7, #20]
 800136c:	69bb      	ldr	r3, [r7, #24]
 800136e:	4413      	add	r3, r2
 8001370:	3301      	adds	r3, #1
 8001372:	4a22      	ldr	r2, [pc, #136]	; (80013fc <HAL_UARTEx_RxEventCallback+0x128>)
 8001374:	5cd3      	ldrb	r3, [r2, r3]
 8001376:	2b21      	cmp	r3, #33	; 0x21
 8001378:	d1e9      	bne.n	800134e <HAL_UARTEx_RxEventCallback+0x7a>
				}

		  break;
 800137a:	e006      	b.n	800138a <HAL_UARTEx_RxEventCallback+0xb6>
	for (int i=0; i<Size; i++)
 800137c:	697b      	ldr	r3, [r7, #20]
 800137e:	3301      	adds	r3, #1
 8001380:	617b      	str	r3, [r7, #20]
 8001382:	887b      	ldrh	r3, [r7, #2]
 8001384:	697a      	ldr	r2, [r7, #20]
 8001386:	429a      	cmp	r2, r3
 8001388:	dbd7      	blt.n	800133a <HAL_UARTEx_RxEventCallback+0x66>
		}
	}

	int tetha_index = 0;
 800138a:	2300      	movs	r3, #0
 800138c:	613b      	str	r3, [r7, #16]
	if (new_interesting == 1)
 800138e:	4b20      	ldr	r3, [pc, #128]	; (8001410 <HAL_UARTEx_RxEventCallback+0x13c>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	2b01      	cmp	r3, #1
 8001394:	d12d      	bne.n	80013f2 <HAL_UARTEx_RxEventCallback+0x11e>
	{
		interesting[j] = '\0'; // Null terminate the string
 8001396:	4a1d      	ldr	r2, [pc, #116]	; (800140c <HAL_UARTEx_RxEventCallback+0x138>)
 8001398:	69bb      	ldr	r3, [r7, #24]
 800139a:	4413      	add	r3, r2
 800139c:	2200      	movs	r2, #0
 800139e:	701a      	strb	r2, [r3, #0]

		char* token = strtok(interesting, ",");
 80013a0:	491c      	ldr	r1, [pc, #112]	; (8001414 <HAL_UARTEx_RxEventCallback+0x140>)
 80013a2:	481a      	ldr	r0, [pc, #104]	; (800140c <HAL_UARTEx_RxEventCallback+0x138>)
 80013a4:	f005 f8d8 	bl	8006558 <strtok>
 80013a8:	60f8      	str	r0, [r7, #12]
		while (token != NULL)
 80013aa:	e017      	b.n	80013dc <HAL_UARTEx_RxEventCallback+0x108>
		{
			if(tetha_index < Theta_SIZE)
 80013ac:	693b      	ldr	r3, [r7, #16]
 80013ae:	2b63      	cmp	r3, #99	; 0x63
 80013b0:	dc18      	bgt.n	80013e4 <HAL_UARTEx_RxEventCallback+0x110>
			{
				tetha[tetha_index++] = atof(token);
 80013b2:	68f8      	ldr	r0, [r7, #12]
 80013b4:	f004 fa82 	bl	80058bc <atof>
 80013b8:	4602      	mov	r2, r0
 80013ba:	460b      	mov	r3, r1
 80013bc:	693c      	ldr	r4, [r7, #16]
 80013be:	1c61      	adds	r1, r4, #1
 80013c0:	6139      	str	r1, [r7, #16]
 80013c2:	4610      	mov	r0, r2
 80013c4:	4619      	mov	r1, r3
 80013c6:	f7ff fb41 	bl	8000a4c <__aeabi_d2f>
 80013ca:	4603      	mov	r3, r0
 80013cc:	4a12      	ldr	r2, [pc, #72]	; (8001418 <HAL_UARTEx_RxEventCallback+0x144>)
 80013ce:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
				token = strtok(NULL, ",");
 80013d2:	4910      	ldr	r1, [pc, #64]	; (8001414 <HAL_UARTEx_RxEventCallback+0x140>)
 80013d4:	2000      	movs	r0, #0
 80013d6:	f005 f8bf 	bl	8006558 <strtok>
 80013da:	60f8      	str	r0, [r7, #12]
		while (token != NULL)
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d1e4      	bne.n	80013ac <HAL_UARTEx_RxEventCallback+0xd8>
 80013e2:	e000      	b.n	80013e6 <HAL_UARTEx_RxEventCallback+0x112>
			}
			else
			{
				break; // blink_wait array is full
 80013e4:	bf00      	nop
			}
		}
		new_interesting = 0;
 80013e6:	4b0a      	ldr	r3, [pc, #40]	; (8001410 <HAL_UARTEx_RxEventCallback+0x13c>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	601a      	str	r2, [r3, #0]
		new_data = 1;
 80013ec:	4b0b      	ldr	r3, [pc, #44]	; (800141c <HAL_UARTEx_RxEventCallback+0x148>)
 80013ee:	2201      	movs	r2, #1
 80013f0:	601a      	str	r2, [r3, #0]
		//HAL_Delay(5000);
	}
}
 80013f2:	bf00      	nop
 80013f4:	3724      	adds	r7, #36	; 0x24
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd90      	pop	{r4, r7, pc}
 80013fa:	bf00      	nop
 80013fc:	2000037c 	.word	0x2000037c
 8001400:	40013800 	.word	0x40013800
 8001404:	200002f0 	.word	0x200002f0
 8001408:	20000338 	.word	0x20000338
 800140c:	20000584 	.word	0x20000584
 8001410:	20000790 	.word	0x20000790
 8001414:	08008720 	.word	0x08008720
 8001418:	20000794 	.word	0x20000794
 800141c:	2000078c 	.word	0x2000078c

08001420 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001420:	b590      	push	{r4, r7, lr}
 8001422:	b091      	sub	sp, #68	; 0x44
 8001424:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001426:	f000 fdbd 	bl	8001fa4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800142a:	f000 f9cd 	bl	80017c8 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  pca9685_init(&hi2c1, 0x80);
 800142e:	2180      	movs	r1, #128	; 0x80
 8001430:	488f      	ldr	r0, [pc, #572]	; (8001670 <main+0x250>)
 8001432:	f7ff fec3 	bl	80011bc <pca9685_init>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001436:	f000 fb03 	bl	8001a40 <MX_GPIO_Init>
  MX_DMA_Init();
 800143a:	f000 fae3 	bl	8001a04 <MX_DMA_Init>
  MX_USART1_UART_Init();
 800143e:	f000 fab7 	bl	80019b0 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8001442:	f000 fa67 	bl	8001914 <MX_TIM2_Init>
  MX_SPI1_Init();
 8001446:	f000 fa2f 	bl	80018a8 <MX_SPI1_Init>
  MX_I2C1_Init();
 800144a:	f000 f9ff 	bl	800184c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  HAL_UARTEx_ReceiveToIdle_DMA(&huart1, RxBuf, RxBuf_SIZE);
 800144e:	f44f 7202 	mov.w	r2, #520	; 0x208
 8001452:	4988      	ldr	r1, [pc, #544]	; (8001674 <main+0x254>)
 8001454:	4888      	ldr	r0, [pc, #544]	; (8001678 <main+0x258>)
 8001456:	f003 fac8 	bl	80049ea <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 800145a:	4b88      	ldr	r3, [pc, #544]	; (800167c <main+0x25c>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	681a      	ldr	r2, [r3, #0]
 8001460:	4b86      	ldr	r3, [pc, #536]	; (800167c <main+0x25c>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f022 0204 	bic.w	r2, r2, #4
 8001468:	601a      	str	r2, [r3, #0]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  // Pa que se desapendeje
  HAL_Delay(2000);
 800146a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800146e:	f000 fdfb 	bl	8002068 <HAL_Delay>
  int up=1;
 8001472:	2301      	movs	r3, #1
 8001474:	627b      	str	r3, [r7, #36]	; 0x24
  int i = 0;
 8001476:	2300      	movs	r3, #0
 8001478:	637b      	str	r3, [r7, #52]	; 0x34
  while (i<600){
 800147a:	e00f      	b.n	800149c <main+0x7c>
	  pca9685_pwm(&hi2c1, 0x80, 3, 0, i);
 800147c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800147e:	b29b      	uxth	r3, r3
 8001480:	9300      	str	r3, [sp, #0]
 8001482:	2300      	movs	r3, #0
 8001484:	2203      	movs	r2, #3
 8001486:	2180      	movs	r1, #128	; 0x80
 8001488:	4879      	ldr	r0, [pc, #484]	; (8001670 <main+0x250>)
 800148a:	f7ff feef 	bl	800126c <pca9685_pwm>
	  i = i+up;
 800148e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001492:	4413      	add	r3, r2
 8001494:	637b      	str	r3, [r7, #52]	; 0x34
	  HAL_Delay(1);
 8001496:	2001      	movs	r0, #1
 8001498:	f000 fde6 	bl	8002068 <HAL_Delay>
  while (i<600){
 800149c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800149e:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 80014a2:	dbeb      	blt.n	800147c <main+0x5c>
  }
  HAL_Delay(5000);
 80014a4:	f241 3088 	movw	r0, #5000	; 0x1388
 80014a8:	f000 fdde 	bl	8002068 <HAL_Delay>
  pca9685_pwm(&hi2c1, 0x80, 3, 0, 0);
 80014ac:	2300      	movs	r3, #0
 80014ae:	9300      	str	r3, [sp, #0]
 80014b0:	2300      	movs	r3, #0
 80014b2:	2203      	movs	r2, #3
 80014b4:	2180      	movs	r1, #128	; 0x80
 80014b6:	486e      	ldr	r0, [pc, #440]	; (8001670 <main+0x250>)
 80014b8:	f7ff fed8 	bl	800126c <pca9685_pwm>
  HAL_Delay(5000);
 80014bc:	f241 3088 	movw	r0, #5000	; 0x1388
 80014c0:	f000 fdd2 	bl	8002068 <HAL_Delay>
  HAL_UART_Transmit(&huart1, "AT+CWMODE=1\r\n", sizeof("AT+CWMODE=1\r\n"), 1000);
  HAL_Delay(2000);*/
 //HAL_Delay(10000);


  HAL_UART_Transmit(&huart1, "AT+CIPMUX=1\r\n", sizeof("AT+CIPMUX=1\r\n"), 1000);
 80014c4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014c8:	220e      	movs	r2, #14
 80014ca:	496d      	ldr	r1, [pc, #436]	; (8001680 <main+0x260>)
 80014cc:	486a      	ldr	r0, [pc, #424]	; (8001678 <main+0x258>)
 80014ce:	f003 fa09 	bl	80048e4 <HAL_UART_Transmit>
  HAL_Delay(2000);
 80014d2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80014d6:	f000 fdc7 	bl	8002068 <HAL_Delay>

  HAL_UART_Transmit(&huart1, "AT+CIPSERVER=1,80\r\n", sizeof("AT+CIPSERVER=1,80\r\n"), 1000);
 80014da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014de:	2214      	movs	r2, #20
 80014e0:	4968      	ldr	r1, [pc, #416]	; (8001684 <main+0x264>)
 80014e2:	4865      	ldr	r0, [pc, #404]	; (8001678 <main+0x258>)
 80014e4:	f003 f9fe 	bl	80048e4 <HAL_UART_Transmit>
  HAL_Delay(2000);
 80014e8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80014ec:	f000 fdbc 	bl	8002068 <HAL_Delay>

  HAL_UART_Transmit(&huart1, "AT+CIFSR\r\n", sizeof("AT+CIFSR\r\n"), 1000);
 80014f0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014f4:	220b      	movs	r2, #11
 80014f6:	4964      	ldr	r1, [pc, #400]	; (8001688 <main+0x268>)
 80014f8:	485f      	ldr	r0, [pc, #380]	; (8001678 <main+0x258>)
 80014fa:	f003 f9f3 	bl	80048e4 <HAL_UART_Transmit>
  HAL_Delay(2000);
 80014fe:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001502:	f000 fdb1 	bl	8002068 <HAL_Delay>

  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);
 8001506:	2201      	movs	r2, #1
 8001508:	f44f 7180 	mov.w	r1, #256	; 0x100
 800150c:	485f      	ldr	r0, [pc, #380]	; (800168c <main+0x26c>)
 800150e:	f001 fb03 	bl	8002b18 <HAL_GPIO_WritePin>
  HAL_Delay(1000);
 8001512:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001516:	f000 fda7 	bl	8002068 <HAL_Delay>

  float max_time = 7000;
 800151a:	4b5d      	ldr	r3, [pc, #372]	; (8001690 <main+0x270>)
 800151c:	623b      	str	r3, [r7, #32]
  while (1)
  {
	  HAL_Delay(500);
 800151e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001522:	f000 fda1 	bl	8002068 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_8);
 8001526:	f44f 7180 	mov.w	r1, #256	; 0x100
 800152a:	4858      	ldr	r0, [pc, #352]	; (800168c <main+0x26c>)
 800152c:	f001 fb0c 	bl	8002b48 <HAL_GPIO_TogglePin>
	  // Start counting time
	  HAL_TIM_Base_Stop(&htim2);
 8001530:	4858      	ldr	r0, [pc, #352]	; (8001694 <main+0x274>)
 8001532:	f002 ff43 	bl	80043bc <HAL_TIM_Base_Stop>
	  __HAL_TIM_SET_COUNTER(&htim2, 0);
 8001536:	4b57      	ldr	r3, [pc, #348]	; (8001694 <main+0x274>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	2200      	movs	r2, #0
 800153c:	625a      	str	r2, [r3, #36]	; 0x24
	  HAL_TIM_Base_Start(&htim2);
 800153e:	4855      	ldr	r0, [pc, #340]	; (8001694 <main+0x274>)
 8001540:	f002 fef2 	bl	8004328 <HAL_TIM_Base_Start>

	  if(new_data==1){
 8001544:	4b54      	ldr	r3, [pc, #336]	; (8001698 <main+0x278>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	2b01      	cmp	r3, #1
 800154a:	d1e8      	bne.n	800151e <main+0xfe>
		   // Theta
		  int motor = tetha[0]; // Theta 0:  150-400
 800154c:	4b53      	ldr	r3, [pc, #332]	; (800169c <main+0x27c>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	4618      	mov	r0, r3
 8001552:	f7ff fd9f 	bl	8001094 <__aeabi_f2iz>
 8001556:	4603      	mov	r3, r0
 8001558:	61fb      	str	r3, [r7, #28]
		  int attack_angle = tetha[1]; // Theta 1: 1150-1450 (45°-0°)
 800155a:	4b50      	ldr	r3, [pc, #320]	; (800169c <main+0x27c>)
 800155c:	685b      	ldr	r3, [r3, #4]
 800155e:	4618      	mov	r0, r3
 8001560:	f7ff fd98 	bl	8001094 <__aeabi_f2iz>
 8001564:	4603      	mov	r3, r0
 8001566:	61bb      	str	r3, [r7, #24]
		  int neutral_state = tetha[2]; // Theta 2: 1213-1637
 8001568:	4b4c      	ldr	r3, [pc, #304]	; (800169c <main+0x27c>)
 800156a:	689b      	ldr	r3, [r3, #8]
 800156c:	4618      	mov	r0, r3
 800156e:	f7ff fd91 	bl	8001094 <__aeabi_f2iz>
 8001572:	4603      	mov	r3, r0
 8001574:	617b      	str	r3, [r7, #20]
		  int amplitude = tetha[3]; // Theta 3: 0-213
 8001576:	4b49      	ldr	r3, [pc, #292]	; (800169c <main+0x27c>)
 8001578:	68db      	ldr	r3, [r3, #12]
 800157a:	4618      	mov	r0, r3
 800157c:	f7ff fd8a 	bl	8001094 <__aeabi_f2iz>
 8001580:	4603      	mov	r3, r0
 8001582:	613b      	str	r3, [r7, #16]


		  // Initial values
		  uint16_t angle = 0;
 8001584:	2300      	movs	r3, #0
 8001586:	81fb      	strh	r3, [r7, #14]
		  uint16_t angle_last = 0;
 8001588:	2300      	movs	r3, #0
 800158a:	867b      	strh	r3, [r7, #50]	; 0x32
		  int flap = 0;
 800158c:	2300      	movs	r3, #0
 800158e:	62fb      	str	r3, [r7, #44]	; 0x2c
		  int legs = 0;
 8001590:	2300      	movs	r3, #0
 8001592:	60bb      	str	r3, [r7, #8]
		  int up=1;
 8001594:	2301      	movs	r3, #1
 8001596:	607b      	str	r3, [r7, #4]
		  int i = 0;
 8001598:	2300      	movs	r3, #0
 800159a:	62bb      	str	r3, [r7, #40]	; 0x28
		  float cyc;

		 // Attack angle
		  pca9685_pwm(&hi2c1, 0x80, 4, 0, attack_angle);
 800159c:	69bb      	ldr	r3, [r7, #24]
 800159e:	b29b      	uxth	r3, r3
 80015a0:	9300      	str	r3, [sp, #0]
 80015a2:	2300      	movs	r3, #0
 80015a4:	2204      	movs	r2, #4
 80015a6:	2180      	movs	r1, #128	; 0x80
 80015a8:	4831      	ldr	r0, [pc, #196]	; (8001670 <main+0x250>)
 80015aa:	f7ff fe5f 	bl	800126c <pca9685_pwm>
		  HAL_Delay(1000);
 80015ae:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80015b2:	f000 fd59 	bl	8002068 <HAL_Delay>
		  // Start the motor slowly (if not it stops)
		  while (i<motor){
 80015b6:	e00f      	b.n	80015d8 <main+0x1b8>
			  pca9685_pwm(&hi2c1, 0x80, 3, 0, i);
 80015b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015ba:	b29b      	uxth	r3, r3
 80015bc:	9300      	str	r3, [sp, #0]
 80015be:	2300      	movs	r3, #0
 80015c0:	2203      	movs	r2, #3
 80015c2:	2180      	movs	r1, #128	; 0x80
 80015c4:	482a      	ldr	r0, [pc, #168]	; (8001670 <main+0x250>)
 80015c6:	f7ff fe51 	bl	800126c <pca9685_pwm>
			  i = i+up;
 80015ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	4413      	add	r3, r2
 80015d0:	62bb      	str	r3, [r7, #40]	; 0x28
			  HAL_Delay(1);
 80015d2:	2001      	movs	r0, #1
 80015d4:	f000 fd48 	bl	8002068 <HAL_Delay>
		  while (i<motor){
 80015d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80015da:	69fb      	ldr	r3, [r7, #28]
 80015dc:	429a      	cmp	r2, r3
 80015de:	dbeb      	blt.n	80015b8 <main+0x198>
		  }

		  // Start counting time
		  HAL_TIM_Base_Stop(&htim2);
 80015e0:	482c      	ldr	r0, [pc, #176]	; (8001694 <main+0x274>)
 80015e2:	f002 feeb 	bl	80043bc <HAL_TIM_Base_Stop>
		  __HAL_TIM_SET_COUNTER(&htim2, 0);
 80015e6:	4b2b      	ldr	r3, [pc, #172]	; (8001694 <main+0x274>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	2200      	movs	r2, #0
 80015ec:	625a      	str	r2, [r3, #36]	; 0x24
		  HAL_TIM_Base_Start(&htim2);
 80015ee:	4829      	ldr	r0, [pc, #164]	; (8001694 <main+0x274>)
 80015f0:	f002 fe9a 	bl	8004328 <HAL_TIM_Base_Start>

		  // Used to calculate derivative which gives stroke direction
		  angle_last = read_angle();
 80015f4:	f7ff fdac 	bl	8001150 <read_angle>
 80015f8:	4603      	mov	r3, r0
 80015fa:	867b      	strh	r3, [r7, #50]	; 0x32

		  // Start test
		  while(__HAL_TIM_GET_COUNTER(&htim2)<= max_time){
 80015fc:	e09b      	b.n	8001736 <main+0x316>
			  angle = read_angle(); // real extreme values 6612-9702 down-up
 80015fe:	f7ff fda7 	bl	8001150 <read_angle>
 8001602:	4603      	mov	r3, r0
 8001604:	81fb      	strh	r3, [r7, #14]
			  cyc = (float)(angle-6600)/(9720-6600);  // down:0 up:1
 8001606:	89fb      	ldrh	r3, [r7, #14]
 8001608:	f5a3 53ce 	sub.w	r3, r3, #6592	; 0x19c0
 800160c:	3b08      	subs	r3, #8
 800160e:	4618      	mov	r0, r3
 8001610:	f7ff fb26 	bl	8000c60 <__aeabi_i2f>
 8001614:	4603      	mov	r3, r0
 8001616:	4922      	ldr	r1, [pc, #136]	; (80016a0 <main+0x280>)
 8001618:	4618      	mov	r0, r3
 800161a:	f7ff fc29 	bl	8000e70 <__aeabi_fdiv>
 800161e:	4603      	mov	r3, r0
 8001620:	603b      	str	r3, [r7, #0]
			  if( cyc>0.5){flap = 1000;} // after half way up star extending
 8001622:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8001626:	6838      	ldr	r0, [r7, #0]
 8001628:	f7ff fd2a 	bl	8001080 <__aeabi_fcmpgt>
 800162c:	4603      	mov	r3, r0
 800162e:	2b00      	cmp	r3, #0
 8001630:	d003      	beq.n	800163a <main+0x21a>
 8001632:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001636:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001638:	e037      	b.n	80016aa <main+0x28a>
			  else if(cyc<0.2){flap = 1850;} // 20% before reaching down start folding
 800163a:	6838      	ldr	r0, [r7, #0]
 800163c:	f7fe fef4 	bl	8000428 <__aeabi_f2d>
 8001640:	a309      	add	r3, pc, #36	; (adr r3, 8001668 <main+0x248>)
 8001642:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001646:	f7ff f9b9 	bl	80009bc <__aeabi_dcmplt>
 800164a:	4603      	mov	r3, r0
 800164c:	2b00      	cmp	r3, #0
 800164e:	d003      	beq.n	8001658 <main+0x238>
 8001650:	f240 733a 	movw	r3, #1850	; 0x73a
 8001654:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001656:	e028      	b.n	80016aa <main+0x28a>
			  else if(angle_last<angle){flap = 1850;} //up-stroke folding
 8001658:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 800165a:	89fb      	ldrh	r3, [r7, #14]
 800165c:	429a      	cmp	r2, r3
 800165e:	d221      	bcs.n	80016a4 <main+0x284>
 8001660:	f240 733a 	movw	r3, #1850	; 0x73a
 8001664:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001666:	e020      	b.n	80016aa <main+0x28a>
 8001668:	9999999a 	.word	0x9999999a
 800166c:	3fc99999 	.word	0x3fc99999
 8001670:	200001fc 	.word	0x200001fc
 8001674:	2000037c 	.word	0x2000037c
 8001678:	200002f0 	.word	0x200002f0
 800167c:	20000338 	.word	0x20000338
 8001680:	08008724 	.word	0x08008724
 8001684:	08008734 	.word	0x08008734
 8001688:	08008748 	.word	0x08008748
 800168c:	40010800 	.word	0x40010800
 8001690:	45dac000 	.word	0x45dac000
 8001694:	200002a8 	.word	0x200002a8
 8001698:	2000078c 	.word	0x2000078c
 800169c:	20000794 	.word	0x20000794
 80016a0:	45430000 	.word	0x45430000
			  else{flap = 1000;} // down-stroke extend
 80016a4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016a8:	62fb      	str	r3, [r7, #44]	; 0x2c

			  // legs down (neutral_state-amplitude) - up(neutral_state+amplitude): 1000-1850
			  legs = (neutral_state-amplitude)*(1-cyc) + (neutral_state+amplitude)*cyc;
 80016aa:	697a      	ldr	r2, [r7, #20]
 80016ac:	693b      	ldr	r3, [r7, #16]
 80016ae:	1ad3      	subs	r3, r2, r3
 80016b0:	4618      	mov	r0, r3
 80016b2:	f7ff fad5 	bl	8000c60 <__aeabi_i2f>
 80016b6:	4604      	mov	r4, r0
 80016b8:	6839      	ldr	r1, [r7, #0]
 80016ba:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80016be:	f7ff fa19 	bl	8000af4 <__aeabi_fsub>
 80016c2:	4603      	mov	r3, r0
 80016c4:	4619      	mov	r1, r3
 80016c6:	4620      	mov	r0, r4
 80016c8:	f7ff fb1e 	bl	8000d08 <__aeabi_fmul>
 80016cc:	4603      	mov	r3, r0
 80016ce:	461c      	mov	r4, r3
 80016d0:	697a      	ldr	r2, [r7, #20]
 80016d2:	693b      	ldr	r3, [r7, #16]
 80016d4:	4413      	add	r3, r2
 80016d6:	4618      	mov	r0, r3
 80016d8:	f7ff fac2 	bl	8000c60 <__aeabi_i2f>
 80016dc:	4603      	mov	r3, r0
 80016de:	6839      	ldr	r1, [r7, #0]
 80016e0:	4618      	mov	r0, r3
 80016e2:	f7ff fb11 	bl	8000d08 <__aeabi_fmul>
 80016e6:	4603      	mov	r3, r0
 80016e8:	4619      	mov	r1, r3
 80016ea:	4620      	mov	r0, r4
 80016ec:	f7ff fa04 	bl	8000af8 <__addsf3>
 80016f0:	4603      	mov	r3, r0
 80016f2:	4618      	mov	r0, r3
 80016f4:	f7ff fcce 	bl	8001094 <__aeabi_f2iz>
 80016f8:	4603      	mov	r3, r0
 80016fa:	60bb      	str	r3, [r7, #8]
			  pca9685_pwm(&hi2c1, 0x80, 0, 0, legs);
 80016fc:	68bb      	ldr	r3, [r7, #8]
 80016fe:	b29b      	uxth	r3, r3
 8001700:	9300      	str	r3, [sp, #0]
 8001702:	2300      	movs	r3, #0
 8001704:	2200      	movs	r2, #0
 8001706:	2180      	movs	r1, #128	; 0x80
 8001708:	482c      	ldr	r0, [pc, #176]	; (80017bc <main+0x39c>)
 800170a:	f7ff fdaf 	bl	800126c <pca9685_pwm>
			  pca9685_pwm(&hi2c1, 0x80, 1, 0, legs);
 800170e:	68bb      	ldr	r3, [r7, #8]
 8001710:	b29b      	uxth	r3, r3
 8001712:	9300      	str	r3, [sp, #0]
 8001714:	2300      	movs	r3, #0
 8001716:	2201      	movs	r2, #1
 8001718:	2180      	movs	r1, #128	; 0x80
 800171a:	4828      	ldr	r0, [pc, #160]	; (80017bc <main+0x39c>)
 800171c:	f7ff fda6 	bl	800126c <pca9685_pwm>
			  pca9685_pwm(&hi2c1, 0x80, 2, 0, flap); // Extended 1000, folded 1850
 8001720:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001722:	b29b      	uxth	r3, r3
 8001724:	9300      	str	r3, [sp, #0]
 8001726:	2300      	movs	r3, #0
 8001728:	2202      	movs	r2, #2
 800172a:	2180      	movs	r1, #128	; 0x80
 800172c:	4823      	ldr	r0, [pc, #140]	; (80017bc <main+0x39c>)
 800172e:	f7ff fd9d 	bl	800126c <pca9685_pwm>
			  angle_last = angle;
 8001732:	89fb      	ldrh	r3, [r7, #14]
 8001734:	867b      	strh	r3, [r7, #50]	; 0x32
		  while(__HAL_TIM_GET_COUNTER(&htim2)<= max_time){
 8001736:	4b22      	ldr	r3, [pc, #136]	; (80017c0 <main+0x3a0>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800173c:	4618      	mov	r0, r3
 800173e:	f7ff fa8b 	bl	8000c58 <__aeabi_ui2f>
 8001742:	4603      	mov	r3, r0
 8001744:	4619      	mov	r1, r3
 8001746:	6a38      	ldr	r0, [r7, #32]
 8001748:	f7ff fc90 	bl	800106c <__aeabi_fcmpge>
 800174c:	4603      	mov	r3, r0
 800174e:	2b00      	cmp	r3, #0
 8001750:	f47f af55 	bne.w	80015fe <main+0x1de>

		  }
		  new_data = 0;
 8001754:	4b1b      	ldr	r3, [pc, #108]	; (80017c4 <main+0x3a4>)
 8001756:	2200      	movs	r2, #0
 8001758:	601a      	str	r2, [r3, #0]
		  pca9685_pwm(&hi2c1, 0x80, 0, 0, 1400);
 800175a:	f44f 63af 	mov.w	r3, #1400	; 0x578
 800175e:	9300      	str	r3, [sp, #0]
 8001760:	2300      	movs	r3, #0
 8001762:	2200      	movs	r2, #0
 8001764:	2180      	movs	r1, #128	; 0x80
 8001766:	4815      	ldr	r0, [pc, #84]	; (80017bc <main+0x39c>)
 8001768:	f7ff fd80 	bl	800126c <pca9685_pwm>
		  pca9685_pwm(&hi2c1, 0x80, 1, 0, 1400);
 800176c:	f44f 63af 	mov.w	r3, #1400	; 0x578
 8001770:	9300      	str	r3, [sp, #0]
 8001772:	2300      	movs	r3, #0
 8001774:	2201      	movs	r2, #1
 8001776:	2180      	movs	r1, #128	; 0x80
 8001778:	4810      	ldr	r0, [pc, #64]	; (80017bc <main+0x39c>)
 800177a:	f7ff fd77 	bl	800126c <pca9685_pwm>
		  pca9685_pwm(&hi2c1, 0x80, 2, 0, 1400);
 800177e:	f44f 63af 	mov.w	r3, #1400	; 0x578
 8001782:	9300      	str	r3, [sp, #0]
 8001784:	2300      	movs	r3, #0
 8001786:	2202      	movs	r2, #2
 8001788:	2180      	movs	r1, #128	; 0x80
 800178a:	480c      	ldr	r0, [pc, #48]	; (80017bc <main+0x39c>)
 800178c:	f7ff fd6e 	bl	800126c <pca9685_pwm>
		  pca9685_pwm(&hi2c1, 0x80, 3, 0, 0);
 8001790:	2300      	movs	r3, #0
 8001792:	9300      	str	r3, [sp, #0]
 8001794:	2300      	movs	r3, #0
 8001796:	2203      	movs	r2, #3
 8001798:	2180      	movs	r1, #128	; 0x80
 800179a:	4808      	ldr	r0, [pc, #32]	; (80017bc <main+0x39c>)
 800179c:	f7ff fd66 	bl	800126c <pca9685_pwm>
		  pca9685_pwm(&hi2c1, 0x80, 4, 0, 1450);
 80017a0:	f240 53aa 	movw	r3, #1450	; 0x5aa
 80017a4:	9300      	str	r3, [sp, #0]
 80017a6:	2300      	movs	r3, #0
 80017a8:	2204      	movs	r2, #4
 80017aa:	2180      	movs	r1, #128	; 0x80
 80017ac:	4803      	ldr	r0, [pc, #12]	; (80017bc <main+0x39c>)
 80017ae:	f7ff fd5d 	bl	800126c <pca9685_pwm>
		  HAL_Delay(1000);
 80017b2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80017b6:	f000 fc57 	bl	8002068 <HAL_Delay>
	  HAL_Delay(500);
 80017ba:	e6b0      	b.n	800151e <main+0xfe>
 80017bc:	200001fc 	.word	0x200001fc
 80017c0:	200002a8 	.word	0x200002a8
 80017c4:	2000078c 	.word	0x2000078c

080017c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b090      	sub	sp, #64	; 0x40
 80017cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017ce:	f107 0318 	add.w	r3, r7, #24
 80017d2:	2228      	movs	r2, #40	; 0x28
 80017d4:	2100      	movs	r1, #0
 80017d6:	4618      	mov	r0, r3
 80017d8:	f004 f89e 	bl	8005918 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017dc:	1d3b      	adds	r3, r7, #4
 80017de:	2200      	movs	r2, #0
 80017e0:	601a      	str	r2, [r3, #0]
 80017e2:	605a      	str	r2, [r3, #4]
 80017e4:	609a      	str	r2, [r3, #8]
 80017e6:	60da      	str	r2, [r3, #12]
 80017e8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80017ea:	2302      	movs	r3, #2
 80017ec:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80017ee:	2301      	movs	r3, #1
 80017f0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80017f2:	2310      	movs	r3, #16
 80017f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017f6:	2302      	movs	r3, #2
 80017f8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80017fa:	2300      	movs	r3, #0
 80017fc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80017fe:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8001802:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001804:	f107 0318 	add.w	r3, r7, #24
 8001808:	4618      	mov	r0, r3
 800180a:	f001 fe53 	bl	80034b4 <HAL_RCC_OscConfig>
 800180e:	4603      	mov	r3, r0
 8001810:	2b00      	cmp	r3, #0
 8001812:	d001      	beq.n	8001818 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8001814:	f000 f954 	bl	8001ac0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001818:	230f      	movs	r3, #15
 800181a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800181c:	2302      	movs	r3, #2
 800181e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001820:	2300      	movs	r3, #0
 8001822:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001824:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001828:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800182a:	2300      	movs	r3, #0
 800182c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800182e:	1d3b      	adds	r3, r7, #4
 8001830:	2102      	movs	r1, #2
 8001832:	4618      	mov	r0, r3
 8001834:	f002 f8c0 	bl	80039b8 <HAL_RCC_ClockConfig>
 8001838:	4603      	mov	r3, r0
 800183a:	2b00      	cmp	r3, #0
 800183c:	d001      	beq.n	8001842 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 800183e:	f000 f93f 	bl	8001ac0 <Error_Handler>
  }
}
 8001842:	bf00      	nop
 8001844:	3740      	adds	r7, #64	; 0x40
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}
	...

0800184c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001850:	4b12      	ldr	r3, [pc, #72]	; (800189c <MX_I2C1_Init+0x50>)
 8001852:	4a13      	ldr	r2, [pc, #76]	; (80018a0 <MX_I2C1_Init+0x54>)
 8001854:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001856:	4b11      	ldr	r3, [pc, #68]	; (800189c <MX_I2C1_Init+0x50>)
 8001858:	4a12      	ldr	r2, [pc, #72]	; (80018a4 <MX_I2C1_Init+0x58>)
 800185a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800185c:	4b0f      	ldr	r3, [pc, #60]	; (800189c <MX_I2C1_Init+0x50>)
 800185e:	2200      	movs	r2, #0
 8001860:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001862:	4b0e      	ldr	r3, [pc, #56]	; (800189c <MX_I2C1_Init+0x50>)
 8001864:	2200      	movs	r2, #0
 8001866:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001868:	4b0c      	ldr	r3, [pc, #48]	; (800189c <MX_I2C1_Init+0x50>)
 800186a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800186e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001870:	4b0a      	ldr	r3, [pc, #40]	; (800189c <MX_I2C1_Init+0x50>)
 8001872:	2200      	movs	r2, #0
 8001874:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001876:	4b09      	ldr	r3, [pc, #36]	; (800189c <MX_I2C1_Init+0x50>)
 8001878:	2200      	movs	r2, #0
 800187a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800187c:	4b07      	ldr	r3, [pc, #28]	; (800189c <MX_I2C1_Init+0x50>)
 800187e:	2200      	movs	r2, #0
 8001880:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001882:	4b06      	ldr	r3, [pc, #24]	; (800189c <MX_I2C1_Init+0x50>)
 8001884:	2200      	movs	r2, #0
 8001886:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001888:	4804      	ldr	r0, [pc, #16]	; (800189c <MX_I2C1_Init+0x50>)
 800188a:	f001 f977 	bl	8002b7c <HAL_I2C_Init>
 800188e:	4603      	mov	r3, r0
 8001890:	2b00      	cmp	r3, #0
 8001892:	d001      	beq.n	8001898 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001894:	f000 f914 	bl	8001ac0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001898:	bf00      	nop
 800189a:	bd80      	pop	{r7, pc}
 800189c:	200001fc 	.word	0x200001fc
 80018a0:	40005400 	.word	0x40005400
 80018a4:	000186a0 	.word	0x000186a0

080018a8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80018ac:	4b17      	ldr	r3, [pc, #92]	; (800190c <MX_SPI1_Init+0x64>)
 80018ae:	4a18      	ldr	r2, [pc, #96]	; (8001910 <MX_SPI1_Init+0x68>)
 80018b0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80018b2:	4b16      	ldr	r3, [pc, #88]	; (800190c <MX_SPI1_Init+0x64>)
 80018b4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80018b8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80018ba:	4b14      	ldr	r3, [pc, #80]	; (800190c <MX_SPI1_Init+0x64>)
 80018bc:	2200      	movs	r2, #0
 80018be:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80018c0:	4b12      	ldr	r3, [pc, #72]	; (800190c <MX_SPI1_Init+0x64>)
 80018c2:	2200      	movs	r2, #0
 80018c4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80018c6:	4b11      	ldr	r3, [pc, #68]	; (800190c <MX_SPI1_Init+0x64>)
 80018c8:	2200      	movs	r2, #0
 80018ca:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80018cc:	4b0f      	ldr	r3, [pc, #60]	; (800190c <MX_SPI1_Init+0x64>)
 80018ce:	2201      	movs	r2, #1
 80018d0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80018d2:	4b0e      	ldr	r3, [pc, #56]	; (800190c <MX_SPI1_Init+0x64>)
 80018d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80018d8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80018da:	4b0c      	ldr	r3, [pc, #48]	; (800190c <MX_SPI1_Init+0x64>)
 80018dc:	2210      	movs	r2, #16
 80018de:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80018e0:	4b0a      	ldr	r3, [pc, #40]	; (800190c <MX_SPI1_Init+0x64>)
 80018e2:	2200      	movs	r2, #0
 80018e4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80018e6:	4b09      	ldr	r3, [pc, #36]	; (800190c <MX_SPI1_Init+0x64>)
 80018e8:	2200      	movs	r2, #0
 80018ea:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80018ec:	4b07      	ldr	r3, [pc, #28]	; (800190c <MX_SPI1_Init+0x64>)
 80018ee:	2200      	movs	r2, #0
 80018f0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80018f2:	4b06      	ldr	r3, [pc, #24]	; (800190c <MX_SPI1_Init+0x64>)
 80018f4:	220a      	movs	r2, #10
 80018f6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80018f8:	4804      	ldr	r0, [pc, #16]	; (800190c <MX_SPI1_Init+0x64>)
 80018fa:	f002 f9eb 	bl	8003cd4 <HAL_SPI_Init>
 80018fe:	4603      	mov	r3, r0
 8001900:	2b00      	cmp	r3, #0
 8001902:	d001      	beq.n	8001908 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001904:	f000 f8dc 	bl	8001ac0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001908:	bf00      	nop
 800190a:	bd80      	pop	{r7, pc}
 800190c:	20000250 	.word	0x20000250
 8001910:	40013000 	.word	0x40013000

08001914 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b086      	sub	sp, #24
 8001918:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800191a:	f107 0308 	add.w	r3, r7, #8
 800191e:	2200      	movs	r2, #0
 8001920:	601a      	str	r2, [r3, #0]
 8001922:	605a      	str	r2, [r3, #4]
 8001924:	609a      	str	r2, [r3, #8]
 8001926:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001928:	463b      	mov	r3, r7
 800192a:	2200      	movs	r2, #0
 800192c:	601a      	str	r2, [r3, #0]
 800192e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001930:	4b1e      	ldr	r3, [pc, #120]	; (80019ac <MX_TIM2_Init+0x98>)
 8001932:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001936:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 64000-1;
 8001938:	4b1c      	ldr	r3, [pc, #112]	; (80019ac <MX_TIM2_Init+0x98>)
 800193a:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 800193e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001940:	4b1a      	ldr	r3, [pc, #104]	; (80019ac <MX_TIM2_Init+0x98>)
 8001942:	2200      	movs	r2, #0
 8001944:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001946:	4b19      	ldr	r3, [pc, #100]	; (80019ac <MX_TIM2_Init+0x98>)
 8001948:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800194c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800194e:	4b17      	ldr	r3, [pc, #92]	; (80019ac <MX_TIM2_Init+0x98>)
 8001950:	2200      	movs	r2, #0
 8001952:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001954:	4b15      	ldr	r3, [pc, #84]	; (80019ac <MX_TIM2_Init+0x98>)
 8001956:	2200      	movs	r2, #0
 8001958:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800195a:	4814      	ldr	r0, [pc, #80]	; (80019ac <MX_TIM2_Init+0x98>)
 800195c:	f002 fc94 	bl	8004288 <HAL_TIM_Base_Init>
 8001960:	4603      	mov	r3, r0
 8001962:	2b00      	cmp	r3, #0
 8001964:	d001      	beq.n	800196a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001966:	f000 f8ab 	bl	8001ac0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800196a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800196e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001970:	f107 0308 	add.w	r3, r7, #8
 8001974:	4619      	mov	r1, r3
 8001976:	480d      	ldr	r0, [pc, #52]	; (80019ac <MX_TIM2_Init+0x98>)
 8001978:	f002 fd46 	bl	8004408 <HAL_TIM_ConfigClockSource>
 800197c:	4603      	mov	r3, r0
 800197e:	2b00      	cmp	r3, #0
 8001980:	d001      	beq.n	8001986 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001982:	f000 f89d 	bl	8001ac0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001986:	2300      	movs	r3, #0
 8001988:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800198a:	2300      	movs	r3, #0
 800198c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800198e:	463b      	mov	r3, r7
 8001990:	4619      	mov	r1, r3
 8001992:	4806      	ldr	r0, [pc, #24]	; (80019ac <MX_TIM2_Init+0x98>)
 8001994:	f002 fef8 	bl	8004788 <HAL_TIMEx_MasterConfigSynchronization>
 8001998:	4603      	mov	r3, r0
 800199a:	2b00      	cmp	r3, #0
 800199c:	d001      	beq.n	80019a2 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800199e:	f000 f88f 	bl	8001ac0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80019a2:	bf00      	nop
 80019a4:	3718      	adds	r7, #24
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	bf00      	nop
 80019ac:	200002a8 	.word	0x200002a8

080019b0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80019b4:	4b11      	ldr	r3, [pc, #68]	; (80019fc <MX_USART1_UART_Init+0x4c>)
 80019b6:	4a12      	ldr	r2, [pc, #72]	; (8001a00 <MX_USART1_UART_Init+0x50>)
 80019b8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80019ba:	4b10      	ldr	r3, [pc, #64]	; (80019fc <MX_USART1_UART_Init+0x4c>)
 80019bc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80019c0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80019c2:	4b0e      	ldr	r3, [pc, #56]	; (80019fc <MX_USART1_UART_Init+0x4c>)
 80019c4:	2200      	movs	r2, #0
 80019c6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80019c8:	4b0c      	ldr	r3, [pc, #48]	; (80019fc <MX_USART1_UART_Init+0x4c>)
 80019ca:	2200      	movs	r2, #0
 80019cc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80019ce:	4b0b      	ldr	r3, [pc, #44]	; (80019fc <MX_USART1_UART_Init+0x4c>)
 80019d0:	2200      	movs	r2, #0
 80019d2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80019d4:	4b09      	ldr	r3, [pc, #36]	; (80019fc <MX_USART1_UART_Init+0x4c>)
 80019d6:	220c      	movs	r2, #12
 80019d8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019da:	4b08      	ldr	r3, [pc, #32]	; (80019fc <MX_USART1_UART_Init+0x4c>)
 80019dc:	2200      	movs	r2, #0
 80019de:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80019e0:	4b06      	ldr	r3, [pc, #24]	; (80019fc <MX_USART1_UART_Init+0x4c>)
 80019e2:	2200      	movs	r2, #0
 80019e4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80019e6:	4805      	ldr	r0, [pc, #20]	; (80019fc <MX_USART1_UART_Init+0x4c>)
 80019e8:	f002 ff2c 	bl	8004844 <HAL_UART_Init>
 80019ec:	4603      	mov	r3, r0
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d001      	beq.n	80019f6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80019f2:	f000 f865 	bl	8001ac0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80019f6:	bf00      	nop
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	bf00      	nop
 80019fc:	200002f0 	.word	0x200002f0
 8001a00:	40013800 	.word	0x40013800

08001a04 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b082      	sub	sp, #8
 8001a08:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001a0a:	4b0c      	ldr	r3, [pc, #48]	; (8001a3c <MX_DMA_Init+0x38>)
 8001a0c:	695b      	ldr	r3, [r3, #20]
 8001a0e:	4a0b      	ldr	r2, [pc, #44]	; (8001a3c <MX_DMA_Init+0x38>)
 8001a10:	f043 0301 	orr.w	r3, r3, #1
 8001a14:	6153      	str	r3, [r2, #20]
 8001a16:	4b09      	ldr	r3, [pc, #36]	; (8001a3c <MX_DMA_Init+0x38>)
 8001a18:	695b      	ldr	r3, [r3, #20]
 8001a1a:	f003 0301 	and.w	r3, r3, #1
 8001a1e:	607b      	str	r3, [r7, #4]
 8001a20:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8001a22:	2200      	movs	r2, #0
 8001a24:	2100      	movs	r1, #0
 8001a26:	200f      	movs	r0, #15
 8001a28:	f000 fc19 	bl	800225e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001a2c:	200f      	movs	r0, #15
 8001a2e:	f000 fc32 	bl	8002296 <HAL_NVIC_EnableIRQ>

}
 8001a32:	bf00      	nop
 8001a34:	3708      	adds	r7, #8
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	bf00      	nop
 8001a3c:	40021000 	.word	0x40021000

08001a40 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b086      	sub	sp, #24
 8001a44:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a46:	f107 0308 	add.w	r3, r7, #8
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	601a      	str	r2, [r3, #0]
 8001a4e:	605a      	str	r2, [r3, #4]
 8001a50:	609a      	str	r2, [r3, #8]
 8001a52:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a54:	4b18      	ldr	r3, [pc, #96]	; (8001ab8 <MX_GPIO_Init+0x78>)
 8001a56:	699b      	ldr	r3, [r3, #24]
 8001a58:	4a17      	ldr	r2, [pc, #92]	; (8001ab8 <MX_GPIO_Init+0x78>)
 8001a5a:	f043 0304 	orr.w	r3, r3, #4
 8001a5e:	6193      	str	r3, [r2, #24]
 8001a60:	4b15      	ldr	r3, [pc, #84]	; (8001ab8 <MX_GPIO_Init+0x78>)
 8001a62:	699b      	ldr	r3, [r3, #24]
 8001a64:	f003 0304 	and.w	r3, r3, #4
 8001a68:	607b      	str	r3, [r7, #4]
 8001a6a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a6c:	4b12      	ldr	r3, [pc, #72]	; (8001ab8 <MX_GPIO_Init+0x78>)
 8001a6e:	699b      	ldr	r3, [r3, #24]
 8001a70:	4a11      	ldr	r2, [pc, #68]	; (8001ab8 <MX_GPIO_Init+0x78>)
 8001a72:	f043 0308 	orr.w	r3, r3, #8
 8001a76:	6193      	str	r3, [r2, #24]
 8001a78:	4b0f      	ldr	r3, [pc, #60]	; (8001ab8 <MX_GPIO_Init+0x78>)
 8001a7a:	699b      	ldr	r3, [r3, #24]
 8001a7c:	f003 0308 	and.w	r3, r3, #8
 8001a80:	603b      	str	r3, [r7, #0]
 8001a82:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_8, GPIO_PIN_RESET);
 8001a84:	2200      	movs	r2, #0
 8001a86:	f44f 7188 	mov.w	r1, #272	; 0x110
 8001a8a:	480c      	ldr	r0, [pc, #48]	; (8001abc <MX_GPIO_Init+0x7c>)
 8001a8c:	f001 f844 	bl	8002b18 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA4 PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_8;
 8001a90:	f44f 7388 	mov.w	r3, #272	; 0x110
 8001a94:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a96:	2301      	movs	r3, #1
 8001a98:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a9e:	2302      	movs	r3, #2
 8001aa0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001aa2:	f107 0308 	add.w	r3, r7, #8
 8001aa6:	4619      	mov	r1, r3
 8001aa8:	4804      	ldr	r0, [pc, #16]	; (8001abc <MX_GPIO_Init+0x7c>)
 8001aaa:	f000 feb1 	bl	8002810 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001aae:	bf00      	nop
 8001ab0:	3718      	adds	r7, #24
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}
 8001ab6:	bf00      	nop
 8001ab8:	40021000 	.word	0x40021000
 8001abc:	40010800 	.word	0x40010800

08001ac0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ac4:	b672      	cpsid	i
}
 8001ac6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ac8:	e7fe      	b.n	8001ac8 <Error_Handler+0x8>
	...

08001acc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001acc:	b480      	push	{r7}
 8001ace:	b083      	sub	sp, #12
 8001ad0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001ad2:	4b0e      	ldr	r3, [pc, #56]	; (8001b0c <HAL_MspInit+0x40>)
 8001ad4:	699b      	ldr	r3, [r3, #24]
 8001ad6:	4a0d      	ldr	r2, [pc, #52]	; (8001b0c <HAL_MspInit+0x40>)
 8001ad8:	f043 0301 	orr.w	r3, r3, #1
 8001adc:	6193      	str	r3, [r2, #24]
 8001ade:	4b0b      	ldr	r3, [pc, #44]	; (8001b0c <HAL_MspInit+0x40>)
 8001ae0:	699b      	ldr	r3, [r3, #24]
 8001ae2:	f003 0301 	and.w	r3, r3, #1
 8001ae6:	607b      	str	r3, [r7, #4]
 8001ae8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001aea:	4b08      	ldr	r3, [pc, #32]	; (8001b0c <HAL_MspInit+0x40>)
 8001aec:	69db      	ldr	r3, [r3, #28]
 8001aee:	4a07      	ldr	r2, [pc, #28]	; (8001b0c <HAL_MspInit+0x40>)
 8001af0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001af4:	61d3      	str	r3, [r2, #28]
 8001af6:	4b05      	ldr	r3, [pc, #20]	; (8001b0c <HAL_MspInit+0x40>)
 8001af8:	69db      	ldr	r3, [r3, #28]
 8001afa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001afe:	603b      	str	r3, [r7, #0]
 8001b00:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b02:	bf00      	nop
 8001b04:	370c      	adds	r7, #12
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bc80      	pop	{r7}
 8001b0a:	4770      	bx	lr
 8001b0c:	40021000 	.word	0x40021000

08001b10 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b088      	sub	sp, #32
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b18:	f107 0310 	add.w	r3, r7, #16
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	601a      	str	r2, [r3, #0]
 8001b20:	605a      	str	r2, [r3, #4]
 8001b22:	609a      	str	r2, [r3, #8]
 8001b24:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	4a15      	ldr	r2, [pc, #84]	; (8001b80 <HAL_I2C_MspInit+0x70>)
 8001b2c:	4293      	cmp	r3, r2
 8001b2e:	d123      	bne.n	8001b78 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b30:	4b14      	ldr	r3, [pc, #80]	; (8001b84 <HAL_I2C_MspInit+0x74>)
 8001b32:	699b      	ldr	r3, [r3, #24]
 8001b34:	4a13      	ldr	r2, [pc, #76]	; (8001b84 <HAL_I2C_MspInit+0x74>)
 8001b36:	f043 0308 	orr.w	r3, r3, #8
 8001b3a:	6193      	str	r3, [r2, #24]
 8001b3c:	4b11      	ldr	r3, [pc, #68]	; (8001b84 <HAL_I2C_MspInit+0x74>)
 8001b3e:	699b      	ldr	r3, [r3, #24]
 8001b40:	f003 0308 	and.w	r3, r3, #8
 8001b44:	60fb      	str	r3, [r7, #12]
 8001b46:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001b48:	23c0      	movs	r3, #192	; 0xc0
 8001b4a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b4c:	2312      	movs	r3, #18
 8001b4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b50:	2303      	movs	r3, #3
 8001b52:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b54:	f107 0310 	add.w	r3, r7, #16
 8001b58:	4619      	mov	r1, r3
 8001b5a:	480b      	ldr	r0, [pc, #44]	; (8001b88 <HAL_I2C_MspInit+0x78>)
 8001b5c:	f000 fe58 	bl	8002810 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001b60:	4b08      	ldr	r3, [pc, #32]	; (8001b84 <HAL_I2C_MspInit+0x74>)
 8001b62:	69db      	ldr	r3, [r3, #28]
 8001b64:	4a07      	ldr	r2, [pc, #28]	; (8001b84 <HAL_I2C_MspInit+0x74>)
 8001b66:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001b6a:	61d3      	str	r3, [r2, #28]
 8001b6c:	4b05      	ldr	r3, [pc, #20]	; (8001b84 <HAL_I2C_MspInit+0x74>)
 8001b6e:	69db      	ldr	r3, [r3, #28]
 8001b70:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b74:	60bb      	str	r3, [r7, #8]
 8001b76:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001b78:	bf00      	nop
 8001b7a:	3720      	adds	r7, #32
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bd80      	pop	{r7, pc}
 8001b80:	40005400 	.word	0x40005400
 8001b84:	40021000 	.word	0x40021000
 8001b88:	40010c00 	.word	0x40010c00

08001b8c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b088      	sub	sp, #32
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b94:	f107 0310 	add.w	r3, r7, #16
 8001b98:	2200      	movs	r2, #0
 8001b9a:	601a      	str	r2, [r3, #0]
 8001b9c:	605a      	str	r2, [r3, #4]
 8001b9e:	609a      	str	r2, [r3, #8]
 8001ba0:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	4a1b      	ldr	r2, [pc, #108]	; (8001c14 <HAL_SPI_MspInit+0x88>)
 8001ba8:	4293      	cmp	r3, r2
 8001baa:	d12f      	bne.n	8001c0c <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001bac:	4b1a      	ldr	r3, [pc, #104]	; (8001c18 <HAL_SPI_MspInit+0x8c>)
 8001bae:	699b      	ldr	r3, [r3, #24]
 8001bb0:	4a19      	ldr	r2, [pc, #100]	; (8001c18 <HAL_SPI_MspInit+0x8c>)
 8001bb2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001bb6:	6193      	str	r3, [r2, #24]
 8001bb8:	4b17      	ldr	r3, [pc, #92]	; (8001c18 <HAL_SPI_MspInit+0x8c>)
 8001bba:	699b      	ldr	r3, [r3, #24]
 8001bbc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001bc0:	60fb      	str	r3, [r7, #12]
 8001bc2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bc4:	4b14      	ldr	r3, [pc, #80]	; (8001c18 <HAL_SPI_MspInit+0x8c>)
 8001bc6:	699b      	ldr	r3, [r3, #24]
 8001bc8:	4a13      	ldr	r2, [pc, #76]	; (8001c18 <HAL_SPI_MspInit+0x8c>)
 8001bca:	f043 0304 	orr.w	r3, r3, #4
 8001bce:	6193      	str	r3, [r2, #24]
 8001bd0:	4b11      	ldr	r3, [pc, #68]	; (8001c18 <HAL_SPI_MspInit+0x8c>)
 8001bd2:	699b      	ldr	r3, [r3, #24]
 8001bd4:	f003 0304 	and.w	r3, r3, #4
 8001bd8:	60bb      	str	r3, [r7, #8]
 8001bda:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001bdc:	23a0      	movs	r3, #160	; 0xa0
 8001bde:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001be0:	2302      	movs	r3, #2
 8001be2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001be4:	2303      	movs	r3, #3
 8001be6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001be8:	f107 0310 	add.w	r3, r7, #16
 8001bec:	4619      	mov	r1, r3
 8001bee:	480b      	ldr	r0, [pc, #44]	; (8001c1c <HAL_SPI_MspInit+0x90>)
 8001bf0:	f000 fe0e 	bl	8002810 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001bf4:	2340      	movs	r3, #64	; 0x40
 8001bf6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c00:	f107 0310 	add.w	r3, r7, #16
 8001c04:	4619      	mov	r1, r3
 8001c06:	4805      	ldr	r0, [pc, #20]	; (8001c1c <HAL_SPI_MspInit+0x90>)
 8001c08:	f000 fe02 	bl	8002810 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001c0c:	bf00      	nop
 8001c0e:	3720      	adds	r7, #32
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bd80      	pop	{r7, pc}
 8001c14:	40013000 	.word	0x40013000
 8001c18:	40021000 	.word	0x40021000
 8001c1c:	40010800 	.word	0x40010800

08001c20 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001c20:	b480      	push	{r7}
 8001c22:	b085      	sub	sp, #20
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c30:	d10b      	bne.n	8001c4a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001c32:	4b08      	ldr	r3, [pc, #32]	; (8001c54 <HAL_TIM_Base_MspInit+0x34>)
 8001c34:	69db      	ldr	r3, [r3, #28]
 8001c36:	4a07      	ldr	r2, [pc, #28]	; (8001c54 <HAL_TIM_Base_MspInit+0x34>)
 8001c38:	f043 0301 	orr.w	r3, r3, #1
 8001c3c:	61d3      	str	r3, [r2, #28]
 8001c3e:	4b05      	ldr	r3, [pc, #20]	; (8001c54 <HAL_TIM_Base_MspInit+0x34>)
 8001c40:	69db      	ldr	r3, [r3, #28]
 8001c42:	f003 0301 	and.w	r3, r3, #1
 8001c46:	60fb      	str	r3, [r7, #12]
 8001c48:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001c4a:	bf00      	nop
 8001c4c:	3714      	adds	r7, #20
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bc80      	pop	{r7}
 8001c52:	4770      	bx	lr
 8001c54:	40021000 	.word	0x40021000

08001c58 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b088      	sub	sp, #32
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c60:	f107 0310 	add.w	r3, r7, #16
 8001c64:	2200      	movs	r2, #0
 8001c66:	601a      	str	r2, [r3, #0]
 8001c68:	605a      	str	r2, [r3, #4]
 8001c6a:	609a      	str	r2, [r3, #8]
 8001c6c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4a33      	ldr	r2, [pc, #204]	; (8001d40 <HAL_UART_MspInit+0xe8>)
 8001c74:	4293      	cmp	r3, r2
 8001c76:	d15f      	bne.n	8001d38 <HAL_UART_MspInit+0xe0>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001c78:	4b32      	ldr	r3, [pc, #200]	; (8001d44 <HAL_UART_MspInit+0xec>)
 8001c7a:	699b      	ldr	r3, [r3, #24]
 8001c7c:	4a31      	ldr	r2, [pc, #196]	; (8001d44 <HAL_UART_MspInit+0xec>)
 8001c7e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c82:	6193      	str	r3, [r2, #24]
 8001c84:	4b2f      	ldr	r3, [pc, #188]	; (8001d44 <HAL_UART_MspInit+0xec>)
 8001c86:	699b      	ldr	r3, [r3, #24]
 8001c88:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c8c:	60fb      	str	r3, [r7, #12]
 8001c8e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c90:	4b2c      	ldr	r3, [pc, #176]	; (8001d44 <HAL_UART_MspInit+0xec>)
 8001c92:	699b      	ldr	r3, [r3, #24]
 8001c94:	4a2b      	ldr	r2, [pc, #172]	; (8001d44 <HAL_UART_MspInit+0xec>)
 8001c96:	f043 0304 	orr.w	r3, r3, #4
 8001c9a:	6193      	str	r3, [r2, #24]
 8001c9c:	4b29      	ldr	r3, [pc, #164]	; (8001d44 <HAL_UART_MspInit+0xec>)
 8001c9e:	699b      	ldr	r3, [r3, #24]
 8001ca0:	f003 0304 	and.w	r3, r3, #4
 8001ca4:	60bb      	str	r3, [r7, #8]
 8001ca6:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001ca8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001cac:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cae:	2302      	movs	r3, #2
 8001cb0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001cb2:	2303      	movs	r3, #3
 8001cb4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cb6:	f107 0310 	add.w	r3, r7, #16
 8001cba:	4619      	mov	r1, r3
 8001cbc:	4822      	ldr	r0, [pc, #136]	; (8001d48 <HAL_UART_MspInit+0xf0>)
 8001cbe:	f000 fda7 	bl	8002810 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001cc2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001cc6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cd0:	f107 0310 	add.w	r3, r7, #16
 8001cd4:	4619      	mov	r1, r3
 8001cd6:	481c      	ldr	r0, [pc, #112]	; (8001d48 <HAL_UART_MspInit+0xf0>)
 8001cd8:	f000 fd9a 	bl	8002810 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8001cdc:	4b1b      	ldr	r3, [pc, #108]	; (8001d4c <HAL_UART_MspInit+0xf4>)
 8001cde:	4a1c      	ldr	r2, [pc, #112]	; (8001d50 <HAL_UART_MspInit+0xf8>)
 8001ce0:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001ce2:	4b1a      	ldr	r3, [pc, #104]	; (8001d4c <HAL_UART_MspInit+0xf4>)
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ce8:	4b18      	ldr	r3, [pc, #96]	; (8001d4c <HAL_UART_MspInit+0xf4>)
 8001cea:	2200      	movs	r2, #0
 8001cec:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001cee:	4b17      	ldr	r3, [pc, #92]	; (8001d4c <HAL_UART_MspInit+0xf4>)
 8001cf0:	2280      	movs	r2, #128	; 0x80
 8001cf2:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001cf4:	4b15      	ldr	r3, [pc, #84]	; (8001d4c <HAL_UART_MspInit+0xf4>)
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001cfa:	4b14      	ldr	r3, [pc, #80]	; (8001d4c <HAL_UART_MspInit+0xf4>)
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8001d00:	4b12      	ldr	r3, [pc, #72]	; (8001d4c <HAL_UART_MspInit+0xf4>)
 8001d02:	2200      	movs	r2, #0
 8001d04:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001d06:	4b11      	ldr	r3, [pc, #68]	; (8001d4c <HAL_UART_MspInit+0xf4>)
 8001d08:	2200      	movs	r2, #0
 8001d0a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001d0c:	480f      	ldr	r0, [pc, #60]	; (8001d4c <HAL_UART_MspInit+0xf4>)
 8001d0e:	f000 fadd 	bl	80022cc <HAL_DMA_Init>
 8001d12:	4603      	mov	r3, r0
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d001      	beq.n	8001d1c <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 8001d18:	f7ff fed2 	bl	8001ac0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	4a0b      	ldr	r2, [pc, #44]	; (8001d4c <HAL_UART_MspInit+0xf4>)
 8001d20:	63da      	str	r2, [r3, #60]	; 0x3c
 8001d22:	4a0a      	ldr	r2, [pc, #40]	; (8001d4c <HAL_UART_MspInit+0xf4>)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001d28:	2200      	movs	r2, #0
 8001d2a:	2100      	movs	r1, #0
 8001d2c:	2025      	movs	r0, #37	; 0x25
 8001d2e:	f000 fa96 	bl	800225e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001d32:	2025      	movs	r0, #37	; 0x25
 8001d34:	f000 faaf 	bl	8002296 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001d38:	bf00      	nop
 8001d3a:	3720      	adds	r7, #32
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	bd80      	pop	{r7, pc}
 8001d40:	40013800 	.word	0x40013800
 8001d44:	40021000 	.word	0x40021000
 8001d48:	40010800 	.word	0x40010800
 8001d4c:	20000338 	.word	0x20000338
 8001d50:	40020058 	.word	0x40020058

08001d54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d54:	b480      	push	{r7}
 8001d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d58:	e7fe      	b.n	8001d58 <NMI_Handler+0x4>

08001d5a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d5a:	b480      	push	{r7}
 8001d5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d5e:	e7fe      	b.n	8001d5e <HardFault_Handler+0x4>

08001d60 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d60:	b480      	push	{r7}
 8001d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d64:	e7fe      	b.n	8001d64 <MemManage_Handler+0x4>

08001d66 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d66:	b480      	push	{r7}
 8001d68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d6a:	e7fe      	b.n	8001d6a <BusFault_Handler+0x4>

08001d6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d70:	e7fe      	b.n	8001d70 <UsageFault_Handler+0x4>

08001d72 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d72:	b480      	push	{r7}
 8001d74:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d76:	bf00      	nop
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bc80      	pop	{r7}
 8001d7c:	4770      	bx	lr

08001d7e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d7e:	b480      	push	{r7}
 8001d80:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d82:	bf00      	nop
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bc80      	pop	{r7}
 8001d88:	4770      	bx	lr

08001d8a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d8a:	b480      	push	{r7}
 8001d8c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d8e:	bf00      	nop
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bc80      	pop	{r7}
 8001d94:	4770      	bx	lr

08001d96 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d96:	b580      	push	{r7, lr}
 8001d98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d9a:	f000 f949 	bl	8002030 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d9e:	bf00      	nop
 8001da0:	bd80      	pop	{r7, pc}
	...

08001da4 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001da8:	4802      	ldr	r0, [pc, #8]	; (8001db4 <DMA1_Channel5_IRQHandler+0x10>)
 8001daa:	f000 fbfd 	bl	80025a8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8001dae:	bf00      	nop
 8001db0:	bd80      	pop	{r7, pc}
 8001db2:	bf00      	nop
 8001db4:	20000338 	.word	0x20000338

08001db8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001dbc:	4802      	ldr	r0, [pc, #8]	; (8001dc8 <USART1_IRQHandler+0x10>)
 8001dbe:	f002 fe71 	bl	8004aa4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001dc2:	bf00      	nop
 8001dc4:	bd80      	pop	{r7, pc}
 8001dc6:	bf00      	nop
 8001dc8:	200002f0 	.word	0x200002f0

08001dcc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	af00      	add	r7, sp, #0
  return 1;
 8001dd0:	2301      	movs	r3, #1
}
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	bc80      	pop	{r7}
 8001dd8:	4770      	bx	lr

08001dda <_kill>:

int _kill(int pid, int sig)
{
 8001dda:	b580      	push	{r7, lr}
 8001ddc:	b082      	sub	sp, #8
 8001dde:	af00      	add	r7, sp, #0
 8001de0:	6078      	str	r0, [r7, #4]
 8001de2:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001de4:	f003 fd6e 	bl	80058c4 <__errno>
 8001de8:	4603      	mov	r3, r0
 8001dea:	2216      	movs	r2, #22
 8001dec:	601a      	str	r2, [r3, #0]
  return -1;
 8001dee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001df2:	4618      	mov	r0, r3
 8001df4:	3708      	adds	r7, #8
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}

08001dfa <_exit>:

void _exit (int status)
{
 8001dfa:	b580      	push	{r7, lr}
 8001dfc:	b082      	sub	sp, #8
 8001dfe:	af00      	add	r7, sp, #0
 8001e00:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001e02:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001e06:	6878      	ldr	r0, [r7, #4]
 8001e08:	f7ff ffe7 	bl	8001dda <_kill>
  while (1) {}    /* Make sure we hang here */
 8001e0c:	e7fe      	b.n	8001e0c <_exit+0x12>

08001e0e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001e0e:	b580      	push	{r7, lr}
 8001e10:	b086      	sub	sp, #24
 8001e12:	af00      	add	r7, sp, #0
 8001e14:	60f8      	str	r0, [r7, #12]
 8001e16:	60b9      	str	r1, [r7, #8]
 8001e18:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	617b      	str	r3, [r7, #20]
 8001e1e:	e00a      	b.n	8001e36 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001e20:	f3af 8000 	nop.w
 8001e24:	4601      	mov	r1, r0
 8001e26:	68bb      	ldr	r3, [r7, #8]
 8001e28:	1c5a      	adds	r2, r3, #1
 8001e2a:	60ba      	str	r2, [r7, #8]
 8001e2c:	b2ca      	uxtb	r2, r1
 8001e2e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e30:	697b      	ldr	r3, [r7, #20]
 8001e32:	3301      	adds	r3, #1
 8001e34:	617b      	str	r3, [r7, #20]
 8001e36:	697a      	ldr	r2, [r7, #20]
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	429a      	cmp	r2, r3
 8001e3c:	dbf0      	blt.n	8001e20 <_read+0x12>
  }

  return len;
 8001e3e:	687b      	ldr	r3, [r7, #4]
}
 8001e40:	4618      	mov	r0, r3
 8001e42:	3718      	adds	r7, #24
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bd80      	pop	{r7, pc}

08001e48 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b086      	sub	sp, #24
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	60f8      	str	r0, [r7, #12]
 8001e50:	60b9      	str	r1, [r7, #8]
 8001e52:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e54:	2300      	movs	r3, #0
 8001e56:	617b      	str	r3, [r7, #20]
 8001e58:	e009      	b.n	8001e6e <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001e5a:	68bb      	ldr	r3, [r7, #8]
 8001e5c:	1c5a      	adds	r2, r3, #1
 8001e5e:	60ba      	str	r2, [r7, #8]
 8001e60:	781b      	ldrb	r3, [r3, #0]
 8001e62:	4618      	mov	r0, r3
 8001e64:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e68:	697b      	ldr	r3, [r7, #20]
 8001e6a:	3301      	adds	r3, #1
 8001e6c:	617b      	str	r3, [r7, #20]
 8001e6e:	697a      	ldr	r2, [r7, #20]
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	429a      	cmp	r2, r3
 8001e74:	dbf1      	blt.n	8001e5a <_write+0x12>
  }
  return len;
 8001e76:	687b      	ldr	r3, [r7, #4]
}
 8001e78:	4618      	mov	r0, r3
 8001e7a:	3718      	adds	r7, #24
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	bd80      	pop	{r7, pc}

08001e80 <_close>:

int _close(int file)
{
 8001e80:	b480      	push	{r7}
 8001e82:	b083      	sub	sp, #12
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001e88:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	370c      	adds	r7, #12
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bc80      	pop	{r7}
 8001e94:	4770      	bx	lr

08001e96 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001e96:	b480      	push	{r7}
 8001e98:	b083      	sub	sp, #12
 8001e9a:	af00      	add	r7, sp, #0
 8001e9c:	6078      	str	r0, [r7, #4]
 8001e9e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001ea6:	605a      	str	r2, [r3, #4]
  return 0;
 8001ea8:	2300      	movs	r3, #0
}
 8001eaa:	4618      	mov	r0, r3
 8001eac:	370c      	adds	r7, #12
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bc80      	pop	{r7}
 8001eb2:	4770      	bx	lr

08001eb4 <_isatty>:

int _isatty(int file)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	b083      	sub	sp, #12
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001ebc:	2301      	movs	r3, #1
}
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	370c      	adds	r7, #12
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bc80      	pop	{r7}
 8001ec6:	4770      	bx	lr

08001ec8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	b085      	sub	sp, #20
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	60f8      	str	r0, [r7, #12]
 8001ed0:	60b9      	str	r1, [r7, #8]
 8001ed2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001ed4:	2300      	movs	r3, #0
}
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	3714      	adds	r7, #20
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bc80      	pop	{r7}
 8001ede:	4770      	bx	lr

08001ee0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b086      	sub	sp, #24
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ee8:	4a14      	ldr	r2, [pc, #80]	; (8001f3c <_sbrk+0x5c>)
 8001eea:	4b15      	ldr	r3, [pc, #84]	; (8001f40 <_sbrk+0x60>)
 8001eec:	1ad3      	subs	r3, r2, r3
 8001eee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ef0:	697b      	ldr	r3, [r7, #20]
 8001ef2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ef4:	4b13      	ldr	r3, [pc, #76]	; (8001f44 <_sbrk+0x64>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d102      	bne.n	8001f02 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001efc:	4b11      	ldr	r3, [pc, #68]	; (8001f44 <_sbrk+0x64>)
 8001efe:	4a12      	ldr	r2, [pc, #72]	; (8001f48 <_sbrk+0x68>)
 8001f00:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f02:	4b10      	ldr	r3, [pc, #64]	; (8001f44 <_sbrk+0x64>)
 8001f04:	681a      	ldr	r2, [r3, #0]
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	4413      	add	r3, r2
 8001f0a:	693a      	ldr	r2, [r7, #16]
 8001f0c:	429a      	cmp	r2, r3
 8001f0e:	d207      	bcs.n	8001f20 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f10:	f003 fcd8 	bl	80058c4 <__errno>
 8001f14:	4603      	mov	r3, r0
 8001f16:	220c      	movs	r2, #12
 8001f18:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f1a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001f1e:	e009      	b.n	8001f34 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f20:	4b08      	ldr	r3, [pc, #32]	; (8001f44 <_sbrk+0x64>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f26:	4b07      	ldr	r3, [pc, #28]	; (8001f44 <_sbrk+0x64>)
 8001f28:	681a      	ldr	r2, [r3, #0]
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	4413      	add	r3, r2
 8001f2e:	4a05      	ldr	r2, [pc, #20]	; (8001f44 <_sbrk+0x64>)
 8001f30:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f32:	68fb      	ldr	r3, [r7, #12]
}
 8001f34:	4618      	mov	r0, r3
 8001f36:	3718      	adds	r7, #24
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	bd80      	pop	{r7, pc}
 8001f3c:	20005000 	.word	0x20005000
 8001f40:	00000400 	.word	0x00000400
 8001f44:	20000924 	.word	0x20000924
 8001f48:	20000940 	.word	0x20000940

08001f4c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f50:	bf00      	nop
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bc80      	pop	{r7}
 8001f56:	4770      	bx	lr

08001f58 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001f58:	480c      	ldr	r0, [pc, #48]	; (8001f8c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001f5a:	490d      	ldr	r1, [pc, #52]	; (8001f90 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001f5c:	4a0d      	ldr	r2, [pc, #52]	; (8001f94 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001f5e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f60:	e002      	b.n	8001f68 <LoopCopyDataInit>

08001f62 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f62:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f64:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f66:	3304      	adds	r3, #4

08001f68 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f68:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f6a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f6c:	d3f9      	bcc.n	8001f62 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f6e:	4a0a      	ldr	r2, [pc, #40]	; (8001f98 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001f70:	4c0a      	ldr	r4, [pc, #40]	; (8001f9c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001f72:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f74:	e001      	b.n	8001f7a <LoopFillZerobss>

08001f76 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f76:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f78:	3204      	adds	r2, #4

08001f7a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f7a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f7c:	d3fb      	bcc.n	8001f76 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001f7e:	f7ff ffe5 	bl	8001f4c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001f82:	f003 fca5 	bl	80058d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001f86:	f7ff fa4b 	bl	8001420 <main>
  bx lr
 8001f8a:	4770      	bx	lr
  ldr r0, =_sdata
 8001f8c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f90:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8001f94:	08008c10 	.word	0x08008c10
  ldr r2, =_sbss
 8001f98:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8001f9c:	2000093c 	.word	0x2000093c

08001fa0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001fa0:	e7fe      	b.n	8001fa0 <ADC1_2_IRQHandler>
	...

08001fa4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001fa8:	4b08      	ldr	r3, [pc, #32]	; (8001fcc <HAL_Init+0x28>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	4a07      	ldr	r2, [pc, #28]	; (8001fcc <HAL_Init+0x28>)
 8001fae:	f043 0310 	orr.w	r3, r3, #16
 8001fb2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001fb4:	2003      	movs	r0, #3
 8001fb6:	f000 f947 	bl	8002248 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001fba:	200f      	movs	r0, #15
 8001fbc:	f000 f808 	bl	8001fd0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001fc0:	f7ff fd84 	bl	8001acc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001fc4:	2300      	movs	r3, #0
}
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	bd80      	pop	{r7, pc}
 8001fca:	bf00      	nop
 8001fcc:	40022000 	.word	0x40022000

08001fd0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b082      	sub	sp, #8
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001fd8:	4b12      	ldr	r3, [pc, #72]	; (8002024 <HAL_InitTick+0x54>)
 8001fda:	681a      	ldr	r2, [r3, #0]
 8001fdc:	4b12      	ldr	r3, [pc, #72]	; (8002028 <HAL_InitTick+0x58>)
 8001fde:	781b      	ldrb	r3, [r3, #0]
 8001fe0:	4619      	mov	r1, r3
 8001fe2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001fe6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001fea:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fee:	4618      	mov	r0, r3
 8001ff0:	f000 f95f 	bl	80022b2 <HAL_SYSTICK_Config>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d001      	beq.n	8001ffe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	e00e      	b.n	800201c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	2b0f      	cmp	r3, #15
 8002002:	d80a      	bhi.n	800201a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002004:	2200      	movs	r2, #0
 8002006:	6879      	ldr	r1, [r7, #4]
 8002008:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800200c:	f000 f927 	bl	800225e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002010:	4a06      	ldr	r2, [pc, #24]	; (800202c <HAL_InitTick+0x5c>)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002016:	2300      	movs	r3, #0
 8002018:	e000      	b.n	800201c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800201a:	2301      	movs	r3, #1
}
 800201c:	4618      	mov	r0, r3
 800201e:	3708      	adds	r7, #8
 8002020:	46bd      	mov	sp, r7
 8002022:	bd80      	pop	{r7, pc}
 8002024:	20000000 	.word	0x20000000
 8002028:	20000008 	.word	0x20000008
 800202c:	20000004 	.word	0x20000004

08002030 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002030:	b480      	push	{r7}
 8002032:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002034:	4b05      	ldr	r3, [pc, #20]	; (800204c <HAL_IncTick+0x1c>)
 8002036:	781b      	ldrb	r3, [r3, #0]
 8002038:	461a      	mov	r2, r3
 800203a:	4b05      	ldr	r3, [pc, #20]	; (8002050 <HAL_IncTick+0x20>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	4413      	add	r3, r2
 8002040:	4a03      	ldr	r2, [pc, #12]	; (8002050 <HAL_IncTick+0x20>)
 8002042:	6013      	str	r3, [r2, #0]
}
 8002044:	bf00      	nop
 8002046:	46bd      	mov	sp, r7
 8002048:	bc80      	pop	{r7}
 800204a:	4770      	bx	lr
 800204c:	20000008 	.word	0x20000008
 8002050:	20000928 	.word	0x20000928

08002054 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002054:	b480      	push	{r7}
 8002056:	af00      	add	r7, sp, #0
  return uwTick;
 8002058:	4b02      	ldr	r3, [pc, #8]	; (8002064 <HAL_GetTick+0x10>)
 800205a:	681b      	ldr	r3, [r3, #0]
}
 800205c:	4618      	mov	r0, r3
 800205e:	46bd      	mov	sp, r7
 8002060:	bc80      	pop	{r7}
 8002062:	4770      	bx	lr
 8002064:	20000928 	.word	0x20000928

08002068 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b084      	sub	sp, #16
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002070:	f7ff fff0 	bl	8002054 <HAL_GetTick>
 8002074:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002080:	d005      	beq.n	800208e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002082:	4b0a      	ldr	r3, [pc, #40]	; (80020ac <HAL_Delay+0x44>)
 8002084:	781b      	ldrb	r3, [r3, #0]
 8002086:	461a      	mov	r2, r3
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	4413      	add	r3, r2
 800208c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800208e:	bf00      	nop
 8002090:	f7ff ffe0 	bl	8002054 <HAL_GetTick>
 8002094:	4602      	mov	r2, r0
 8002096:	68bb      	ldr	r3, [r7, #8]
 8002098:	1ad3      	subs	r3, r2, r3
 800209a:	68fa      	ldr	r2, [r7, #12]
 800209c:	429a      	cmp	r2, r3
 800209e:	d8f7      	bhi.n	8002090 <HAL_Delay+0x28>
  {
  }
}
 80020a0:	bf00      	nop
 80020a2:	bf00      	nop
 80020a4:	3710      	adds	r7, #16
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd80      	pop	{r7, pc}
 80020aa:	bf00      	nop
 80020ac:	20000008 	.word	0x20000008

080020b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020b0:	b480      	push	{r7}
 80020b2:	b085      	sub	sp, #20
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	f003 0307 	and.w	r3, r3, #7
 80020be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020c0:	4b0c      	ldr	r3, [pc, #48]	; (80020f4 <__NVIC_SetPriorityGrouping+0x44>)
 80020c2:	68db      	ldr	r3, [r3, #12]
 80020c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020c6:	68ba      	ldr	r2, [r7, #8]
 80020c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80020cc:	4013      	ands	r3, r2
 80020ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020d4:	68bb      	ldr	r3, [r7, #8]
 80020d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80020d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80020dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020e2:	4a04      	ldr	r2, [pc, #16]	; (80020f4 <__NVIC_SetPriorityGrouping+0x44>)
 80020e4:	68bb      	ldr	r3, [r7, #8]
 80020e6:	60d3      	str	r3, [r2, #12]
}
 80020e8:	bf00      	nop
 80020ea:	3714      	adds	r7, #20
 80020ec:	46bd      	mov	sp, r7
 80020ee:	bc80      	pop	{r7}
 80020f0:	4770      	bx	lr
 80020f2:	bf00      	nop
 80020f4:	e000ed00 	.word	0xe000ed00

080020f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80020f8:	b480      	push	{r7}
 80020fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020fc:	4b04      	ldr	r3, [pc, #16]	; (8002110 <__NVIC_GetPriorityGrouping+0x18>)
 80020fe:	68db      	ldr	r3, [r3, #12]
 8002100:	0a1b      	lsrs	r3, r3, #8
 8002102:	f003 0307 	and.w	r3, r3, #7
}
 8002106:	4618      	mov	r0, r3
 8002108:	46bd      	mov	sp, r7
 800210a:	bc80      	pop	{r7}
 800210c:	4770      	bx	lr
 800210e:	bf00      	nop
 8002110:	e000ed00 	.word	0xe000ed00

08002114 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002114:	b480      	push	{r7}
 8002116:	b083      	sub	sp, #12
 8002118:	af00      	add	r7, sp, #0
 800211a:	4603      	mov	r3, r0
 800211c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800211e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002122:	2b00      	cmp	r3, #0
 8002124:	db0b      	blt.n	800213e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002126:	79fb      	ldrb	r3, [r7, #7]
 8002128:	f003 021f 	and.w	r2, r3, #31
 800212c:	4906      	ldr	r1, [pc, #24]	; (8002148 <__NVIC_EnableIRQ+0x34>)
 800212e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002132:	095b      	lsrs	r3, r3, #5
 8002134:	2001      	movs	r0, #1
 8002136:	fa00 f202 	lsl.w	r2, r0, r2
 800213a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800213e:	bf00      	nop
 8002140:	370c      	adds	r7, #12
 8002142:	46bd      	mov	sp, r7
 8002144:	bc80      	pop	{r7}
 8002146:	4770      	bx	lr
 8002148:	e000e100 	.word	0xe000e100

0800214c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800214c:	b480      	push	{r7}
 800214e:	b083      	sub	sp, #12
 8002150:	af00      	add	r7, sp, #0
 8002152:	4603      	mov	r3, r0
 8002154:	6039      	str	r1, [r7, #0]
 8002156:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002158:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800215c:	2b00      	cmp	r3, #0
 800215e:	db0a      	blt.n	8002176 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	b2da      	uxtb	r2, r3
 8002164:	490c      	ldr	r1, [pc, #48]	; (8002198 <__NVIC_SetPriority+0x4c>)
 8002166:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800216a:	0112      	lsls	r2, r2, #4
 800216c:	b2d2      	uxtb	r2, r2
 800216e:	440b      	add	r3, r1
 8002170:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002174:	e00a      	b.n	800218c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	b2da      	uxtb	r2, r3
 800217a:	4908      	ldr	r1, [pc, #32]	; (800219c <__NVIC_SetPriority+0x50>)
 800217c:	79fb      	ldrb	r3, [r7, #7]
 800217e:	f003 030f 	and.w	r3, r3, #15
 8002182:	3b04      	subs	r3, #4
 8002184:	0112      	lsls	r2, r2, #4
 8002186:	b2d2      	uxtb	r2, r2
 8002188:	440b      	add	r3, r1
 800218a:	761a      	strb	r2, [r3, #24]
}
 800218c:	bf00      	nop
 800218e:	370c      	adds	r7, #12
 8002190:	46bd      	mov	sp, r7
 8002192:	bc80      	pop	{r7}
 8002194:	4770      	bx	lr
 8002196:	bf00      	nop
 8002198:	e000e100 	.word	0xe000e100
 800219c:	e000ed00 	.word	0xe000ed00

080021a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021a0:	b480      	push	{r7}
 80021a2:	b089      	sub	sp, #36	; 0x24
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	60f8      	str	r0, [r7, #12]
 80021a8:	60b9      	str	r1, [r7, #8]
 80021aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	f003 0307 	and.w	r3, r3, #7
 80021b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021b4:	69fb      	ldr	r3, [r7, #28]
 80021b6:	f1c3 0307 	rsb	r3, r3, #7
 80021ba:	2b04      	cmp	r3, #4
 80021bc:	bf28      	it	cs
 80021be:	2304      	movcs	r3, #4
 80021c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021c2:	69fb      	ldr	r3, [r7, #28]
 80021c4:	3304      	adds	r3, #4
 80021c6:	2b06      	cmp	r3, #6
 80021c8:	d902      	bls.n	80021d0 <NVIC_EncodePriority+0x30>
 80021ca:	69fb      	ldr	r3, [r7, #28]
 80021cc:	3b03      	subs	r3, #3
 80021ce:	e000      	b.n	80021d2 <NVIC_EncodePriority+0x32>
 80021d0:	2300      	movs	r3, #0
 80021d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021d4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80021d8:	69bb      	ldr	r3, [r7, #24]
 80021da:	fa02 f303 	lsl.w	r3, r2, r3
 80021de:	43da      	mvns	r2, r3
 80021e0:	68bb      	ldr	r3, [r7, #8]
 80021e2:	401a      	ands	r2, r3
 80021e4:	697b      	ldr	r3, [r7, #20]
 80021e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021e8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80021ec:	697b      	ldr	r3, [r7, #20]
 80021ee:	fa01 f303 	lsl.w	r3, r1, r3
 80021f2:	43d9      	mvns	r1, r3
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021f8:	4313      	orrs	r3, r2
         );
}
 80021fa:	4618      	mov	r0, r3
 80021fc:	3724      	adds	r7, #36	; 0x24
 80021fe:	46bd      	mov	sp, r7
 8002200:	bc80      	pop	{r7}
 8002202:	4770      	bx	lr

08002204 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b082      	sub	sp, #8
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	3b01      	subs	r3, #1
 8002210:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002214:	d301      	bcc.n	800221a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002216:	2301      	movs	r3, #1
 8002218:	e00f      	b.n	800223a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800221a:	4a0a      	ldr	r2, [pc, #40]	; (8002244 <SysTick_Config+0x40>)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	3b01      	subs	r3, #1
 8002220:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002222:	210f      	movs	r1, #15
 8002224:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002228:	f7ff ff90 	bl	800214c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800222c:	4b05      	ldr	r3, [pc, #20]	; (8002244 <SysTick_Config+0x40>)
 800222e:	2200      	movs	r2, #0
 8002230:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002232:	4b04      	ldr	r3, [pc, #16]	; (8002244 <SysTick_Config+0x40>)
 8002234:	2207      	movs	r2, #7
 8002236:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002238:	2300      	movs	r3, #0
}
 800223a:	4618      	mov	r0, r3
 800223c:	3708      	adds	r7, #8
 800223e:	46bd      	mov	sp, r7
 8002240:	bd80      	pop	{r7, pc}
 8002242:	bf00      	nop
 8002244:	e000e010 	.word	0xe000e010

08002248 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b082      	sub	sp, #8
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002250:	6878      	ldr	r0, [r7, #4]
 8002252:	f7ff ff2d 	bl	80020b0 <__NVIC_SetPriorityGrouping>
}
 8002256:	bf00      	nop
 8002258:	3708      	adds	r7, #8
 800225a:	46bd      	mov	sp, r7
 800225c:	bd80      	pop	{r7, pc}

0800225e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800225e:	b580      	push	{r7, lr}
 8002260:	b086      	sub	sp, #24
 8002262:	af00      	add	r7, sp, #0
 8002264:	4603      	mov	r3, r0
 8002266:	60b9      	str	r1, [r7, #8]
 8002268:	607a      	str	r2, [r7, #4]
 800226a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800226c:	2300      	movs	r3, #0
 800226e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002270:	f7ff ff42 	bl	80020f8 <__NVIC_GetPriorityGrouping>
 8002274:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002276:	687a      	ldr	r2, [r7, #4]
 8002278:	68b9      	ldr	r1, [r7, #8]
 800227a:	6978      	ldr	r0, [r7, #20]
 800227c:	f7ff ff90 	bl	80021a0 <NVIC_EncodePriority>
 8002280:	4602      	mov	r2, r0
 8002282:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002286:	4611      	mov	r1, r2
 8002288:	4618      	mov	r0, r3
 800228a:	f7ff ff5f 	bl	800214c <__NVIC_SetPriority>
}
 800228e:	bf00      	nop
 8002290:	3718      	adds	r7, #24
 8002292:	46bd      	mov	sp, r7
 8002294:	bd80      	pop	{r7, pc}

08002296 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002296:	b580      	push	{r7, lr}
 8002298:	b082      	sub	sp, #8
 800229a:	af00      	add	r7, sp, #0
 800229c:	4603      	mov	r3, r0
 800229e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80022a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022a4:	4618      	mov	r0, r3
 80022a6:	f7ff ff35 	bl	8002114 <__NVIC_EnableIRQ>
}
 80022aa:	bf00      	nop
 80022ac:	3708      	adds	r7, #8
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bd80      	pop	{r7, pc}

080022b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80022b2:	b580      	push	{r7, lr}
 80022b4:	b082      	sub	sp, #8
 80022b6:	af00      	add	r7, sp, #0
 80022b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80022ba:	6878      	ldr	r0, [r7, #4]
 80022bc:	f7ff ffa2 	bl	8002204 <SysTick_Config>
 80022c0:	4603      	mov	r3, r0
}
 80022c2:	4618      	mov	r0, r3
 80022c4:	3708      	adds	r7, #8
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd80      	pop	{r7, pc}
	...

080022cc <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80022cc:	b480      	push	{r7}
 80022ce:	b085      	sub	sp, #20
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80022d4:	2300      	movs	r3, #0
 80022d6:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d101      	bne.n	80022e2 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80022de:	2301      	movs	r3, #1
 80022e0:	e043      	b.n	800236a <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	461a      	mov	r2, r3
 80022e8:	4b22      	ldr	r3, [pc, #136]	; (8002374 <HAL_DMA_Init+0xa8>)
 80022ea:	4413      	add	r3, r2
 80022ec:	4a22      	ldr	r2, [pc, #136]	; (8002378 <HAL_DMA_Init+0xac>)
 80022ee:	fba2 2303 	umull	r2, r3, r2, r3
 80022f2:	091b      	lsrs	r3, r3, #4
 80022f4:	009a      	lsls	r2, r3, #2
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	4a1f      	ldr	r2, [pc, #124]	; (800237c <HAL_DMA_Init+0xb0>)
 80022fe:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2202      	movs	r2, #2
 8002304:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002316:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800231a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002324:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	68db      	ldr	r3, [r3, #12]
 800232a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002330:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	695b      	ldr	r3, [r3, #20]
 8002336:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800233c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	69db      	ldr	r3, [r3, #28]
 8002342:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002344:	68fa      	ldr	r2, [r7, #12]
 8002346:	4313      	orrs	r3, r2
 8002348:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	68fa      	ldr	r2, [r7, #12]
 8002350:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	2200      	movs	r2, #0
 8002356:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2201      	movs	r2, #1
 800235c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2200      	movs	r2, #0
 8002364:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002368:	2300      	movs	r3, #0
}
 800236a:	4618      	mov	r0, r3
 800236c:	3714      	adds	r7, #20
 800236e:	46bd      	mov	sp, r7
 8002370:	bc80      	pop	{r7}
 8002372:	4770      	bx	lr
 8002374:	bffdfff8 	.word	0xbffdfff8
 8002378:	cccccccd 	.word	0xcccccccd
 800237c:	40020000 	.word	0x40020000

08002380 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b086      	sub	sp, #24
 8002384:	af00      	add	r7, sp, #0
 8002386:	60f8      	str	r0, [r7, #12]
 8002388:	60b9      	str	r1, [r7, #8]
 800238a:	607a      	str	r2, [r7, #4]
 800238c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800238e:	2300      	movs	r3, #0
 8002390:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002398:	2b01      	cmp	r3, #1
 800239a:	d101      	bne.n	80023a0 <HAL_DMA_Start_IT+0x20>
 800239c:	2302      	movs	r3, #2
 800239e:	e04b      	b.n	8002438 <HAL_DMA_Start_IT+0xb8>
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	2201      	movs	r2, #1
 80023a4:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80023ae:	b2db      	uxtb	r3, r3
 80023b0:	2b01      	cmp	r3, #1
 80023b2:	d13a      	bne.n	800242a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	2202      	movs	r2, #2
 80023b8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	2200      	movs	r2, #0
 80023c0:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	681a      	ldr	r2, [r3, #0]
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f022 0201 	bic.w	r2, r2, #1
 80023d0:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	687a      	ldr	r2, [r7, #4]
 80023d6:	68b9      	ldr	r1, [r7, #8]
 80023d8:	68f8      	ldr	r0, [r7, #12]
 80023da:	f000 f9eb 	bl	80027b4 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d008      	beq.n	80023f8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	681a      	ldr	r2, [r3, #0]
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f042 020e 	orr.w	r2, r2, #14
 80023f4:	601a      	str	r2, [r3, #0]
 80023f6:	e00f      	b.n	8002418 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	681a      	ldr	r2, [r3, #0]
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f022 0204 	bic.w	r2, r2, #4
 8002406:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	681a      	ldr	r2, [r3, #0]
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f042 020a 	orr.w	r2, r2, #10
 8002416:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	681a      	ldr	r2, [r3, #0]
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f042 0201 	orr.w	r2, r2, #1
 8002426:	601a      	str	r2, [r3, #0]
 8002428:	e005      	b.n	8002436 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	2200      	movs	r2, #0
 800242e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002432:	2302      	movs	r3, #2
 8002434:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8002436:	7dfb      	ldrb	r3, [r7, #23]
}
 8002438:	4618      	mov	r0, r3
 800243a:	3718      	adds	r7, #24
 800243c:	46bd      	mov	sp, r7
 800243e:	bd80      	pop	{r7, pc}

08002440 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002440:	b480      	push	{r7}
 8002442:	b085      	sub	sp, #20
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002448:	2300      	movs	r3, #0
 800244a:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002452:	b2db      	uxtb	r3, r3
 8002454:	2b02      	cmp	r3, #2
 8002456:	d008      	beq.n	800246a <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2204      	movs	r2, #4
 800245c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2200      	movs	r2, #0
 8002462:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002466:	2301      	movs	r3, #1
 8002468:	e020      	b.n	80024ac <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	681a      	ldr	r2, [r3, #0]
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f022 020e 	bic.w	r2, r2, #14
 8002478:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	681a      	ldr	r2, [r3, #0]
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f022 0201 	bic.w	r2, r2, #1
 8002488:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002492:	2101      	movs	r1, #1
 8002494:	fa01 f202 	lsl.w	r2, r1, r2
 8002498:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2201      	movs	r2, #1
 800249e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	2200      	movs	r2, #0
 80024a6:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80024aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80024ac:	4618      	mov	r0, r3
 80024ae:	3714      	adds	r7, #20
 80024b0:	46bd      	mov	sp, r7
 80024b2:	bc80      	pop	{r7}
 80024b4:	4770      	bx	lr
	...

080024b8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b084      	sub	sp, #16
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80024c0:	2300      	movs	r3, #0
 80024c2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80024ca:	b2db      	uxtb	r3, r3
 80024cc:	2b02      	cmp	r3, #2
 80024ce:	d005      	beq.n	80024dc <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2204      	movs	r2, #4
 80024d4:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80024d6:	2301      	movs	r3, #1
 80024d8:	73fb      	strb	r3, [r7, #15]
 80024da:	e051      	b.n	8002580 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	681a      	ldr	r2, [r3, #0]
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f022 020e 	bic.w	r2, r2, #14
 80024ea:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	681a      	ldr	r2, [r3, #0]
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f022 0201 	bic.w	r2, r2, #1
 80024fa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	4a22      	ldr	r2, [pc, #136]	; (800258c <HAL_DMA_Abort_IT+0xd4>)
 8002502:	4293      	cmp	r3, r2
 8002504:	d029      	beq.n	800255a <HAL_DMA_Abort_IT+0xa2>
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4a21      	ldr	r2, [pc, #132]	; (8002590 <HAL_DMA_Abort_IT+0xd8>)
 800250c:	4293      	cmp	r3, r2
 800250e:	d022      	beq.n	8002556 <HAL_DMA_Abort_IT+0x9e>
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4a1f      	ldr	r2, [pc, #124]	; (8002594 <HAL_DMA_Abort_IT+0xdc>)
 8002516:	4293      	cmp	r3, r2
 8002518:	d01a      	beq.n	8002550 <HAL_DMA_Abort_IT+0x98>
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	4a1e      	ldr	r2, [pc, #120]	; (8002598 <HAL_DMA_Abort_IT+0xe0>)
 8002520:	4293      	cmp	r3, r2
 8002522:	d012      	beq.n	800254a <HAL_DMA_Abort_IT+0x92>
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4a1c      	ldr	r2, [pc, #112]	; (800259c <HAL_DMA_Abort_IT+0xe4>)
 800252a:	4293      	cmp	r3, r2
 800252c:	d00a      	beq.n	8002544 <HAL_DMA_Abort_IT+0x8c>
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4a1b      	ldr	r2, [pc, #108]	; (80025a0 <HAL_DMA_Abort_IT+0xe8>)
 8002534:	4293      	cmp	r3, r2
 8002536:	d102      	bne.n	800253e <HAL_DMA_Abort_IT+0x86>
 8002538:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800253c:	e00e      	b.n	800255c <HAL_DMA_Abort_IT+0xa4>
 800253e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002542:	e00b      	b.n	800255c <HAL_DMA_Abort_IT+0xa4>
 8002544:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002548:	e008      	b.n	800255c <HAL_DMA_Abort_IT+0xa4>
 800254a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800254e:	e005      	b.n	800255c <HAL_DMA_Abort_IT+0xa4>
 8002550:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002554:	e002      	b.n	800255c <HAL_DMA_Abort_IT+0xa4>
 8002556:	2310      	movs	r3, #16
 8002558:	e000      	b.n	800255c <HAL_DMA_Abort_IT+0xa4>
 800255a:	2301      	movs	r3, #1
 800255c:	4a11      	ldr	r2, [pc, #68]	; (80025a4 <HAL_DMA_Abort_IT+0xec>)
 800255e:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2201      	movs	r2, #1
 8002564:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2200      	movs	r2, #0
 800256c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002574:	2b00      	cmp	r3, #0
 8002576:	d003      	beq.n	8002580 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800257c:	6878      	ldr	r0, [r7, #4]
 800257e:	4798      	blx	r3
    } 
  }
  return status;
 8002580:	7bfb      	ldrb	r3, [r7, #15]
}
 8002582:	4618      	mov	r0, r3
 8002584:	3710      	adds	r7, #16
 8002586:	46bd      	mov	sp, r7
 8002588:	bd80      	pop	{r7, pc}
 800258a:	bf00      	nop
 800258c:	40020008 	.word	0x40020008
 8002590:	4002001c 	.word	0x4002001c
 8002594:	40020030 	.word	0x40020030
 8002598:	40020044 	.word	0x40020044
 800259c:	40020058 	.word	0x40020058
 80025a0:	4002006c 	.word	0x4002006c
 80025a4:	40020000 	.word	0x40020000

080025a8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b084      	sub	sp, #16
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025c4:	2204      	movs	r2, #4
 80025c6:	409a      	lsls	r2, r3
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	4013      	ands	r3, r2
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d04f      	beq.n	8002670 <HAL_DMA_IRQHandler+0xc8>
 80025d0:	68bb      	ldr	r3, [r7, #8]
 80025d2:	f003 0304 	and.w	r3, r3, #4
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d04a      	beq.n	8002670 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f003 0320 	and.w	r3, r3, #32
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d107      	bne.n	80025f8 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	681a      	ldr	r2, [r3, #0]
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f022 0204 	bic.w	r2, r2, #4
 80025f6:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	4a66      	ldr	r2, [pc, #408]	; (8002798 <HAL_DMA_IRQHandler+0x1f0>)
 80025fe:	4293      	cmp	r3, r2
 8002600:	d029      	beq.n	8002656 <HAL_DMA_IRQHandler+0xae>
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4a65      	ldr	r2, [pc, #404]	; (800279c <HAL_DMA_IRQHandler+0x1f4>)
 8002608:	4293      	cmp	r3, r2
 800260a:	d022      	beq.n	8002652 <HAL_DMA_IRQHandler+0xaa>
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4a63      	ldr	r2, [pc, #396]	; (80027a0 <HAL_DMA_IRQHandler+0x1f8>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d01a      	beq.n	800264c <HAL_DMA_IRQHandler+0xa4>
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4a62      	ldr	r2, [pc, #392]	; (80027a4 <HAL_DMA_IRQHandler+0x1fc>)
 800261c:	4293      	cmp	r3, r2
 800261e:	d012      	beq.n	8002646 <HAL_DMA_IRQHandler+0x9e>
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4a60      	ldr	r2, [pc, #384]	; (80027a8 <HAL_DMA_IRQHandler+0x200>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d00a      	beq.n	8002640 <HAL_DMA_IRQHandler+0x98>
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	4a5f      	ldr	r2, [pc, #380]	; (80027ac <HAL_DMA_IRQHandler+0x204>)
 8002630:	4293      	cmp	r3, r2
 8002632:	d102      	bne.n	800263a <HAL_DMA_IRQHandler+0x92>
 8002634:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002638:	e00e      	b.n	8002658 <HAL_DMA_IRQHandler+0xb0>
 800263a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800263e:	e00b      	b.n	8002658 <HAL_DMA_IRQHandler+0xb0>
 8002640:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002644:	e008      	b.n	8002658 <HAL_DMA_IRQHandler+0xb0>
 8002646:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800264a:	e005      	b.n	8002658 <HAL_DMA_IRQHandler+0xb0>
 800264c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002650:	e002      	b.n	8002658 <HAL_DMA_IRQHandler+0xb0>
 8002652:	2340      	movs	r3, #64	; 0x40
 8002654:	e000      	b.n	8002658 <HAL_DMA_IRQHandler+0xb0>
 8002656:	2304      	movs	r3, #4
 8002658:	4a55      	ldr	r2, [pc, #340]	; (80027b0 <HAL_DMA_IRQHandler+0x208>)
 800265a:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002660:	2b00      	cmp	r3, #0
 8002662:	f000 8094 	beq.w	800278e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800266a:	6878      	ldr	r0, [r7, #4]
 800266c:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800266e:	e08e      	b.n	800278e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002674:	2202      	movs	r2, #2
 8002676:	409a      	lsls	r2, r3
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	4013      	ands	r3, r2
 800267c:	2b00      	cmp	r3, #0
 800267e:	d056      	beq.n	800272e <HAL_DMA_IRQHandler+0x186>
 8002680:	68bb      	ldr	r3, [r7, #8]
 8002682:	f003 0302 	and.w	r3, r3, #2
 8002686:	2b00      	cmp	r3, #0
 8002688:	d051      	beq.n	800272e <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f003 0320 	and.w	r3, r3, #32
 8002694:	2b00      	cmp	r3, #0
 8002696:	d10b      	bne.n	80026b0 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	681a      	ldr	r2, [r3, #0]
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f022 020a 	bic.w	r2, r2, #10
 80026a6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2201      	movs	r2, #1
 80026ac:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4a38      	ldr	r2, [pc, #224]	; (8002798 <HAL_DMA_IRQHandler+0x1f0>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d029      	beq.n	800270e <HAL_DMA_IRQHandler+0x166>
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	4a37      	ldr	r2, [pc, #220]	; (800279c <HAL_DMA_IRQHandler+0x1f4>)
 80026c0:	4293      	cmp	r3, r2
 80026c2:	d022      	beq.n	800270a <HAL_DMA_IRQHandler+0x162>
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4a35      	ldr	r2, [pc, #212]	; (80027a0 <HAL_DMA_IRQHandler+0x1f8>)
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d01a      	beq.n	8002704 <HAL_DMA_IRQHandler+0x15c>
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	4a34      	ldr	r2, [pc, #208]	; (80027a4 <HAL_DMA_IRQHandler+0x1fc>)
 80026d4:	4293      	cmp	r3, r2
 80026d6:	d012      	beq.n	80026fe <HAL_DMA_IRQHandler+0x156>
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4a32      	ldr	r2, [pc, #200]	; (80027a8 <HAL_DMA_IRQHandler+0x200>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d00a      	beq.n	80026f8 <HAL_DMA_IRQHandler+0x150>
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	4a31      	ldr	r2, [pc, #196]	; (80027ac <HAL_DMA_IRQHandler+0x204>)
 80026e8:	4293      	cmp	r3, r2
 80026ea:	d102      	bne.n	80026f2 <HAL_DMA_IRQHandler+0x14a>
 80026ec:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80026f0:	e00e      	b.n	8002710 <HAL_DMA_IRQHandler+0x168>
 80026f2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80026f6:	e00b      	b.n	8002710 <HAL_DMA_IRQHandler+0x168>
 80026f8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80026fc:	e008      	b.n	8002710 <HAL_DMA_IRQHandler+0x168>
 80026fe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002702:	e005      	b.n	8002710 <HAL_DMA_IRQHandler+0x168>
 8002704:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002708:	e002      	b.n	8002710 <HAL_DMA_IRQHandler+0x168>
 800270a:	2320      	movs	r3, #32
 800270c:	e000      	b.n	8002710 <HAL_DMA_IRQHandler+0x168>
 800270e:	2302      	movs	r3, #2
 8002710:	4a27      	ldr	r2, [pc, #156]	; (80027b0 <HAL_DMA_IRQHandler+0x208>)
 8002712:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2200      	movs	r2, #0
 8002718:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002720:	2b00      	cmp	r3, #0
 8002722:	d034      	beq.n	800278e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002728:	6878      	ldr	r0, [r7, #4]
 800272a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800272c:	e02f      	b.n	800278e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002732:	2208      	movs	r2, #8
 8002734:	409a      	lsls	r2, r3
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	4013      	ands	r3, r2
 800273a:	2b00      	cmp	r3, #0
 800273c:	d028      	beq.n	8002790 <HAL_DMA_IRQHandler+0x1e8>
 800273e:	68bb      	ldr	r3, [r7, #8]
 8002740:	f003 0308 	and.w	r3, r3, #8
 8002744:	2b00      	cmp	r3, #0
 8002746:	d023      	beq.n	8002790 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	681a      	ldr	r2, [r3, #0]
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f022 020e 	bic.w	r2, r2, #14
 8002756:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002760:	2101      	movs	r1, #1
 8002762:	fa01 f202 	lsl.w	r2, r1, r2
 8002766:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2201      	movs	r2, #1
 800276c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2201      	movs	r2, #1
 8002772:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	2200      	movs	r2, #0
 800277a:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002782:	2b00      	cmp	r3, #0
 8002784:	d004      	beq.n	8002790 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800278a:	6878      	ldr	r0, [r7, #4]
 800278c:	4798      	blx	r3
    }
  }
  return;
 800278e:	bf00      	nop
 8002790:	bf00      	nop
}
 8002792:	3710      	adds	r7, #16
 8002794:	46bd      	mov	sp, r7
 8002796:	bd80      	pop	{r7, pc}
 8002798:	40020008 	.word	0x40020008
 800279c:	4002001c 	.word	0x4002001c
 80027a0:	40020030 	.word	0x40020030
 80027a4:	40020044 	.word	0x40020044
 80027a8:	40020058 	.word	0x40020058
 80027ac:	4002006c 	.word	0x4002006c
 80027b0:	40020000 	.word	0x40020000

080027b4 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80027b4:	b480      	push	{r7}
 80027b6:	b085      	sub	sp, #20
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	60f8      	str	r0, [r7, #12]
 80027bc:	60b9      	str	r1, [r7, #8]
 80027be:	607a      	str	r2, [r7, #4]
 80027c0:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027ca:	2101      	movs	r1, #1
 80027cc:	fa01 f202 	lsl.w	r2, r1, r2
 80027d0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	683a      	ldr	r2, [r7, #0]
 80027d8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	2b10      	cmp	r3, #16
 80027e0:	d108      	bne.n	80027f4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	687a      	ldr	r2, [r7, #4]
 80027e8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	68ba      	ldr	r2, [r7, #8]
 80027f0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80027f2:	e007      	b.n	8002804 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	68ba      	ldr	r2, [r7, #8]
 80027fa:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	687a      	ldr	r2, [r7, #4]
 8002802:	60da      	str	r2, [r3, #12]
}
 8002804:	bf00      	nop
 8002806:	3714      	adds	r7, #20
 8002808:	46bd      	mov	sp, r7
 800280a:	bc80      	pop	{r7}
 800280c:	4770      	bx	lr
	...

08002810 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002810:	b480      	push	{r7}
 8002812:	b08b      	sub	sp, #44	; 0x2c
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
 8002818:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800281a:	2300      	movs	r3, #0
 800281c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800281e:	2300      	movs	r3, #0
 8002820:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002822:	e169      	b.n	8002af8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002824:	2201      	movs	r2, #1
 8002826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002828:	fa02 f303 	lsl.w	r3, r2, r3
 800282c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	69fa      	ldr	r2, [r7, #28]
 8002834:	4013      	ands	r3, r2
 8002836:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002838:	69ba      	ldr	r2, [r7, #24]
 800283a:	69fb      	ldr	r3, [r7, #28]
 800283c:	429a      	cmp	r2, r3
 800283e:	f040 8158 	bne.w	8002af2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	4a9a      	ldr	r2, [pc, #616]	; (8002ab0 <HAL_GPIO_Init+0x2a0>)
 8002848:	4293      	cmp	r3, r2
 800284a:	d05e      	beq.n	800290a <HAL_GPIO_Init+0xfa>
 800284c:	4a98      	ldr	r2, [pc, #608]	; (8002ab0 <HAL_GPIO_Init+0x2a0>)
 800284e:	4293      	cmp	r3, r2
 8002850:	d875      	bhi.n	800293e <HAL_GPIO_Init+0x12e>
 8002852:	4a98      	ldr	r2, [pc, #608]	; (8002ab4 <HAL_GPIO_Init+0x2a4>)
 8002854:	4293      	cmp	r3, r2
 8002856:	d058      	beq.n	800290a <HAL_GPIO_Init+0xfa>
 8002858:	4a96      	ldr	r2, [pc, #600]	; (8002ab4 <HAL_GPIO_Init+0x2a4>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d86f      	bhi.n	800293e <HAL_GPIO_Init+0x12e>
 800285e:	4a96      	ldr	r2, [pc, #600]	; (8002ab8 <HAL_GPIO_Init+0x2a8>)
 8002860:	4293      	cmp	r3, r2
 8002862:	d052      	beq.n	800290a <HAL_GPIO_Init+0xfa>
 8002864:	4a94      	ldr	r2, [pc, #592]	; (8002ab8 <HAL_GPIO_Init+0x2a8>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d869      	bhi.n	800293e <HAL_GPIO_Init+0x12e>
 800286a:	4a94      	ldr	r2, [pc, #592]	; (8002abc <HAL_GPIO_Init+0x2ac>)
 800286c:	4293      	cmp	r3, r2
 800286e:	d04c      	beq.n	800290a <HAL_GPIO_Init+0xfa>
 8002870:	4a92      	ldr	r2, [pc, #584]	; (8002abc <HAL_GPIO_Init+0x2ac>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d863      	bhi.n	800293e <HAL_GPIO_Init+0x12e>
 8002876:	4a92      	ldr	r2, [pc, #584]	; (8002ac0 <HAL_GPIO_Init+0x2b0>)
 8002878:	4293      	cmp	r3, r2
 800287a:	d046      	beq.n	800290a <HAL_GPIO_Init+0xfa>
 800287c:	4a90      	ldr	r2, [pc, #576]	; (8002ac0 <HAL_GPIO_Init+0x2b0>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d85d      	bhi.n	800293e <HAL_GPIO_Init+0x12e>
 8002882:	2b12      	cmp	r3, #18
 8002884:	d82a      	bhi.n	80028dc <HAL_GPIO_Init+0xcc>
 8002886:	2b12      	cmp	r3, #18
 8002888:	d859      	bhi.n	800293e <HAL_GPIO_Init+0x12e>
 800288a:	a201      	add	r2, pc, #4	; (adr r2, 8002890 <HAL_GPIO_Init+0x80>)
 800288c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002890:	0800290b 	.word	0x0800290b
 8002894:	080028e5 	.word	0x080028e5
 8002898:	080028f7 	.word	0x080028f7
 800289c:	08002939 	.word	0x08002939
 80028a0:	0800293f 	.word	0x0800293f
 80028a4:	0800293f 	.word	0x0800293f
 80028a8:	0800293f 	.word	0x0800293f
 80028ac:	0800293f 	.word	0x0800293f
 80028b0:	0800293f 	.word	0x0800293f
 80028b4:	0800293f 	.word	0x0800293f
 80028b8:	0800293f 	.word	0x0800293f
 80028bc:	0800293f 	.word	0x0800293f
 80028c0:	0800293f 	.word	0x0800293f
 80028c4:	0800293f 	.word	0x0800293f
 80028c8:	0800293f 	.word	0x0800293f
 80028cc:	0800293f 	.word	0x0800293f
 80028d0:	0800293f 	.word	0x0800293f
 80028d4:	080028ed 	.word	0x080028ed
 80028d8:	08002901 	.word	0x08002901
 80028dc:	4a79      	ldr	r2, [pc, #484]	; (8002ac4 <HAL_GPIO_Init+0x2b4>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	d013      	beq.n	800290a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80028e2:	e02c      	b.n	800293e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	68db      	ldr	r3, [r3, #12]
 80028e8:	623b      	str	r3, [r7, #32]
          break;
 80028ea:	e029      	b.n	8002940 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	68db      	ldr	r3, [r3, #12]
 80028f0:	3304      	adds	r3, #4
 80028f2:	623b      	str	r3, [r7, #32]
          break;
 80028f4:	e024      	b.n	8002940 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	68db      	ldr	r3, [r3, #12]
 80028fa:	3308      	adds	r3, #8
 80028fc:	623b      	str	r3, [r7, #32]
          break;
 80028fe:	e01f      	b.n	8002940 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	68db      	ldr	r3, [r3, #12]
 8002904:	330c      	adds	r3, #12
 8002906:	623b      	str	r3, [r7, #32]
          break;
 8002908:	e01a      	b.n	8002940 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	689b      	ldr	r3, [r3, #8]
 800290e:	2b00      	cmp	r3, #0
 8002910:	d102      	bne.n	8002918 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002912:	2304      	movs	r3, #4
 8002914:	623b      	str	r3, [r7, #32]
          break;
 8002916:	e013      	b.n	8002940 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	689b      	ldr	r3, [r3, #8]
 800291c:	2b01      	cmp	r3, #1
 800291e:	d105      	bne.n	800292c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002920:	2308      	movs	r3, #8
 8002922:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	69fa      	ldr	r2, [r7, #28]
 8002928:	611a      	str	r2, [r3, #16]
          break;
 800292a:	e009      	b.n	8002940 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800292c:	2308      	movs	r3, #8
 800292e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	69fa      	ldr	r2, [r7, #28]
 8002934:	615a      	str	r2, [r3, #20]
          break;
 8002936:	e003      	b.n	8002940 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002938:	2300      	movs	r3, #0
 800293a:	623b      	str	r3, [r7, #32]
          break;
 800293c:	e000      	b.n	8002940 <HAL_GPIO_Init+0x130>
          break;
 800293e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002940:	69bb      	ldr	r3, [r7, #24]
 8002942:	2bff      	cmp	r3, #255	; 0xff
 8002944:	d801      	bhi.n	800294a <HAL_GPIO_Init+0x13a>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	e001      	b.n	800294e <HAL_GPIO_Init+0x13e>
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	3304      	adds	r3, #4
 800294e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002950:	69bb      	ldr	r3, [r7, #24]
 8002952:	2bff      	cmp	r3, #255	; 0xff
 8002954:	d802      	bhi.n	800295c <HAL_GPIO_Init+0x14c>
 8002956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002958:	009b      	lsls	r3, r3, #2
 800295a:	e002      	b.n	8002962 <HAL_GPIO_Init+0x152>
 800295c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800295e:	3b08      	subs	r3, #8
 8002960:	009b      	lsls	r3, r3, #2
 8002962:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002964:	697b      	ldr	r3, [r7, #20]
 8002966:	681a      	ldr	r2, [r3, #0]
 8002968:	210f      	movs	r1, #15
 800296a:	693b      	ldr	r3, [r7, #16]
 800296c:	fa01 f303 	lsl.w	r3, r1, r3
 8002970:	43db      	mvns	r3, r3
 8002972:	401a      	ands	r2, r3
 8002974:	6a39      	ldr	r1, [r7, #32]
 8002976:	693b      	ldr	r3, [r7, #16]
 8002978:	fa01 f303 	lsl.w	r3, r1, r3
 800297c:	431a      	orrs	r2, r3
 800297e:	697b      	ldr	r3, [r7, #20]
 8002980:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800298a:	2b00      	cmp	r3, #0
 800298c:	f000 80b1 	beq.w	8002af2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002990:	4b4d      	ldr	r3, [pc, #308]	; (8002ac8 <HAL_GPIO_Init+0x2b8>)
 8002992:	699b      	ldr	r3, [r3, #24]
 8002994:	4a4c      	ldr	r2, [pc, #304]	; (8002ac8 <HAL_GPIO_Init+0x2b8>)
 8002996:	f043 0301 	orr.w	r3, r3, #1
 800299a:	6193      	str	r3, [r2, #24]
 800299c:	4b4a      	ldr	r3, [pc, #296]	; (8002ac8 <HAL_GPIO_Init+0x2b8>)
 800299e:	699b      	ldr	r3, [r3, #24]
 80029a0:	f003 0301 	and.w	r3, r3, #1
 80029a4:	60bb      	str	r3, [r7, #8]
 80029a6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80029a8:	4a48      	ldr	r2, [pc, #288]	; (8002acc <HAL_GPIO_Init+0x2bc>)
 80029aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ac:	089b      	lsrs	r3, r3, #2
 80029ae:	3302      	adds	r3, #2
 80029b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029b4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80029b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029b8:	f003 0303 	and.w	r3, r3, #3
 80029bc:	009b      	lsls	r3, r3, #2
 80029be:	220f      	movs	r2, #15
 80029c0:	fa02 f303 	lsl.w	r3, r2, r3
 80029c4:	43db      	mvns	r3, r3
 80029c6:	68fa      	ldr	r2, [r7, #12]
 80029c8:	4013      	ands	r3, r2
 80029ca:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	4a40      	ldr	r2, [pc, #256]	; (8002ad0 <HAL_GPIO_Init+0x2c0>)
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d013      	beq.n	80029fc <HAL_GPIO_Init+0x1ec>
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	4a3f      	ldr	r2, [pc, #252]	; (8002ad4 <HAL_GPIO_Init+0x2c4>)
 80029d8:	4293      	cmp	r3, r2
 80029da:	d00d      	beq.n	80029f8 <HAL_GPIO_Init+0x1e8>
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	4a3e      	ldr	r2, [pc, #248]	; (8002ad8 <HAL_GPIO_Init+0x2c8>)
 80029e0:	4293      	cmp	r3, r2
 80029e2:	d007      	beq.n	80029f4 <HAL_GPIO_Init+0x1e4>
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	4a3d      	ldr	r2, [pc, #244]	; (8002adc <HAL_GPIO_Init+0x2cc>)
 80029e8:	4293      	cmp	r3, r2
 80029ea:	d101      	bne.n	80029f0 <HAL_GPIO_Init+0x1e0>
 80029ec:	2303      	movs	r3, #3
 80029ee:	e006      	b.n	80029fe <HAL_GPIO_Init+0x1ee>
 80029f0:	2304      	movs	r3, #4
 80029f2:	e004      	b.n	80029fe <HAL_GPIO_Init+0x1ee>
 80029f4:	2302      	movs	r3, #2
 80029f6:	e002      	b.n	80029fe <HAL_GPIO_Init+0x1ee>
 80029f8:	2301      	movs	r3, #1
 80029fa:	e000      	b.n	80029fe <HAL_GPIO_Init+0x1ee>
 80029fc:	2300      	movs	r3, #0
 80029fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a00:	f002 0203 	and.w	r2, r2, #3
 8002a04:	0092      	lsls	r2, r2, #2
 8002a06:	4093      	lsls	r3, r2
 8002a08:	68fa      	ldr	r2, [r7, #12]
 8002a0a:	4313      	orrs	r3, r2
 8002a0c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002a0e:	492f      	ldr	r1, [pc, #188]	; (8002acc <HAL_GPIO_Init+0x2bc>)
 8002a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a12:	089b      	lsrs	r3, r3, #2
 8002a14:	3302      	adds	r3, #2
 8002a16:	68fa      	ldr	r2, [r7, #12]
 8002a18:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d006      	beq.n	8002a36 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002a28:	4b2d      	ldr	r3, [pc, #180]	; (8002ae0 <HAL_GPIO_Init+0x2d0>)
 8002a2a:	689a      	ldr	r2, [r3, #8]
 8002a2c:	492c      	ldr	r1, [pc, #176]	; (8002ae0 <HAL_GPIO_Init+0x2d0>)
 8002a2e:	69bb      	ldr	r3, [r7, #24]
 8002a30:	4313      	orrs	r3, r2
 8002a32:	608b      	str	r3, [r1, #8]
 8002a34:	e006      	b.n	8002a44 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002a36:	4b2a      	ldr	r3, [pc, #168]	; (8002ae0 <HAL_GPIO_Init+0x2d0>)
 8002a38:	689a      	ldr	r2, [r3, #8]
 8002a3a:	69bb      	ldr	r3, [r7, #24]
 8002a3c:	43db      	mvns	r3, r3
 8002a3e:	4928      	ldr	r1, [pc, #160]	; (8002ae0 <HAL_GPIO_Init+0x2d0>)
 8002a40:	4013      	ands	r3, r2
 8002a42:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	685b      	ldr	r3, [r3, #4]
 8002a48:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d006      	beq.n	8002a5e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002a50:	4b23      	ldr	r3, [pc, #140]	; (8002ae0 <HAL_GPIO_Init+0x2d0>)
 8002a52:	68da      	ldr	r2, [r3, #12]
 8002a54:	4922      	ldr	r1, [pc, #136]	; (8002ae0 <HAL_GPIO_Init+0x2d0>)
 8002a56:	69bb      	ldr	r3, [r7, #24]
 8002a58:	4313      	orrs	r3, r2
 8002a5a:	60cb      	str	r3, [r1, #12]
 8002a5c:	e006      	b.n	8002a6c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002a5e:	4b20      	ldr	r3, [pc, #128]	; (8002ae0 <HAL_GPIO_Init+0x2d0>)
 8002a60:	68da      	ldr	r2, [r3, #12]
 8002a62:	69bb      	ldr	r3, [r7, #24]
 8002a64:	43db      	mvns	r3, r3
 8002a66:	491e      	ldr	r1, [pc, #120]	; (8002ae0 <HAL_GPIO_Init+0x2d0>)
 8002a68:	4013      	ands	r3, r2
 8002a6a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d006      	beq.n	8002a86 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002a78:	4b19      	ldr	r3, [pc, #100]	; (8002ae0 <HAL_GPIO_Init+0x2d0>)
 8002a7a:	685a      	ldr	r2, [r3, #4]
 8002a7c:	4918      	ldr	r1, [pc, #96]	; (8002ae0 <HAL_GPIO_Init+0x2d0>)
 8002a7e:	69bb      	ldr	r3, [r7, #24]
 8002a80:	4313      	orrs	r3, r2
 8002a82:	604b      	str	r3, [r1, #4]
 8002a84:	e006      	b.n	8002a94 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002a86:	4b16      	ldr	r3, [pc, #88]	; (8002ae0 <HAL_GPIO_Init+0x2d0>)
 8002a88:	685a      	ldr	r2, [r3, #4]
 8002a8a:	69bb      	ldr	r3, [r7, #24]
 8002a8c:	43db      	mvns	r3, r3
 8002a8e:	4914      	ldr	r1, [pc, #80]	; (8002ae0 <HAL_GPIO_Init+0x2d0>)
 8002a90:	4013      	ands	r3, r2
 8002a92:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d021      	beq.n	8002ae4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002aa0:	4b0f      	ldr	r3, [pc, #60]	; (8002ae0 <HAL_GPIO_Init+0x2d0>)
 8002aa2:	681a      	ldr	r2, [r3, #0]
 8002aa4:	490e      	ldr	r1, [pc, #56]	; (8002ae0 <HAL_GPIO_Init+0x2d0>)
 8002aa6:	69bb      	ldr	r3, [r7, #24]
 8002aa8:	4313      	orrs	r3, r2
 8002aaa:	600b      	str	r3, [r1, #0]
 8002aac:	e021      	b.n	8002af2 <HAL_GPIO_Init+0x2e2>
 8002aae:	bf00      	nop
 8002ab0:	10320000 	.word	0x10320000
 8002ab4:	10310000 	.word	0x10310000
 8002ab8:	10220000 	.word	0x10220000
 8002abc:	10210000 	.word	0x10210000
 8002ac0:	10120000 	.word	0x10120000
 8002ac4:	10110000 	.word	0x10110000
 8002ac8:	40021000 	.word	0x40021000
 8002acc:	40010000 	.word	0x40010000
 8002ad0:	40010800 	.word	0x40010800
 8002ad4:	40010c00 	.word	0x40010c00
 8002ad8:	40011000 	.word	0x40011000
 8002adc:	40011400 	.word	0x40011400
 8002ae0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002ae4:	4b0b      	ldr	r3, [pc, #44]	; (8002b14 <HAL_GPIO_Init+0x304>)
 8002ae6:	681a      	ldr	r2, [r3, #0]
 8002ae8:	69bb      	ldr	r3, [r7, #24]
 8002aea:	43db      	mvns	r3, r3
 8002aec:	4909      	ldr	r1, [pc, #36]	; (8002b14 <HAL_GPIO_Init+0x304>)
 8002aee:	4013      	ands	r3, r2
 8002af0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002af4:	3301      	adds	r3, #1
 8002af6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	681a      	ldr	r2, [r3, #0]
 8002afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002afe:	fa22 f303 	lsr.w	r3, r2, r3
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	f47f ae8e 	bne.w	8002824 <HAL_GPIO_Init+0x14>
  }
}
 8002b08:	bf00      	nop
 8002b0a:	bf00      	nop
 8002b0c:	372c      	adds	r7, #44	; 0x2c
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bc80      	pop	{r7}
 8002b12:	4770      	bx	lr
 8002b14:	40010400 	.word	0x40010400

08002b18 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	b083      	sub	sp, #12
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
 8002b20:	460b      	mov	r3, r1
 8002b22:	807b      	strh	r3, [r7, #2]
 8002b24:	4613      	mov	r3, r2
 8002b26:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002b28:	787b      	ldrb	r3, [r7, #1]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d003      	beq.n	8002b36 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b2e:	887a      	ldrh	r2, [r7, #2]
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002b34:	e003      	b.n	8002b3e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002b36:	887b      	ldrh	r3, [r7, #2]
 8002b38:	041a      	lsls	r2, r3, #16
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	611a      	str	r2, [r3, #16]
}
 8002b3e:	bf00      	nop
 8002b40:	370c      	adds	r7, #12
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bc80      	pop	{r7}
 8002b46:	4770      	bx	lr

08002b48 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	b085      	sub	sp, #20
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
 8002b50:	460b      	mov	r3, r1
 8002b52:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	68db      	ldr	r3, [r3, #12]
 8002b58:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002b5a:	887a      	ldrh	r2, [r7, #2]
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	4013      	ands	r3, r2
 8002b60:	041a      	lsls	r2, r3, #16
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	43d9      	mvns	r1, r3
 8002b66:	887b      	ldrh	r3, [r7, #2]
 8002b68:	400b      	ands	r3, r1
 8002b6a:	431a      	orrs	r2, r3
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	611a      	str	r2, [r3, #16]
}
 8002b70:	bf00      	nop
 8002b72:	3714      	adds	r7, #20
 8002b74:	46bd      	mov	sp, r7
 8002b76:	bc80      	pop	{r7}
 8002b78:	4770      	bx	lr
	...

08002b7c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b084      	sub	sp, #16
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d101      	bne.n	8002b8e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	e12b      	b.n	8002de6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b94:	b2db      	uxtb	r3, r3
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d106      	bne.n	8002ba8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002ba2:	6878      	ldr	r0, [r7, #4]
 8002ba4:	f7fe ffb4 	bl	8001b10 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2224      	movs	r2, #36	; 0x24
 8002bac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	681a      	ldr	r2, [r3, #0]
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f022 0201 	bic.w	r2, r2, #1
 8002bbe:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	681a      	ldr	r2, [r3, #0]
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002bce:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	681a      	ldr	r2, [r3, #0]
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002bde:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002be0:	f001 f832 	bl	8003c48 <HAL_RCC_GetPCLK1Freq>
 8002be4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	4a81      	ldr	r2, [pc, #516]	; (8002df0 <HAL_I2C_Init+0x274>)
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d807      	bhi.n	8002c00 <HAL_I2C_Init+0x84>
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	4a80      	ldr	r2, [pc, #512]	; (8002df4 <HAL_I2C_Init+0x278>)
 8002bf4:	4293      	cmp	r3, r2
 8002bf6:	bf94      	ite	ls
 8002bf8:	2301      	movls	r3, #1
 8002bfa:	2300      	movhi	r3, #0
 8002bfc:	b2db      	uxtb	r3, r3
 8002bfe:	e006      	b.n	8002c0e <HAL_I2C_Init+0x92>
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	4a7d      	ldr	r2, [pc, #500]	; (8002df8 <HAL_I2C_Init+0x27c>)
 8002c04:	4293      	cmp	r3, r2
 8002c06:	bf94      	ite	ls
 8002c08:	2301      	movls	r3, #1
 8002c0a:	2300      	movhi	r3, #0
 8002c0c:	b2db      	uxtb	r3, r3
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d001      	beq.n	8002c16 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002c12:	2301      	movs	r3, #1
 8002c14:	e0e7      	b.n	8002de6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	4a78      	ldr	r2, [pc, #480]	; (8002dfc <HAL_I2C_Init+0x280>)
 8002c1a:	fba2 2303 	umull	r2, r3, r2, r3
 8002c1e:	0c9b      	lsrs	r3, r3, #18
 8002c20:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	68ba      	ldr	r2, [r7, #8]
 8002c32:	430a      	orrs	r2, r1
 8002c34:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	6a1b      	ldr	r3, [r3, #32]
 8002c3c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	4a6a      	ldr	r2, [pc, #424]	; (8002df0 <HAL_I2C_Init+0x274>)
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d802      	bhi.n	8002c50 <HAL_I2C_Init+0xd4>
 8002c4a:	68bb      	ldr	r3, [r7, #8]
 8002c4c:	3301      	adds	r3, #1
 8002c4e:	e009      	b.n	8002c64 <HAL_I2C_Init+0xe8>
 8002c50:	68bb      	ldr	r3, [r7, #8]
 8002c52:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002c56:	fb02 f303 	mul.w	r3, r2, r3
 8002c5a:	4a69      	ldr	r2, [pc, #420]	; (8002e00 <HAL_I2C_Init+0x284>)
 8002c5c:	fba2 2303 	umull	r2, r3, r2, r3
 8002c60:	099b      	lsrs	r3, r3, #6
 8002c62:	3301      	adds	r3, #1
 8002c64:	687a      	ldr	r2, [r7, #4]
 8002c66:	6812      	ldr	r2, [r2, #0]
 8002c68:	430b      	orrs	r3, r1
 8002c6a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	69db      	ldr	r3, [r3, #28]
 8002c72:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002c76:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	495c      	ldr	r1, [pc, #368]	; (8002df0 <HAL_I2C_Init+0x274>)
 8002c80:	428b      	cmp	r3, r1
 8002c82:	d819      	bhi.n	8002cb8 <HAL_I2C_Init+0x13c>
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	1e59      	subs	r1, r3, #1
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	685b      	ldr	r3, [r3, #4]
 8002c8c:	005b      	lsls	r3, r3, #1
 8002c8e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002c92:	1c59      	adds	r1, r3, #1
 8002c94:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002c98:	400b      	ands	r3, r1
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d00a      	beq.n	8002cb4 <HAL_I2C_Init+0x138>
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	1e59      	subs	r1, r3, #1
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	005b      	lsls	r3, r3, #1
 8002ca8:	fbb1 f3f3 	udiv	r3, r1, r3
 8002cac:	3301      	adds	r3, #1
 8002cae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002cb2:	e051      	b.n	8002d58 <HAL_I2C_Init+0x1dc>
 8002cb4:	2304      	movs	r3, #4
 8002cb6:	e04f      	b.n	8002d58 <HAL_I2C_Init+0x1dc>
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	689b      	ldr	r3, [r3, #8]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d111      	bne.n	8002ce4 <HAL_I2C_Init+0x168>
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	1e58      	subs	r0, r3, #1
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6859      	ldr	r1, [r3, #4]
 8002cc8:	460b      	mov	r3, r1
 8002cca:	005b      	lsls	r3, r3, #1
 8002ccc:	440b      	add	r3, r1
 8002cce:	fbb0 f3f3 	udiv	r3, r0, r3
 8002cd2:	3301      	adds	r3, #1
 8002cd4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	bf0c      	ite	eq
 8002cdc:	2301      	moveq	r3, #1
 8002cde:	2300      	movne	r3, #0
 8002ce0:	b2db      	uxtb	r3, r3
 8002ce2:	e012      	b.n	8002d0a <HAL_I2C_Init+0x18e>
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	1e58      	subs	r0, r3, #1
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6859      	ldr	r1, [r3, #4]
 8002cec:	460b      	mov	r3, r1
 8002cee:	009b      	lsls	r3, r3, #2
 8002cf0:	440b      	add	r3, r1
 8002cf2:	0099      	lsls	r1, r3, #2
 8002cf4:	440b      	add	r3, r1
 8002cf6:	fbb0 f3f3 	udiv	r3, r0, r3
 8002cfa:	3301      	adds	r3, #1
 8002cfc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	bf0c      	ite	eq
 8002d04:	2301      	moveq	r3, #1
 8002d06:	2300      	movne	r3, #0
 8002d08:	b2db      	uxtb	r3, r3
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d001      	beq.n	8002d12 <HAL_I2C_Init+0x196>
 8002d0e:	2301      	movs	r3, #1
 8002d10:	e022      	b.n	8002d58 <HAL_I2C_Init+0x1dc>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	689b      	ldr	r3, [r3, #8]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d10e      	bne.n	8002d38 <HAL_I2C_Init+0x1bc>
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	1e58      	subs	r0, r3, #1
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6859      	ldr	r1, [r3, #4]
 8002d22:	460b      	mov	r3, r1
 8002d24:	005b      	lsls	r3, r3, #1
 8002d26:	440b      	add	r3, r1
 8002d28:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d2c:	3301      	adds	r3, #1
 8002d2e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d36:	e00f      	b.n	8002d58 <HAL_I2C_Init+0x1dc>
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	1e58      	subs	r0, r3, #1
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6859      	ldr	r1, [r3, #4]
 8002d40:	460b      	mov	r3, r1
 8002d42:	009b      	lsls	r3, r3, #2
 8002d44:	440b      	add	r3, r1
 8002d46:	0099      	lsls	r1, r3, #2
 8002d48:	440b      	add	r3, r1
 8002d4a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d4e:	3301      	adds	r3, #1
 8002d50:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d54:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002d58:	6879      	ldr	r1, [r7, #4]
 8002d5a:	6809      	ldr	r1, [r1, #0]
 8002d5c:	4313      	orrs	r3, r2
 8002d5e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	69da      	ldr	r2, [r3, #28]
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6a1b      	ldr	r3, [r3, #32]
 8002d72:	431a      	orrs	r2, r3
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	430a      	orrs	r2, r1
 8002d7a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	689b      	ldr	r3, [r3, #8]
 8002d82:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002d86:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002d8a:	687a      	ldr	r2, [r7, #4]
 8002d8c:	6911      	ldr	r1, [r2, #16]
 8002d8e:	687a      	ldr	r2, [r7, #4]
 8002d90:	68d2      	ldr	r2, [r2, #12]
 8002d92:	4311      	orrs	r1, r2
 8002d94:	687a      	ldr	r2, [r7, #4]
 8002d96:	6812      	ldr	r2, [r2, #0]
 8002d98:	430b      	orrs	r3, r1
 8002d9a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	68db      	ldr	r3, [r3, #12]
 8002da2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	695a      	ldr	r2, [r3, #20]
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	699b      	ldr	r3, [r3, #24]
 8002dae:	431a      	orrs	r2, r3
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	430a      	orrs	r2, r1
 8002db6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	681a      	ldr	r2, [r3, #0]
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f042 0201 	orr.w	r2, r2, #1
 8002dc6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2200      	movs	r2, #0
 8002dcc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2220      	movs	r2, #32
 8002dd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2200      	movs	r2, #0
 8002dda:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2200      	movs	r2, #0
 8002de0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002de4:	2300      	movs	r3, #0
}
 8002de6:	4618      	mov	r0, r3
 8002de8:	3710      	adds	r7, #16
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bd80      	pop	{r7, pc}
 8002dee:	bf00      	nop
 8002df0:	000186a0 	.word	0x000186a0
 8002df4:	001e847f 	.word	0x001e847f
 8002df8:	003d08ff 	.word	0x003d08ff
 8002dfc:	431bde83 	.word	0x431bde83
 8002e00:	10624dd3 	.word	0x10624dd3

08002e04 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b088      	sub	sp, #32
 8002e08:	af02      	add	r7, sp, #8
 8002e0a:	60f8      	str	r0, [r7, #12]
 8002e0c:	607a      	str	r2, [r7, #4]
 8002e0e:	461a      	mov	r2, r3
 8002e10:	460b      	mov	r3, r1
 8002e12:	817b      	strh	r3, [r7, #10]
 8002e14:	4613      	mov	r3, r2
 8002e16:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002e18:	f7ff f91c 	bl	8002054 <HAL_GetTick>
 8002e1c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e24:	b2db      	uxtb	r3, r3
 8002e26:	2b20      	cmp	r3, #32
 8002e28:	f040 80e0 	bne.w	8002fec <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002e2c:	697b      	ldr	r3, [r7, #20]
 8002e2e:	9300      	str	r3, [sp, #0]
 8002e30:	2319      	movs	r3, #25
 8002e32:	2201      	movs	r2, #1
 8002e34:	4970      	ldr	r1, [pc, #448]	; (8002ff8 <HAL_I2C_Master_Transmit+0x1f4>)
 8002e36:	68f8      	ldr	r0, [r7, #12]
 8002e38:	f000 f964 	bl	8003104 <I2C_WaitOnFlagUntilTimeout>
 8002e3c:	4603      	mov	r3, r0
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d001      	beq.n	8002e46 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002e42:	2302      	movs	r3, #2
 8002e44:	e0d3      	b.n	8002fee <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e4c:	2b01      	cmp	r3, #1
 8002e4e:	d101      	bne.n	8002e54 <HAL_I2C_Master_Transmit+0x50>
 8002e50:	2302      	movs	r3, #2
 8002e52:	e0cc      	b.n	8002fee <HAL_I2C_Master_Transmit+0x1ea>
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	2201      	movs	r2, #1
 8002e58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f003 0301 	and.w	r3, r3, #1
 8002e66:	2b01      	cmp	r3, #1
 8002e68:	d007      	beq.n	8002e7a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	681a      	ldr	r2, [r3, #0]
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f042 0201 	orr.w	r2, r2, #1
 8002e78:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	681a      	ldr	r2, [r3, #0]
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e88:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	2221      	movs	r2, #33	; 0x21
 8002e8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	2210      	movs	r2, #16
 8002e96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	687a      	ldr	r2, [r7, #4]
 8002ea4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	893a      	ldrh	r2, [r7, #8]
 8002eaa:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002eb0:	b29a      	uxth	r2, r3
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	4a50      	ldr	r2, [pc, #320]	; (8002ffc <HAL_I2C_Master_Transmit+0x1f8>)
 8002eba:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002ebc:	8979      	ldrh	r1, [r7, #10]
 8002ebe:	697b      	ldr	r3, [r7, #20]
 8002ec0:	6a3a      	ldr	r2, [r7, #32]
 8002ec2:	68f8      	ldr	r0, [r7, #12]
 8002ec4:	f000 f89c 	bl	8003000 <I2C_MasterRequestWrite>
 8002ec8:	4603      	mov	r3, r0
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d001      	beq.n	8002ed2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002ece:	2301      	movs	r3, #1
 8002ed0:	e08d      	b.n	8002fee <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	613b      	str	r3, [r7, #16]
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	695b      	ldr	r3, [r3, #20]
 8002edc:	613b      	str	r3, [r7, #16]
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	699b      	ldr	r3, [r3, #24]
 8002ee4:	613b      	str	r3, [r7, #16]
 8002ee6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002ee8:	e066      	b.n	8002fb8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002eea:	697a      	ldr	r2, [r7, #20]
 8002eec:	6a39      	ldr	r1, [r7, #32]
 8002eee:	68f8      	ldr	r0, [r7, #12]
 8002ef0:	f000 fa22 	bl	8003338 <I2C_WaitOnTXEFlagUntilTimeout>
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d00d      	beq.n	8002f16 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002efe:	2b04      	cmp	r3, #4
 8002f00:	d107      	bne.n	8002f12 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	681a      	ldr	r2, [r3, #0]
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f10:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002f12:	2301      	movs	r3, #1
 8002f14:	e06b      	b.n	8002fee <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f1a:	781a      	ldrb	r2, [r3, #0]
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f26:	1c5a      	adds	r2, r3, #1
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f30:	b29b      	uxth	r3, r3
 8002f32:	3b01      	subs	r3, #1
 8002f34:	b29a      	uxth	r2, r3
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f3e:	3b01      	subs	r3, #1
 8002f40:	b29a      	uxth	r2, r3
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	695b      	ldr	r3, [r3, #20]
 8002f4c:	f003 0304 	and.w	r3, r3, #4
 8002f50:	2b04      	cmp	r3, #4
 8002f52:	d11b      	bne.n	8002f8c <HAL_I2C_Master_Transmit+0x188>
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d017      	beq.n	8002f8c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f60:	781a      	ldrb	r2, [r3, #0]
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f6c:	1c5a      	adds	r2, r3, #1
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f76:	b29b      	uxth	r3, r3
 8002f78:	3b01      	subs	r3, #1
 8002f7a:	b29a      	uxth	r2, r3
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f84:	3b01      	subs	r3, #1
 8002f86:	b29a      	uxth	r2, r3
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f8c:	697a      	ldr	r2, [r7, #20]
 8002f8e:	6a39      	ldr	r1, [r7, #32]
 8002f90:	68f8      	ldr	r0, [r7, #12]
 8002f92:	f000 fa19 	bl	80033c8 <I2C_WaitOnBTFFlagUntilTimeout>
 8002f96:	4603      	mov	r3, r0
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d00d      	beq.n	8002fb8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fa0:	2b04      	cmp	r3, #4
 8002fa2:	d107      	bne.n	8002fb4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	681a      	ldr	r2, [r3, #0]
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fb2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002fb4:	2301      	movs	r3, #1
 8002fb6:	e01a      	b.n	8002fee <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d194      	bne.n	8002eea <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	681a      	ldr	r2, [r3, #0]
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	2220      	movs	r2, #32
 8002fd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	2200      	movs	r2, #0
 8002fdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002fe8:	2300      	movs	r3, #0
 8002fea:	e000      	b.n	8002fee <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002fec:	2302      	movs	r3, #2
  }
}
 8002fee:	4618      	mov	r0, r3
 8002ff0:	3718      	adds	r7, #24
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	bd80      	pop	{r7, pc}
 8002ff6:	bf00      	nop
 8002ff8:	00100002 	.word	0x00100002
 8002ffc:	ffff0000 	.word	0xffff0000

08003000 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b088      	sub	sp, #32
 8003004:	af02      	add	r7, sp, #8
 8003006:	60f8      	str	r0, [r7, #12]
 8003008:	607a      	str	r2, [r7, #4]
 800300a:	603b      	str	r3, [r7, #0]
 800300c:	460b      	mov	r3, r1
 800300e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003014:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003016:	697b      	ldr	r3, [r7, #20]
 8003018:	2b08      	cmp	r3, #8
 800301a:	d006      	beq.n	800302a <I2C_MasterRequestWrite+0x2a>
 800301c:	697b      	ldr	r3, [r7, #20]
 800301e:	2b01      	cmp	r3, #1
 8003020:	d003      	beq.n	800302a <I2C_MasterRequestWrite+0x2a>
 8003022:	697b      	ldr	r3, [r7, #20]
 8003024:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003028:	d108      	bne.n	800303c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	681a      	ldr	r2, [r3, #0]
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003038:	601a      	str	r2, [r3, #0]
 800303a:	e00b      	b.n	8003054 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003040:	2b12      	cmp	r3, #18
 8003042:	d107      	bne.n	8003054 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	681a      	ldr	r2, [r3, #0]
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003052:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	9300      	str	r3, [sp, #0]
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2200      	movs	r2, #0
 800305c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003060:	68f8      	ldr	r0, [r7, #12]
 8003062:	f000 f84f 	bl	8003104 <I2C_WaitOnFlagUntilTimeout>
 8003066:	4603      	mov	r3, r0
 8003068:	2b00      	cmp	r3, #0
 800306a:	d00d      	beq.n	8003088 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003076:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800307a:	d103      	bne.n	8003084 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003082:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003084:	2303      	movs	r3, #3
 8003086:	e035      	b.n	80030f4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	691b      	ldr	r3, [r3, #16]
 800308c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003090:	d108      	bne.n	80030a4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003092:	897b      	ldrh	r3, [r7, #10]
 8003094:	b2db      	uxtb	r3, r3
 8003096:	461a      	mov	r2, r3
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80030a0:	611a      	str	r2, [r3, #16]
 80030a2:	e01b      	b.n	80030dc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80030a4:	897b      	ldrh	r3, [r7, #10]
 80030a6:	11db      	asrs	r3, r3, #7
 80030a8:	b2db      	uxtb	r3, r3
 80030aa:	f003 0306 	and.w	r3, r3, #6
 80030ae:	b2db      	uxtb	r3, r3
 80030b0:	f063 030f 	orn	r3, r3, #15
 80030b4:	b2da      	uxtb	r2, r3
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	687a      	ldr	r2, [r7, #4]
 80030c0:	490e      	ldr	r1, [pc, #56]	; (80030fc <I2C_MasterRequestWrite+0xfc>)
 80030c2:	68f8      	ldr	r0, [r7, #12]
 80030c4:	f000 f898 	bl	80031f8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80030c8:	4603      	mov	r3, r0
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d001      	beq.n	80030d2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80030ce:	2301      	movs	r3, #1
 80030d0:	e010      	b.n	80030f4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80030d2:	897b      	ldrh	r3, [r7, #10]
 80030d4:	b2da      	uxtb	r2, r3
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	687a      	ldr	r2, [r7, #4]
 80030e0:	4907      	ldr	r1, [pc, #28]	; (8003100 <I2C_MasterRequestWrite+0x100>)
 80030e2:	68f8      	ldr	r0, [r7, #12]
 80030e4:	f000 f888 	bl	80031f8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80030e8:	4603      	mov	r3, r0
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d001      	beq.n	80030f2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80030ee:	2301      	movs	r3, #1
 80030f0:	e000      	b.n	80030f4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80030f2:	2300      	movs	r3, #0
}
 80030f4:	4618      	mov	r0, r3
 80030f6:	3718      	adds	r7, #24
 80030f8:	46bd      	mov	sp, r7
 80030fa:	bd80      	pop	{r7, pc}
 80030fc:	00010008 	.word	0x00010008
 8003100:	00010002 	.word	0x00010002

08003104 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b084      	sub	sp, #16
 8003108:	af00      	add	r7, sp, #0
 800310a:	60f8      	str	r0, [r7, #12]
 800310c:	60b9      	str	r1, [r7, #8]
 800310e:	603b      	str	r3, [r7, #0]
 8003110:	4613      	mov	r3, r2
 8003112:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003114:	e048      	b.n	80031a8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800311c:	d044      	beq.n	80031a8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800311e:	f7fe ff99 	bl	8002054 <HAL_GetTick>
 8003122:	4602      	mov	r2, r0
 8003124:	69bb      	ldr	r3, [r7, #24]
 8003126:	1ad3      	subs	r3, r2, r3
 8003128:	683a      	ldr	r2, [r7, #0]
 800312a:	429a      	cmp	r2, r3
 800312c:	d302      	bcc.n	8003134 <I2C_WaitOnFlagUntilTimeout+0x30>
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	2b00      	cmp	r3, #0
 8003132:	d139      	bne.n	80031a8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003134:	68bb      	ldr	r3, [r7, #8]
 8003136:	0c1b      	lsrs	r3, r3, #16
 8003138:	b2db      	uxtb	r3, r3
 800313a:	2b01      	cmp	r3, #1
 800313c:	d10d      	bne.n	800315a <I2C_WaitOnFlagUntilTimeout+0x56>
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	695b      	ldr	r3, [r3, #20]
 8003144:	43da      	mvns	r2, r3
 8003146:	68bb      	ldr	r3, [r7, #8]
 8003148:	4013      	ands	r3, r2
 800314a:	b29b      	uxth	r3, r3
 800314c:	2b00      	cmp	r3, #0
 800314e:	bf0c      	ite	eq
 8003150:	2301      	moveq	r3, #1
 8003152:	2300      	movne	r3, #0
 8003154:	b2db      	uxtb	r3, r3
 8003156:	461a      	mov	r2, r3
 8003158:	e00c      	b.n	8003174 <I2C_WaitOnFlagUntilTimeout+0x70>
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	699b      	ldr	r3, [r3, #24]
 8003160:	43da      	mvns	r2, r3
 8003162:	68bb      	ldr	r3, [r7, #8]
 8003164:	4013      	ands	r3, r2
 8003166:	b29b      	uxth	r3, r3
 8003168:	2b00      	cmp	r3, #0
 800316a:	bf0c      	ite	eq
 800316c:	2301      	moveq	r3, #1
 800316e:	2300      	movne	r3, #0
 8003170:	b2db      	uxtb	r3, r3
 8003172:	461a      	mov	r2, r3
 8003174:	79fb      	ldrb	r3, [r7, #7]
 8003176:	429a      	cmp	r2, r3
 8003178:	d116      	bne.n	80031a8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	2200      	movs	r2, #0
 800317e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	2220      	movs	r2, #32
 8003184:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	2200      	movs	r2, #0
 800318c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003194:	f043 0220 	orr.w	r2, r3, #32
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	2200      	movs	r2, #0
 80031a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80031a4:	2301      	movs	r3, #1
 80031a6:	e023      	b.n	80031f0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80031a8:	68bb      	ldr	r3, [r7, #8]
 80031aa:	0c1b      	lsrs	r3, r3, #16
 80031ac:	b2db      	uxtb	r3, r3
 80031ae:	2b01      	cmp	r3, #1
 80031b0:	d10d      	bne.n	80031ce <I2C_WaitOnFlagUntilTimeout+0xca>
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	695b      	ldr	r3, [r3, #20]
 80031b8:	43da      	mvns	r2, r3
 80031ba:	68bb      	ldr	r3, [r7, #8]
 80031bc:	4013      	ands	r3, r2
 80031be:	b29b      	uxth	r3, r3
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	bf0c      	ite	eq
 80031c4:	2301      	moveq	r3, #1
 80031c6:	2300      	movne	r3, #0
 80031c8:	b2db      	uxtb	r3, r3
 80031ca:	461a      	mov	r2, r3
 80031cc:	e00c      	b.n	80031e8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	699b      	ldr	r3, [r3, #24]
 80031d4:	43da      	mvns	r2, r3
 80031d6:	68bb      	ldr	r3, [r7, #8]
 80031d8:	4013      	ands	r3, r2
 80031da:	b29b      	uxth	r3, r3
 80031dc:	2b00      	cmp	r3, #0
 80031de:	bf0c      	ite	eq
 80031e0:	2301      	moveq	r3, #1
 80031e2:	2300      	movne	r3, #0
 80031e4:	b2db      	uxtb	r3, r3
 80031e6:	461a      	mov	r2, r3
 80031e8:	79fb      	ldrb	r3, [r7, #7]
 80031ea:	429a      	cmp	r2, r3
 80031ec:	d093      	beq.n	8003116 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80031ee:	2300      	movs	r3, #0
}
 80031f0:	4618      	mov	r0, r3
 80031f2:	3710      	adds	r7, #16
 80031f4:	46bd      	mov	sp, r7
 80031f6:	bd80      	pop	{r7, pc}

080031f8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b084      	sub	sp, #16
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	60f8      	str	r0, [r7, #12]
 8003200:	60b9      	str	r1, [r7, #8]
 8003202:	607a      	str	r2, [r7, #4]
 8003204:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003206:	e071      	b.n	80032ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	695b      	ldr	r3, [r3, #20]
 800320e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003212:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003216:	d123      	bne.n	8003260 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	681a      	ldr	r2, [r3, #0]
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003226:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003230:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	2200      	movs	r2, #0
 8003236:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	2220      	movs	r2, #32
 800323c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	2200      	movs	r2, #0
 8003244:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800324c:	f043 0204 	orr.w	r2, r3, #4
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	2200      	movs	r2, #0
 8003258:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800325c:	2301      	movs	r3, #1
 800325e:	e067      	b.n	8003330 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003266:	d041      	beq.n	80032ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003268:	f7fe fef4 	bl	8002054 <HAL_GetTick>
 800326c:	4602      	mov	r2, r0
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	1ad3      	subs	r3, r2, r3
 8003272:	687a      	ldr	r2, [r7, #4]
 8003274:	429a      	cmp	r2, r3
 8003276:	d302      	bcc.n	800327e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2b00      	cmp	r3, #0
 800327c:	d136      	bne.n	80032ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800327e:	68bb      	ldr	r3, [r7, #8]
 8003280:	0c1b      	lsrs	r3, r3, #16
 8003282:	b2db      	uxtb	r3, r3
 8003284:	2b01      	cmp	r3, #1
 8003286:	d10c      	bne.n	80032a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	695b      	ldr	r3, [r3, #20]
 800328e:	43da      	mvns	r2, r3
 8003290:	68bb      	ldr	r3, [r7, #8]
 8003292:	4013      	ands	r3, r2
 8003294:	b29b      	uxth	r3, r3
 8003296:	2b00      	cmp	r3, #0
 8003298:	bf14      	ite	ne
 800329a:	2301      	movne	r3, #1
 800329c:	2300      	moveq	r3, #0
 800329e:	b2db      	uxtb	r3, r3
 80032a0:	e00b      	b.n	80032ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	699b      	ldr	r3, [r3, #24]
 80032a8:	43da      	mvns	r2, r3
 80032aa:	68bb      	ldr	r3, [r7, #8]
 80032ac:	4013      	ands	r3, r2
 80032ae:	b29b      	uxth	r3, r3
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	bf14      	ite	ne
 80032b4:	2301      	movne	r3, #1
 80032b6:	2300      	moveq	r3, #0
 80032b8:	b2db      	uxtb	r3, r3
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d016      	beq.n	80032ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	2200      	movs	r2, #0
 80032c2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	2220      	movs	r2, #32
 80032c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	2200      	movs	r2, #0
 80032d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032d8:	f043 0220 	orr.w	r2, r3, #32
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	2200      	movs	r2, #0
 80032e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80032e8:	2301      	movs	r3, #1
 80032ea:	e021      	b.n	8003330 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80032ec:	68bb      	ldr	r3, [r7, #8]
 80032ee:	0c1b      	lsrs	r3, r3, #16
 80032f0:	b2db      	uxtb	r3, r3
 80032f2:	2b01      	cmp	r3, #1
 80032f4:	d10c      	bne.n	8003310 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	695b      	ldr	r3, [r3, #20]
 80032fc:	43da      	mvns	r2, r3
 80032fe:	68bb      	ldr	r3, [r7, #8]
 8003300:	4013      	ands	r3, r2
 8003302:	b29b      	uxth	r3, r3
 8003304:	2b00      	cmp	r3, #0
 8003306:	bf14      	ite	ne
 8003308:	2301      	movne	r3, #1
 800330a:	2300      	moveq	r3, #0
 800330c:	b2db      	uxtb	r3, r3
 800330e:	e00b      	b.n	8003328 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	699b      	ldr	r3, [r3, #24]
 8003316:	43da      	mvns	r2, r3
 8003318:	68bb      	ldr	r3, [r7, #8]
 800331a:	4013      	ands	r3, r2
 800331c:	b29b      	uxth	r3, r3
 800331e:	2b00      	cmp	r3, #0
 8003320:	bf14      	ite	ne
 8003322:	2301      	movne	r3, #1
 8003324:	2300      	moveq	r3, #0
 8003326:	b2db      	uxtb	r3, r3
 8003328:	2b00      	cmp	r3, #0
 800332a:	f47f af6d 	bne.w	8003208 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800332e:	2300      	movs	r3, #0
}
 8003330:	4618      	mov	r0, r3
 8003332:	3710      	adds	r7, #16
 8003334:	46bd      	mov	sp, r7
 8003336:	bd80      	pop	{r7, pc}

08003338 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b084      	sub	sp, #16
 800333c:	af00      	add	r7, sp, #0
 800333e:	60f8      	str	r0, [r7, #12]
 8003340:	60b9      	str	r1, [r7, #8]
 8003342:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003344:	e034      	b.n	80033b0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003346:	68f8      	ldr	r0, [r7, #12]
 8003348:	f000 f886 	bl	8003458 <I2C_IsAcknowledgeFailed>
 800334c:	4603      	mov	r3, r0
 800334e:	2b00      	cmp	r3, #0
 8003350:	d001      	beq.n	8003356 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003352:	2301      	movs	r3, #1
 8003354:	e034      	b.n	80033c0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003356:	68bb      	ldr	r3, [r7, #8]
 8003358:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800335c:	d028      	beq.n	80033b0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800335e:	f7fe fe79 	bl	8002054 <HAL_GetTick>
 8003362:	4602      	mov	r2, r0
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	1ad3      	subs	r3, r2, r3
 8003368:	68ba      	ldr	r2, [r7, #8]
 800336a:	429a      	cmp	r2, r3
 800336c:	d302      	bcc.n	8003374 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800336e:	68bb      	ldr	r3, [r7, #8]
 8003370:	2b00      	cmp	r3, #0
 8003372:	d11d      	bne.n	80033b0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	695b      	ldr	r3, [r3, #20]
 800337a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800337e:	2b80      	cmp	r3, #128	; 0x80
 8003380:	d016      	beq.n	80033b0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	2200      	movs	r2, #0
 8003386:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	2220      	movs	r2, #32
 800338c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	2200      	movs	r2, #0
 8003394:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800339c:	f043 0220 	orr.w	r2, r3, #32
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	2200      	movs	r2, #0
 80033a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80033ac:	2301      	movs	r3, #1
 80033ae:	e007      	b.n	80033c0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	695b      	ldr	r3, [r3, #20]
 80033b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033ba:	2b80      	cmp	r3, #128	; 0x80
 80033bc:	d1c3      	bne.n	8003346 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80033be:	2300      	movs	r3, #0
}
 80033c0:	4618      	mov	r0, r3
 80033c2:	3710      	adds	r7, #16
 80033c4:	46bd      	mov	sp, r7
 80033c6:	bd80      	pop	{r7, pc}

080033c8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b084      	sub	sp, #16
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	60f8      	str	r0, [r7, #12]
 80033d0:	60b9      	str	r1, [r7, #8]
 80033d2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80033d4:	e034      	b.n	8003440 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80033d6:	68f8      	ldr	r0, [r7, #12]
 80033d8:	f000 f83e 	bl	8003458 <I2C_IsAcknowledgeFailed>
 80033dc:	4603      	mov	r3, r0
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d001      	beq.n	80033e6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80033e2:	2301      	movs	r3, #1
 80033e4:	e034      	b.n	8003450 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033e6:	68bb      	ldr	r3, [r7, #8]
 80033e8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80033ec:	d028      	beq.n	8003440 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033ee:	f7fe fe31 	bl	8002054 <HAL_GetTick>
 80033f2:	4602      	mov	r2, r0
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	1ad3      	subs	r3, r2, r3
 80033f8:	68ba      	ldr	r2, [r7, #8]
 80033fa:	429a      	cmp	r2, r3
 80033fc:	d302      	bcc.n	8003404 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80033fe:	68bb      	ldr	r3, [r7, #8]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d11d      	bne.n	8003440 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	695b      	ldr	r3, [r3, #20]
 800340a:	f003 0304 	and.w	r3, r3, #4
 800340e:	2b04      	cmp	r3, #4
 8003410:	d016      	beq.n	8003440 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	2200      	movs	r2, #0
 8003416:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	2220      	movs	r2, #32
 800341c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	2200      	movs	r2, #0
 8003424:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800342c:	f043 0220 	orr.w	r2, r3, #32
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	2200      	movs	r2, #0
 8003438:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800343c:	2301      	movs	r3, #1
 800343e:	e007      	b.n	8003450 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	695b      	ldr	r3, [r3, #20]
 8003446:	f003 0304 	and.w	r3, r3, #4
 800344a:	2b04      	cmp	r3, #4
 800344c:	d1c3      	bne.n	80033d6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800344e:	2300      	movs	r3, #0
}
 8003450:	4618      	mov	r0, r3
 8003452:	3710      	adds	r7, #16
 8003454:	46bd      	mov	sp, r7
 8003456:	bd80      	pop	{r7, pc}

08003458 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003458:	b480      	push	{r7}
 800345a:	b083      	sub	sp, #12
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	695b      	ldr	r3, [r3, #20]
 8003466:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800346a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800346e:	d11b      	bne.n	80034a8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003478:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2200      	movs	r2, #0
 800347e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2220      	movs	r2, #32
 8003484:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2200      	movs	r2, #0
 800348c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003494:	f043 0204 	orr.w	r2, r3, #4
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2200      	movs	r2, #0
 80034a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80034a4:	2301      	movs	r3, #1
 80034a6:	e000      	b.n	80034aa <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80034a8:	2300      	movs	r3, #0
}
 80034aa:	4618      	mov	r0, r3
 80034ac:	370c      	adds	r7, #12
 80034ae:	46bd      	mov	sp, r7
 80034b0:	bc80      	pop	{r7}
 80034b2:	4770      	bx	lr

080034b4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b086      	sub	sp, #24
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d101      	bne.n	80034c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80034c2:	2301      	movs	r3, #1
 80034c4:	e272      	b.n	80039ac <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f003 0301 	and.w	r3, r3, #1
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	f000 8087 	beq.w	80035e2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80034d4:	4b92      	ldr	r3, [pc, #584]	; (8003720 <HAL_RCC_OscConfig+0x26c>)
 80034d6:	685b      	ldr	r3, [r3, #4]
 80034d8:	f003 030c 	and.w	r3, r3, #12
 80034dc:	2b04      	cmp	r3, #4
 80034de:	d00c      	beq.n	80034fa <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80034e0:	4b8f      	ldr	r3, [pc, #572]	; (8003720 <HAL_RCC_OscConfig+0x26c>)
 80034e2:	685b      	ldr	r3, [r3, #4]
 80034e4:	f003 030c 	and.w	r3, r3, #12
 80034e8:	2b08      	cmp	r3, #8
 80034ea:	d112      	bne.n	8003512 <HAL_RCC_OscConfig+0x5e>
 80034ec:	4b8c      	ldr	r3, [pc, #560]	; (8003720 <HAL_RCC_OscConfig+0x26c>)
 80034ee:	685b      	ldr	r3, [r3, #4]
 80034f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034f8:	d10b      	bne.n	8003512 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034fa:	4b89      	ldr	r3, [pc, #548]	; (8003720 <HAL_RCC_OscConfig+0x26c>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003502:	2b00      	cmp	r3, #0
 8003504:	d06c      	beq.n	80035e0 <HAL_RCC_OscConfig+0x12c>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	685b      	ldr	r3, [r3, #4]
 800350a:	2b00      	cmp	r3, #0
 800350c:	d168      	bne.n	80035e0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800350e:	2301      	movs	r3, #1
 8003510:	e24c      	b.n	80039ac <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	685b      	ldr	r3, [r3, #4]
 8003516:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800351a:	d106      	bne.n	800352a <HAL_RCC_OscConfig+0x76>
 800351c:	4b80      	ldr	r3, [pc, #512]	; (8003720 <HAL_RCC_OscConfig+0x26c>)
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4a7f      	ldr	r2, [pc, #508]	; (8003720 <HAL_RCC_OscConfig+0x26c>)
 8003522:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003526:	6013      	str	r3, [r2, #0]
 8003528:	e02e      	b.n	8003588 <HAL_RCC_OscConfig+0xd4>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	685b      	ldr	r3, [r3, #4]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d10c      	bne.n	800354c <HAL_RCC_OscConfig+0x98>
 8003532:	4b7b      	ldr	r3, [pc, #492]	; (8003720 <HAL_RCC_OscConfig+0x26c>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	4a7a      	ldr	r2, [pc, #488]	; (8003720 <HAL_RCC_OscConfig+0x26c>)
 8003538:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800353c:	6013      	str	r3, [r2, #0]
 800353e:	4b78      	ldr	r3, [pc, #480]	; (8003720 <HAL_RCC_OscConfig+0x26c>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4a77      	ldr	r2, [pc, #476]	; (8003720 <HAL_RCC_OscConfig+0x26c>)
 8003544:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003548:	6013      	str	r3, [r2, #0]
 800354a:	e01d      	b.n	8003588 <HAL_RCC_OscConfig+0xd4>
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	685b      	ldr	r3, [r3, #4]
 8003550:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003554:	d10c      	bne.n	8003570 <HAL_RCC_OscConfig+0xbc>
 8003556:	4b72      	ldr	r3, [pc, #456]	; (8003720 <HAL_RCC_OscConfig+0x26c>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4a71      	ldr	r2, [pc, #452]	; (8003720 <HAL_RCC_OscConfig+0x26c>)
 800355c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003560:	6013      	str	r3, [r2, #0]
 8003562:	4b6f      	ldr	r3, [pc, #444]	; (8003720 <HAL_RCC_OscConfig+0x26c>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	4a6e      	ldr	r2, [pc, #440]	; (8003720 <HAL_RCC_OscConfig+0x26c>)
 8003568:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800356c:	6013      	str	r3, [r2, #0]
 800356e:	e00b      	b.n	8003588 <HAL_RCC_OscConfig+0xd4>
 8003570:	4b6b      	ldr	r3, [pc, #428]	; (8003720 <HAL_RCC_OscConfig+0x26c>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4a6a      	ldr	r2, [pc, #424]	; (8003720 <HAL_RCC_OscConfig+0x26c>)
 8003576:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800357a:	6013      	str	r3, [r2, #0]
 800357c:	4b68      	ldr	r3, [pc, #416]	; (8003720 <HAL_RCC_OscConfig+0x26c>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4a67      	ldr	r2, [pc, #412]	; (8003720 <HAL_RCC_OscConfig+0x26c>)
 8003582:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003586:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	685b      	ldr	r3, [r3, #4]
 800358c:	2b00      	cmp	r3, #0
 800358e:	d013      	beq.n	80035b8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003590:	f7fe fd60 	bl	8002054 <HAL_GetTick>
 8003594:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003596:	e008      	b.n	80035aa <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003598:	f7fe fd5c 	bl	8002054 <HAL_GetTick>
 800359c:	4602      	mov	r2, r0
 800359e:	693b      	ldr	r3, [r7, #16]
 80035a0:	1ad3      	subs	r3, r2, r3
 80035a2:	2b64      	cmp	r3, #100	; 0x64
 80035a4:	d901      	bls.n	80035aa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80035a6:	2303      	movs	r3, #3
 80035a8:	e200      	b.n	80039ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035aa:	4b5d      	ldr	r3, [pc, #372]	; (8003720 <HAL_RCC_OscConfig+0x26c>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d0f0      	beq.n	8003598 <HAL_RCC_OscConfig+0xe4>
 80035b6:	e014      	b.n	80035e2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035b8:	f7fe fd4c 	bl	8002054 <HAL_GetTick>
 80035bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035be:	e008      	b.n	80035d2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035c0:	f7fe fd48 	bl	8002054 <HAL_GetTick>
 80035c4:	4602      	mov	r2, r0
 80035c6:	693b      	ldr	r3, [r7, #16]
 80035c8:	1ad3      	subs	r3, r2, r3
 80035ca:	2b64      	cmp	r3, #100	; 0x64
 80035cc:	d901      	bls.n	80035d2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80035ce:	2303      	movs	r3, #3
 80035d0:	e1ec      	b.n	80039ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035d2:	4b53      	ldr	r3, [pc, #332]	; (8003720 <HAL_RCC_OscConfig+0x26c>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d1f0      	bne.n	80035c0 <HAL_RCC_OscConfig+0x10c>
 80035de:	e000      	b.n	80035e2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f003 0302 	and.w	r3, r3, #2
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d063      	beq.n	80036b6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80035ee:	4b4c      	ldr	r3, [pc, #304]	; (8003720 <HAL_RCC_OscConfig+0x26c>)
 80035f0:	685b      	ldr	r3, [r3, #4]
 80035f2:	f003 030c 	and.w	r3, r3, #12
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d00b      	beq.n	8003612 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80035fa:	4b49      	ldr	r3, [pc, #292]	; (8003720 <HAL_RCC_OscConfig+0x26c>)
 80035fc:	685b      	ldr	r3, [r3, #4]
 80035fe:	f003 030c 	and.w	r3, r3, #12
 8003602:	2b08      	cmp	r3, #8
 8003604:	d11c      	bne.n	8003640 <HAL_RCC_OscConfig+0x18c>
 8003606:	4b46      	ldr	r3, [pc, #280]	; (8003720 <HAL_RCC_OscConfig+0x26c>)
 8003608:	685b      	ldr	r3, [r3, #4]
 800360a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800360e:	2b00      	cmp	r3, #0
 8003610:	d116      	bne.n	8003640 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003612:	4b43      	ldr	r3, [pc, #268]	; (8003720 <HAL_RCC_OscConfig+0x26c>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f003 0302 	and.w	r3, r3, #2
 800361a:	2b00      	cmp	r3, #0
 800361c:	d005      	beq.n	800362a <HAL_RCC_OscConfig+0x176>
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	691b      	ldr	r3, [r3, #16]
 8003622:	2b01      	cmp	r3, #1
 8003624:	d001      	beq.n	800362a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003626:	2301      	movs	r3, #1
 8003628:	e1c0      	b.n	80039ac <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800362a:	4b3d      	ldr	r3, [pc, #244]	; (8003720 <HAL_RCC_OscConfig+0x26c>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	695b      	ldr	r3, [r3, #20]
 8003636:	00db      	lsls	r3, r3, #3
 8003638:	4939      	ldr	r1, [pc, #228]	; (8003720 <HAL_RCC_OscConfig+0x26c>)
 800363a:	4313      	orrs	r3, r2
 800363c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800363e:	e03a      	b.n	80036b6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	691b      	ldr	r3, [r3, #16]
 8003644:	2b00      	cmp	r3, #0
 8003646:	d020      	beq.n	800368a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003648:	4b36      	ldr	r3, [pc, #216]	; (8003724 <HAL_RCC_OscConfig+0x270>)
 800364a:	2201      	movs	r2, #1
 800364c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800364e:	f7fe fd01 	bl	8002054 <HAL_GetTick>
 8003652:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003654:	e008      	b.n	8003668 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003656:	f7fe fcfd 	bl	8002054 <HAL_GetTick>
 800365a:	4602      	mov	r2, r0
 800365c:	693b      	ldr	r3, [r7, #16]
 800365e:	1ad3      	subs	r3, r2, r3
 8003660:	2b02      	cmp	r3, #2
 8003662:	d901      	bls.n	8003668 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003664:	2303      	movs	r3, #3
 8003666:	e1a1      	b.n	80039ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003668:	4b2d      	ldr	r3, [pc, #180]	; (8003720 <HAL_RCC_OscConfig+0x26c>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f003 0302 	and.w	r3, r3, #2
 8003670:	2b00      	cmp	r3, #0
 8003672:	d0f0      	beq.n	8003656 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003674:	4b2a      	ldr	r3, [pc, #168]	; (8003720 <HAL_RCC_OscConfig+0x26c>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	695b      	ldr	r3, [r3, #20]
 8003680:	00db      	lsls	r3, r3, #3
 8003682:	4927      	ldr	r1, [pc, #156]	; (8003720 <HAL_RCC_OscConfig+0x26c>)
 8003684:	4313      	orrs	r3, r2
 8003686:	600b      	str	r3, [r1, #0]
 8003688:	e015      	b.n	80036b6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800368a:	4b26      	ldr	r3, [pc, #152]	; (8003724 <HAL_RCC_OscConfig+0x270>)
 800368c:	2200      	movs	r2, #0
 800368e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003690:	f7fe fce0 	bl	8002054 <HAL_GetTick>
 8003694:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003696:	e008      	b.n	80036aa <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003698:	f7fe fcdc 	bl	8002054 <HAL_GetTick>
 800369c:	4602      	mov	r2, r0
 800369e:	693b      	ldr	r3, [r7, #16]
 80036a0:	1ad3      	subs	r3, r2, r3
 80036a2:	2b02      	cmp	r3, #2
 80036a4:	d901      	bls.n	80036aa <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80036a6:	2303      	movs	r3, #3
 80036a8:	e180      	b.n	80039ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036aa:	4b1d      	ldr	r3, [pc, #116]	; (8003720 <HAL_RCC_OscConfig+0x26c>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f003 0302 	and.w	r3, r3, #2
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d1f0      	bne.n	8003698 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f003 0308 	and.w	r3, r3, #8
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d03a      	beq.n	8003738 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	699b      	ldr	r3, [r3, #24]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d019      	beq.n	80036fe <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80036ca:	4b17      	ldr	r3, [pc, #92]	; (8003728 <HAL_RCC_OscConfig+0x274>)
 80036cc:	2201      	movs	r2, #1
 80036ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036d0:	f7fe fcc0 	bl	8002054 <HAL_GetTick>
 80036d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036d6:	e008      	b.n	80036ea <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80036d8:	f7fe fcbc 	bl	8002054 <HAL_GetTick>
 80036dc:	4602      	mov	r2, r0
 80036de:	693b      	ldr	r3, [r7, #16]
 80036e0:	1ad3      	subs	r3, r2, r3
 80036e2:	2b02      	cmp	r3, #2
 80036e4:	d901      	bls.n	80036ea <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80036e6:	2303      	movs	r3, #3
 80036e8:	e160      	b.n	80039ac <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036ea:	4b0d      	ldr	r3, [pc, #52]	; (8003720 <HAL_RCC_OscConfig+0x26c>)
 80036ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ee:	f003 0302 	and.w	r3, r3, #2
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d0f0      	beq.n	80036d8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80036f6:	2001      	movs	r0, #1
 80036f8:	f000 face 	bl	8003c98 <RCC_Delay>
 80036fc:	e01c      	b.n	8003738 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80036fe:	4b0a      	ldr	r3, [pc, #40]	; (8003728 <HAL_RCC_OscConfig+0x274>)
 8003700:	2200      	movs	r2, #0
 8003702:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003704:	f7fe fca6 	bl	8002054 <HAL_GetTick>
 8003708:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800370a:	e00f      	b.n	800372c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800370c:	f7fe fca2 	bl	8002054 <HAL_GetTick>
 8003710:	4602      	mov	r2, r0
 8003712:	693b      	ldr	r3, [r7, #16]
 8003714:	1ad3      	subs	r3, r2, r3
 8003716:	2b02      	cmp	r3, #2
 8003718:	d908      	bls.n	800372c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800371a:	2303      	movs	r3, #3
 800371c:	e146      	b.n	80039ac <HAL_RCC_OscConfig+0x4f8>
 800371e:	bf00      	nop
 8003720:	40021000 	.word	0x40021000
 8003724:	42420000 	.word	0x42420000
 8003728:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800372c:	4b92      	ldr	r3, [pc, #584]	; (8003978 <HAL_RCC_OscConfig+0x4c4>)
 800372e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003730:	f003 0302 	and.w	r3, r3, #2
 8003734:	2b00      	cmp	r3, #0
 8003736:	d1e9      	bne.n	800370c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f003 0304 	and.w	r3, r3, #4
 8003740:	2b00      	cmp	r3, #0
 8003742:	f000 80a6 	beq.w	8003892 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003746:	2300      	movs	r3, #0
 8003748:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800374a:	4b8b      	ldr	r3, [pc, #556]	; (8003978 <HAL_RCC_OscConfig+0x4c4>)
 800374c:	69db      	ldr	r3, [r3, #28]
 800374e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003752:	2b00      	cmp	r3, #0
 8003754:	d10d      	bne.n	8003772 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003756:	4b88      	ldr	r3, [pc, #544]	; (8003978 <HAL_RCC_OscConfig+0x4c4>)
 8003758:	69db      	ldr	r3, [r3, #28]
 800375a:	4a87      	ldr	r2, [pc, #540]	; (8003978 <HAL_RCC_OscConfig+0x4c4>)
 800375c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003760:	61d3      	str	r3, [r2, #28]
 8003762:	4b85      	ldr	r3, [pc, #532]	; (8003978 <HAL_RCC_OscConfig+0x4c4>)
 8003764:	69db      	ldr	r3, [r3, #28]
 8003766:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800376a:	60bb      	str	r3, [r7, #8]
 800376c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800376e:	2301      	movs	r3, #1
 8003770:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003772:	4b82      	ldr	r3, [pc, #520]	; (800397c <HAL_RCC_OscConfig+0x4c8>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800377a:	2b00      	cmp	r3, #0
 800377c:	d118      	bne.n	80037b0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800377e:	4b7f      	ldr	r3, [pc, #508]	; (800397c <HAL_RCC_OscConfig+0x4c8>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4a7e      	ldr	r2, [pc, #504]	; (800397c <HAL_RCC_OscConfig+0x4c8>)
 8003784:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003788:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800378a:	f7fe fc63 	bl	8002054 <HAL_GetTick>
 800378e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003790:	e008      	b.n	80037a4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003792:	f7fe fc5f 	bl	8002054 <HAL_GetTick>
 8003796:	4602      	mov	r2, r0
 8003798:	693b      	ldr	r3, [r7, #16]
 800379a:	1ad3      	subs	r3, r2, r3
 800379c:	2b64      	cmp	r3, #100	; 0x64
 800379e:	d901      	bls.n	80037a4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80037a0:	2303      	movs	r3, #3
 80037a2:	e103      	b.n	80039ac <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037a4:	4b75      	ldr	r3, [pc, #468]	; (800397c <HAL_RCC_OscConfig+0x4c8>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d0f0      	beq.n	8003792 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	68db      	ldr	r3, [r3, #12]
 80037b4:	2b01      	cmp	r3, #1
 80037b6:	d106      	bne.n	80037c6 <HAL_RCC_OscConfig+0x312>
 80037b8:	4b6f      	ldr	r3, [pc, #444]	; (8003978 <HAL_RCC_OscConfig+0x4c4>)
 80037ba:	6a1b      	ldr	r3, [r3, #32]
 80037bc:	4a6e      	ldr	r2, [pc, #440]	; (8003978 <HAL_RCC_OscConfig+0x4c4>)
 80037be:	f043 0301 	orr.w	r3, r3, #1
 80037c2:	6213      	str	r3, [r2, #32]
 80037c4:	e02d      	b.n	8003822 <HAL_RCC_OscConfig+0x36e>
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	68db      	ldr	r3, [r3, #12]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d10c      	bne.n	80037e8 <HAL_RCC_OscConfig+0x334>
 80037ce:	4b6a      	ldr	r3, [pc, #424]	; (8003978 <HAL_RCC_OscConfig+0x4c4>)
 80037d0:	6a1b      	ldr	r3, [r3, #32]
 80037d2:	4a69      	ldr	r2, [pc, #420]	; (8003978 <HAL_RCC_OscConfig+0x4c4>)
 80037d4:	f023 0301 	bic.w	r3, r3, #1
 80037d8:	6213      	str	r3, [r2, #32]
 80037da:	4b67      	ldr	r3, [pc, #412]	; (8003978 <HAL_RCC_OscConfig+0x4c4>)
 80037dc:	6a1b      	ldr	r3, [r3, #32]
 80037de:	4a66      	ldr	r2, [pc, #408]	; (8003978 <HAL_RCC_OscConfig+0x4c4>)
 80037e0:	f023 0304 	bic.w	r3, r3, #4
 80037e4:	6213      	str	r3, [r2, #32]
 80037e6:	e01c      	b.n	8003822 <HAL_RCC_OscConfig+0x36e>
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	68db      	ldr	r3, [r3, #12]
 80037ec:	2b05      	cmp	r3, #5
 80037ee:	d10c      	bne.n	800380a <HAL_RCC_OscConfig+0x356>
 80037f0:	4b61      	ldr	r3, [pc, #388]	; (8003978 <HAL_RCC_OscConfig+0x4c4>)
 80037f2:	6a1b      	ldr	r3, [r3, #32]
 80037f4:	4a60      	ldr	r2, [pc, #384]	; (8003978 <HAL_RCC_OscConfig+0x4c4>)
 80037f6:	f043 0304 	orr.w	r3, r3, #4
 80037fa:	6213      	str	r3, [r2, #32]
 80037fc:	4b5e      	ldr	r3, [pc, #376]	; (8003978 <HAL_RCC_OscConfig+0x4c4>)
 80037fe:	6a1b      	ldr	r3, [r3, #32]
 8003800:	4a5d      	ldr	r2, [pc, #372]	; (8003978 <HAL_RCC_OscConfig+0x4c4>)
 8003802:	f043 0301 	orr.w	r3, r3, #1
 8003806:	6213      	str	r3, [r2, #32]
 8003808:	e00b      	b.n	8003822 <HAL_RCC_OscConfig+0x36e>
 800380a:	4b5b      	ldr	r3, [pc, #364]	; (8003978 <HAL_RCC_OscConfig+0x4c4>)
 800380c:	6a1b      	ldr	r3, [r3, #32]
 800380e:	4a5a      	ldr	r2, [pc, #360]	; (8003978 <HAL_RCC_OscConfig+0x4c4>)
 8003810:	f023 0301 	bic.w	r3, r3, #1
 8003814:	6213      	str	r3, [r2, #32]
 8003816:	4b58      	ldr	r3, [pc, #352]	; (8003978 <HAL_RCC_OscConfig+0x4c4>)
 8003818:	6a1b      	ldr	r3, [r3, #32]
 800381a:	4a57      	ldr	r2, [pc, #348]	; (8003978 <HAL_RCC_OscConfig+0x4c4>)
 800381c:	f023 0304 	bic.w	r3, r3, #4
 8003820:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	68db      	ldr	r3, [r3, #12]
 8003826:	2b00      	cmp	r3, #0
 8003828:	d015      	beq.n	8003856 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800382a:	f7fe fc13 	bl	8002054 <HAL_GetTick>
 800382e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003830:	e00a      	b.n	8003848 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003832:	f7fe fc0f 	bl	8002054 <HAL_GetTick>
 8003836:	4602      	mov	r2, r0
 8003838:	693b      	ldr	r3, [r7, #16]
 800383a:	1ad3      	subs	r3, r2, r3
 800383c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003840:	4293      	cmp	r3, r2
 8003842:	d901      	bls.n	8003848 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003844:	2303      	movs	r3, #3
 8003846:	e0b1      	b.n	80039ac <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003848:	4b4b      	ldr	r3, [pc, #300]	; (8003978 <HAL_RCC_OscConfig+0x4c4>)
 800384a:	6a1b      	ldr	r3, [r3, #32]
 800384c:	f003 0302 	and.w	r3, r3, #2
 8003850:	2b00      	cmp	r3, #0
 8003852:	d0ee      	beq.n	8003832 <HAL_RCC_OscConfig+0x37e>
 8003854:	e014      	b.n	8003880 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003856:	f7fe fbfd 	bl	8002054 <HAL_GetTick>
 800385a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800385c:	e00a      	b.n	8003874 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800385e:	f7fe fbf9 	bl	8002054 <HAL_GetTick>
 8003862:	4602      	mov	r2, r0
 8003864:	693b      	ldr	r3, [r7, #16]
 8003866:	1ad3      	subs	r3, r2, r3
 8003868:	f241 3288 	movw	r2, #5000	; 0x1388
 800386c:	4293      	cmp	r3, r2
 800386e:	d901      	bls.n	8003874 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003870:	2303      	movs	r3, #3
 8003872:	e09b      	b.n	80039ac <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003874:	4b40      	ldr	r3, [pc, #256]	; (8003978 <HAL_RCC_OscConfig+0x4c4>)
 8003876:	6a1b      	ldr	r3, [r3, #32]
 8003878:	f003 0302 	and.w	r3, r3, #2
 800387c:	2b00      	cmp	r3, #0
 800387e:	d1ee      	bne.n	800385e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003880:	7dfb      	ldrb	r3, [r7, #23]
 8003882:	2b01      	cmp	r3, #1
 8003884:	d105      	bne.n	8003892 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003886:	4b3c      	ldr	r3, [pc, #240]	; (8003978 <HAL_RCC_OscConfig+0x4c4>)
 8003888:	69db      	ldr	r3, [r3, #28]
 800388a:	4a3b      	ldr	r2, [pc, #236]	; (8003978 <HAL_RCC_OscConfig+0x4c4>)
 800388c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003890:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	69db      	ldr	r3, [r3, #28]
 8003896:	2b00      	cmp	r3, #0
 8003898:	f000 8087 	beq.w	80039aa <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800389c:	4b36      	ldr	r3, [pc, #216]	; (8003978 <HAL_RCC_OscConfig+0x4c4>)
 800389e:	685b      	ldr	r3, [r3, #4]
 80038a0:	f003 030c 	and.w	r3, r3, #12
 80038a4:	2b08      	cmp	r3, #8
 80038a6:	d061      	beq.n	800396c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	69db      	ldr	r3, [r3, #28]
 80038ac:	2b02      	cmp	r3, #2
 80038ae:	d146      	bne.n	800393e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038b0:	4b33      	ldr	r3, [pc, #204]	; (8003980 <HAL_RCC_OscConfig+0x4cc>)
 80038b2:	2200      	movs	r2, #0
 80038b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038b6:	f7fe fbcd 	bl	8002054 <HAL_GetTick>
 80038ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80038bc:	e008      	b.n	80038d0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038be:	f7fe fbc9 	bl	8002054 <HAL_GetTick>
 80038c2:	4602      	mov	r2, r0
 80038c4:	693b      	ldr	r3, [r7, #16]
 80038c6:	1ad3      	subs	r3, r2, r3
 80038c8:	2b02      	cmp	r3, #2
 80038ca:	d901      	bls.n	80038d0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80038cc:	2303      	movs	r3, #3
 80038ce:	e06d      	b.n	80039ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80038d0:	4b29      	ldr	r3, [pc, #164]	; (8003978 <HAL_RCC_OscConfig+0x4c4>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d1f0      	bne.n	80038be <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6a1b      	ldr	r3, [r3, #32]
 80038e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038e4:	d108      	bne.n	80038f8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80038e6:	4b24      	ldr	r3, [pc, #144]	; (8003978 <HAL_RCC_OscConfig+0x4c4>)
 80038e8:	685b      	ldr	r3, [r3, #4]
 80038ea:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	689b      	ldr	r3, [r3, #8]
 80038f2:	4921      	ldr	r1, [pc, #132]	; (8003978 <HAL_RCC_OscConfig+0x4c4>)
 80038f4:	4313      	orrs	r3, r2
 80038f6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80038f8:	4b1f      	ldr	r3, [pc, #124]	; (8003978 <HAL_RCC_OscConfig+0x4c4>)
 80038fa:	685b      	ldr	r3, [r3, #4]
 80038fc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6a19      	ldr	r1, [r3, #32]
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003908:	430b      	orrs	r3, r1
 800390a:	491b      	ldr	r1, [pc, #108]	; (8003978 <HAL_RCC_OscConfig+0x4c4>)
 800390c:	4313      	orrs	r3, r2
 800390e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003910:	4b1b      	ldr	r3, [pc, #108]	; (8003980 <HAL_RCC_OscConfig+0x4cc>)
 8003912:	2201      	movs	r2, #1
 8003914:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003916:	f7fe fb9d 	bl	8002054 <HAL_GetTick>
 800391a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800391c:	e008      	b.n	8003930 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800391e:	f7fe fb99 	bl	8002054 <HAL_GetTick>
 8003922:	4602      	mov	r2, r0
 8003924:	693b      	ldr	r3, [r7, #16]
 8003926:	1ad3      	subs	r3, r2, r3
 8003928:	2b02      	cmp	r3, #2
 800392a:	d901      	bls.n	8003930 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800392c:	2303      	movs	r3, #3
 800392e:	e03d      	b.n	80039ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003930:	4b11      	ldr	r3, [pc, #68]	; (8003978 <HAL_RCC_OscConfig+0x4c4>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003938:	2b00      	cmp	r3, #0
 800393a:	d0f0      	beq.n	800391e <HAL_RCC_OscConfig+0x46a>
 800393c:	e035      	b.n	80039aa <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800393e:	4b10      	ldr	r3, [pc, #64]	; (8003980 <HAL_RCC_OscConfig+0x4cc>)
 8003940:	2200      	movs	r2, #0
 8003942:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003944:	f7fe fb86 	bl	8002054 <HAL_GetTick>
 8003948:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800394a:	e008      	b.n	800395e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800394c:	f7fe fb82 	bl	8002054 <HAL_GetTick>
 8003950:	4602      	mov	r2, r0
 8003952:	693b      	ldr	r3, [r7, #16]
 8003954:	1ad3      	subs	r3, r2, r3
 8003956:	2b02      	cmp	r3, #2
 8003958:	d901      	bls.n	800395e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800395a:	2303      	movs	r3, #3
 800395c:	e026      	b.n	80039ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800395e:	4b06      	ldr	r3, [pc, #24]	; (8003978 <HAL_RCC_OscConfig+0x4c4>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003966:	2b00      	cmp	r3, #0
 8003968:	d1f0      	bne.n	800394c <HAL_RCC_OscConfig+0x498>
 800396a:	e01e      	b.n	80039aa <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	69db      	ldr	r3, [r3, #28]
 8003970:	2b01      	cmp	r3, #1
 8003972:	d107      	bne.n	8003984 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003974:	2301      	movs	r3, #1
 8003976:	e019      	b.n	80039ac <HAL_RCC_OscConfig+0x4f8>
 8003978:	40021000 	.word	0x40021000
 800397c:	40007000 	.word	0x40007000
 8003980:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003984:	4b0b      	ldr	r3, [pc, #44]	; (80039b4 <HAL_RCC_OscConfig+0x500>)
 8003986:	685b      	ldr	r3, [r3, #4]
 8003988:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6a1b      	ldr	r3, [r3, #32]
 8003994:	429a      	cmp	r2, r3
 8003996:	d106      	bne.n	80039a6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039a2:	429a      	cmp	r2, r3
 80039a4:	d001      	beq.n	80039aa <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80039a6:	2301      	movs	r3, #1
 80039a8:	e000      	b.n	80039ac <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80039aa:	2300      	movs	r3, #0
}
 80039ac:	4618      	mov	r0, r3
 80039ae:	3718      	adds	r7, #24
 80039b0:	46bd      	mov	sp, r7
 80039b2:	bd80      	pop	{r7, pc}
 80039b4:	40021000 	.word	0x40021000

080039b8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b084      	sub	sp, #16
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
 80039c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d101      	bne.n	80039cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80039c8:	2301      	movs	r3, #1
 80039ca:	e0d0      	b.n	8003b6e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80039cc:	4b6a      	ldr	r3, [pc, #424]	; (8003b78 <HAL_RCC_ClockConfig+0x1c0>)
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f003 0307 	and.w	r3, r3, #7
 80039d4:	683a      	ldr	r2, [r7, #0]
 80039d6:	429a      	cmp	r2, r3
 80039d8:	d910      	bls.n	80039fc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039da:	4b67      	ldr	r3, [pc, #412]	; (8003b78 <HAL_RCC_ClockConfig+0x1c0>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f023 0207 	bic.w	r2, r3, #7
 80039e2:	4965      	ldr	r1, [pc, #404]	; (8003b78 <HAL_RCC_ClockConfig+0x1c0>)
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	4313      	orrs	r3, r2
 80039e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80039ea:	4b63      	ldr	r3, [pc, #396]	; (8003b78 <HAL_RCC_ClockConfig+0x1c0>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f003 0307 	and.w	r3, r3, #7
 80039f2:	683a      	ldr	r2, [r7, #0]
 80039f4:	429a      	cmp	r2, r3
 80039f6:	d001      	beq.n	80039fc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80039f8:	2301      	movs	r3, #1
 80039fa:	e0b8      	b.n	8003b6e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f003 0302 	and.w	r3, r3, #2
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d020      	beq.n	8003a4a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f003 0304 	and.w	r3, r3, #4
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d005      	beq.n	8003a20 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a14:	4b59      	ldr	r3, [pc, #356]	; (8003b7c <HAL_RCC_ClockConfig+0x1c4>)
 8003a16:	685b      	ldr	r3, [r3, #4]
 8003a18:	4a58      	ldr	r2, [pc, #352]	; (8003b7c <HAL_RCC_ClockConfig+0x1c4>)
 8003a1a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003a1e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f003 0308 	and.w	r3, r3, #8
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d005      	beq.n	8003a38 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003a2c:	4b53      	ldr	r3, [pc, #332]	; (8003b7c <HAL_RCC_ClockConfig+0x1c4>)
 8003a2e:	685b      	ldr	r3, [r3, #4]
 8003a30:	4a52      	ldr	r2, [pc, #328]	; (8003b7c <HAL_RCC_ClockConfig+0x1c4>)
 8003a32:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003a36:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a38:	4b50      	ldr	r3, [pc, #320]	; (8003b7c <HAL_RCC_ClockConfig+0x1c4>)
 8003a3a:	685b      	ldr	r3, [r3, #4]
 8003a3c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	689b      	ldr	r3, [r3, #8]
 8003a44:	494d      	ldr	r1, [pc, #308]	; (8003b7c <HAL_RCC_ClockConfig+0x1c4>)
 8003a46:	4313      	orrs	r3, r2
 8003a48:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f003 0301 	and.w	r3, r3, #1
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d040      	beq.n	8003ad8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	685b      	ldr	r3, [r3, #4]
 8003a5a:	2b01      	cmp	r3, #1
 8003a5c:	d107      	bne.n	8003a6e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a5e:	4b47      	ldr	r3, [pc, #284]	; (8003b7c <HAL_RCC_ClockConfig+0x1c4>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d115      	bne.n	8003a96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	e07f      	b.n	8003b6e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	685b      	ldr	r3, [r3, #4]
 8003a72:	2b02      	cmp	r3, #2
 8003a74:	d107      	bne.n	8003a86 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a76:	4b41      	ldr	r3, [pc, #260]	; (8003b7c <HAL_RCC_ClockConfig+0x1c4>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d109      	bne.n	8003a96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a82:	2301      	movs	r3, #1
 8003a84:	e073      	b.n	8003b6e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a86:	4b3d      	ldr	r3, [pc, #244]	; (8003b7c <HAL_RCC_ClockConfig+0x1c4>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f003 0302 	and.w	r3, r3, #2
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d101      	bne.n	8003a96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a92:	2301      	movs	r3, #1
 8003a94:	e06b      	b.n	8003b6e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003a96:	4b39      	ldr	r3, [pc, #228]	; (8003b7c <HAL_RCC_ClockConfig+0x1c4>)
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	f023 0203 	bic.w	r2, r3, #3
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	685b      	ldr	r3, [r3, #4]
 8003aa2:	4936      	ldr	r1, [pc, #216]	; (8003b7c <HAL_RCC_ClockConfig+0x1c4>)
 8003aa4:	4313      	orrs	r3, r2
 8003aa6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003aa8:	f7fe fad4 	bl	8002054 <HAL_GetTick>
 8003aac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003aae:	e00a      	b.n	8003ac6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ab0:	f7fe fad0 	bl	8002054 <HAL_GetTick>
 8003ab4:	4602      	mov	r2, r0
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	1ad3      	subs	r3, r2, r3
 8003aba:	f241 3288 	movw	r2, #5000	; 0x1388
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d901      	bls.n	8003ac6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003ac2:	2303      	movs	r3, #3
 8003ac4:	e053      	b.n	8003b6e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ac6:	4b2d      	ldr	r3, [pc, #180]	; (8003b7c <HAL_RCC_ClockConfig+0x1c4>)
 8003ac8:	685b      	ldr	r3, [r3, #4]
 8003aca:	f003 020c 	and.w	r2, r3, #12
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	685b      	ldr	r3, [r3, #4]
 8003ad2:	009b      	lsls	r3, r3, #2
 8003ad4:	429a      	cmp	r2, r3
 8003ad6:	d1eb      	bne.n	8003ab0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003ad8:	4b27      	ldr	r3, [pc, #156]	; (8003b78 <HAL_RCC_ClockConfig+0x1c0>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f003 0307 	and.w	r3, r3, #7
 8003ae0:	683a      	ldr	r2, [r7, #0]
 8003ae2:	429a      	cmp	r2, r3
 8003ae4:	d210      	bcs.n	8003b08 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ae6:	4b24      	ldr	r3, [pc, #144]	; (8003b78 <HAL_RCC_ClockConfig+0x1c0>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f023 0207 	bic.w	r2, r3, #7
 8003aee:	4922      	ldr	r1, [pc, #136]	; (8003b78 <HAL_RCC_ClockConfig+0x1c0>)
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	4313      	orrs	r3, r2
 8003af4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003af6:	4b20      	ldr	r3, [pc, #128]	; (8003b78 <HAL_RCC_ClockConfig+0x1c0>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f003 0307 	and.w	r3, r3, #7
 8003afe:	683a      	ldr	r2, [r7, #0]
 8003b00:	429a      	cmp	r2, r3
 8003b02:	d001      	beq.n	8003b08 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003b04:	2301      	movs	r3, #1
 8003b06:	e032      	b.n	8003b6e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f003 0304 	and.w	r3, r3, #4
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d008      	beq.n	8003b26 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b14:	4b19      	ldr	r3, [pc, #100]	; (8003b7c <HAL_RCC_ClockConfig+0x1c4>)
 8003b16:	685b      	ldr	r3, [r3, #4]
 8003b18:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	68db      	ldr	r3, [r3, #12]
 8003b20:	4916      	ldr	r1, [pc, #88]	; (8003b7c <HAL_RCC_ClockConfig+0x1c4>)
 8003b22:	4313      	orrs	r3, r2
 8003b24:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f003 0308 	and.w	r3, r3, #8
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d009      	beq.n	8003b46 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003b32:	4b12      	ldr	r3, [pc, #72]	; (8003b7c <HAL_RCC_ClockConfig+0x1c4>)
 8003b34:	685b      	ldr	r3, [r3, #4]
 8003b36:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	691b      	ldr	r3, [r3, #16]
 8003b3e:	00db      	lsls	r3, r3, #3
 8003b40:	490e      	ldr	r1, [pc, #56]	; (8003b7c <HAL_RCC_ClockConfig+0x1c4>)
 8003b42:	4313      	orrs	r3, r2
 8003b44:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003b46:	f000 f821 	bl	8003b8c <HAL_RCC_GetSysClockFreq>
 8003b4a:	4602      	mov	r2, r0
 8003b4c:	4b0b      	ldr	r3, [pc, #44]	; (8003b7c <HAL_RCC_ClockConfig+0x1c4>)
 8003b4e:	685b      	ldr	r3, [r3, #4]
 8003b50:	091b      	lsrs	r3, r3, #4
 8003b52:	f003 030f 	and.w	r3, r3, #15
 8003b56:	490a      	ldr	r1, [pc, #40]	; (8003b80 <HAL_RCC_ClockConfig+0x1c8>)
 8003b58:	5ccb      	ldrb	r3, [r1, r3]
 8003b5a:	fa22 f303 	lsr.w	r3, r2, r3
 8003b5e:	4a09      	ldr	r2, [pc, #36]	; (8003b84 <HAL_RCC_ClockConfig+0x1cc>)
 8003b60:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003b62:	4b09      	ldr	r3, [pc, #36]	; (8003b88 <HAL_RCC_ClockConfig+0x1d0>)
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	4618      	mov	r0, r3
 8003b68:	f7fe fa32 	bl	8001fd0 <HAL_InitTick>

  return HAL_OK;
 8003b6c:	2300      	movs	r3, #0
}
 8003b6e:	4618      	mov	r0, r3
 8003b70:	3710      	adds	r7, #16
 8003b72:	46bd      	mov	sp, r7
 8003b74:	bd80      	pop	{r7, pc}
 8003b76:	bf00      	nop
 8003b78:	40022000 	.word	0x40022000
 8003b7c:	40021000 	.word	0x40021000
 8003b80:	08008754 	.word	0x08008754
 8003b84:	20000000 	.word	0x20000000
 8003b88:	20000004 	.word	0x20000004

08003b8c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b8c:	b480      	push	{r7}
 8003b8e:	b087      	sub	sp, #28
 8003b90:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003b92:	2300      	movs	r3, #0
 8003b94:	60fb      	str	r3, [r7, #12]
 8003b96:	2300      	movs	r3, #0
 8003b98:	60bb      	str	r3, [r7, #8]
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	617b      	str	r3, [r7, #20]
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003ba6:	4b1e      	ldr	r3, [pc, #120]	; (8003c20 <HAL_RCC_GetSysClockFreq+0x94>)
 8003ba8:	685b      	ldr	r3, [r3, #4]
 8003baa:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	f003 030c 	and.w	r3, r3, #12
 8003bb2:	2b04      	cmp	r3, #4
 8003bb4:	d002      	beq.n	8003bbc <HAL_RCC_GetSysClockFreq+0x30>
 8003bb6:	2b08      	cmp	r3, #8
 8003bb8:	d003      	beq.n	8003bc2 <HAL_RCC_GetSysClockFreq+0x36>
 8003bba:	e027      	b.n	8003c0c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003bbc:	4b19      	ldr	r3, [pc, #100]	; (8003c24 <HAL_RCC_GetSysClockFreq+0x98>)
 8003bbe:	613b      	str	r3, [r7, #16]
      break;
 8003bc0:	e027      	b.n	8003c12 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	0c9b      	lsrs	r3, r3, #18
 8003bc6:	f003 030f 	and.w	r3, r3, #15
 8003bca:	4a17      	ldr	r2, [pc, #92]	; (8003c28 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003bcc:	5cd3      	ldrb	r3, [r2, r3]
 8003bce:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d010      	beq.n	8003bfc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003bda:	4b11      	ldr	r3, [pc, #68]	; (8003c20 <HAL_RCC_GetSysClockFreq+0x94>)
 8003bdc:	685b      	ldr	r3, [r3, #4]
 8003bde:	0c5b      	lsrs	r3, r3, #17
 8003be0:	f003 0301 	and.w	r3, r3, #1
 8003be4:	4a11      	ldr	r2, [pc, #68]	; (8003c2c <HAL_RCC_GetSysClockFreq+0xa0>)
 8003be6:	5cd3      	ldrb	r3, [r2, r3]
 8003be8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	4a0d      	ldr	r2, [pc, #52]	; (8003c24 <HAL_RCC_GetSysClockFreq+0x98>)
 8003bee:	fb03 f202 	mul.w	r2, r3, r2
 8003bf2:	68bb      	ldr	r3, [r7, #8]
 8003bf4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bf8:	617b      	str	r3, [r7, #20]
 8003bfa:	e004      	b.n	8003c06 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	4a0c      	ldr	r2, [pc, #48]	; (8003c30 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003c00:	fb02 f303 	mul.w	r3, r2, r3
 8003c04:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003c06:	697b      	ldr	r3, [r7, #20]
 8003c08:	613b      	str	r3, [r7, #16]
      break;
 8003c0a:	e002      	b.n	8003c12 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003c0c:	4b05      	ldr	r3, [pc, #20]	; (8003c24 <HAL_RCC_GetSysClockFreq+0x98>)
 8003c0e:	613b      	str	r3, [r7, #16]
      break;
 8003c10:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003c12:	693b      	ldr	r3, [r7, #16]
}
 8003c14:	4618      	mov	r0, r3
 8003c16:	371c      	adds	r7, #28
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	bc80      	pop	{r7}
 8003c1c:	4770      	bx	lr
 8003c1e:	bf00      	nop
 8003c20:	40021000 	.word	0x40021000
 8003c24:	007a1200 	.word	0x007a1200
 8003c28:	0800876c 	.word	0x0800876c
 8003c2c:	0800877c 	.word	0x0800877c
 8003c30:	003d0900 	.word	0x003d0900

08003c34 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c34:	b480      	push	{r7}
 8003c36:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c38:	4b02      	ldr	r3, [pc, #8]	; (8003c44 <HAL_RCC_GetHCLKFreq+0x10>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
}
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	bc80      	pop	{r7}
 8003c42:	4770      	bx	lr
 8003c44:	20000000 	.word	0x20000000

08003c48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003c4c:	f7ff fff2 	bl	8003c34 <HAL_RCC_GetHCLKFreq>
 8003c50:	4602      	mov	r2, r0
 8003c52:	4b05      	ldr	r3, [pc, #20]	; (8003c68 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003c54:	685b      	ldr	r3, [r3, #4]
 8003c56:	0a1b      	lsrs	r3, r3, #8
 8003c58:	f003 0307 	and.w	r3, r3, #7
 8003c5c:	4903      	ldr	r1, [pc, #12]	; (8003c6c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003c5e:	5ccb      	ldrb	r3, [r1, r3]
 8003c60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c64:	4618      	mov	r0, r3
 8003c66:	bd80      	pop	{r7, pc}
 8003c68:	40021000 	.word	0x40021000
 8003c6c:	08008764 	.word	0x08008764

08003c70 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003c74:	f7ff ffde 	bl	8003c34 <HAL_RCC_GetHCLKFreq>
 8003c78:	4602      	mov	r2, r0
 8003c7a:	4b05      	ldr	r3, [pc, #20]	; (8003c90 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003c7c:	685b      	ldr	r3, [r3, #4]
 8003c7e:	0adb      	lsrs	r3, r3, #11
 8003c80:	f003 0307 	and.w	r3, r3, #7
 8003c84:	4903      	ldr	r1, [pc, #12]	; (8003c94 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003c86:	5ccb      	ldrb	r3, [r1, r3]
 8003c88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	bd80      	pop	{r7, pc}
 8003c90:	40021000 	.word	0x40021000
 8003c94:	08008764 	.word	0x08008764

08003c98 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003c98:	b480      	push	{r7}
 8003c9a:	b085      	sub	sp, #20
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003ca0:	4b0a      	ldr	r3, [pc, #40]	; (8003ccc <RCC_Delay+0x34>)
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	4a0a      	ldr	r2, [pc, #40]	; (8003cd0 <RCC_Delay+0x38>)
 8003ca6:	fba2 2303 	umull	r2, r3, r2, r3
 8003caa:	0a5b      	lsrs	r3, r3, #9
 8003cac:	687a      	ldr	r2, [r7, #4]
 8003cae:	fb02 f303 	mul.w	r3, r2, r3
 8003cb2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003cb4:	bf00      	nop
  }
  while (Delay --);
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	1e5a      	subs	r2, r3, #1
 8003cba:	60fa      	str	r2, [r7, #12]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d1f9      	bne.n	8003cb4 <RCC_Delay+0x1c>
}
 8003cc0:	bf00      	nop
 8003cc2:	bf00      	nop
 8003cc4:	3714      	adds	r7, #20
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	bc80      	pop	{r7}
 8003cca:	4770      	bx	lr
 8003ccc:	20000000 	.word	0x20000000
 8003cd0:	10624dd3 	.word	0x10624dd3

08003cd4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b082      	sub	sp, #8
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d101      	bne.n	8003ce6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003ce2:	2301      	movs	r3, #1
 8003ce4:	e076      	b.n	8003dd4 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d108      	bne.n	8003d00 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	685b      	ldr	r3, [r3, #4]
 8003cf2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003cf6:	d009      	beq.n	8003d0c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	61da      	str	r2, [r3, #28]
 8003cfe:	e005      	b.n	8003d0c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2200      	movs	r2, #0
 8003d04:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	2200      	movs	r2, #0
 8003d0a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2200      	movs	r2, #0
 8003d10:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003d18:	b2db      	uxtb	r3, r3
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d106      	bne.n	8003d2c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	2200      	movs	r2, #0
 8003d22:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003d26:	6878      	ldr	r0, [r7, #4]
 8003d28:	f7fd ff30 	bl	8001b8c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2202      	movs	r2, #2
 8003d30:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	681a      	ldr	r2, [r3, #0]
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d42:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	685b      	ldr	r3, [r3, #4]
 8003d48:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	689b      	ldr	r3, [r3, #8]
 8003d50:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003d54:	431a      	orrs	r2, r3
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	68db      	ldr	r3, [r3, #12]
 8003d5a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d5e:	431a      	orrs	r2, r3
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	691b      	ldr	r3, [r3, #16]
 8003d64:	f003 0302 	and.w	r3, r3, #2
 8003d68:	431a      	orrs	r2, r3
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	695b      	ldr	r3, [r3, #20]
 8003d6e:	f003 0301 	and.w	r3, r3, #1
 8003d72:	431a      	orrs	r2, r3
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	699b      	ldr	r3, [r3, #24]
 8003d78:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d7c:	431a      	orrs	r2, r3
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	69db      	ldr	r3, [r3, #28]
 8003d82:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003d86:	431a      	orrs	r2, r3
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6a1b      	ldr	r3, [r3, #32]
 8003d8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d90:	ea42 0103 	orr.w	r1, r2, r3
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d98:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	430a      	orrs	r2, r1
 8003da2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	699b      	ldr	r3, [r3, #24]
 8003da8:	0c1a      	lsrs	r2, r3, #16
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f002 0204 	and.w	r2, r2, #4
 8003db2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	69da      	ldr	r2, [r3, #28]
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003dc2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	2201      	movs	r2, #1
 8003dce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003dd2:	2300      	movs	r3, #0
}
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	3708      	adds	r7, #8
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	bd80      	pop	{r7, pc}

08003ddc <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b08c      	sub	sp, #48	; 0x30
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	60f8      	str	r0, [r7, #12]
 8003de4:	60b9      	str	r1, [r7, #8]
 8003de6:	607a      	str	r2, [r7, #4]
 8003de8:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003dea:	2301      	movs	r3, #1
 8003dec:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003dee:	2300      	movs	r3, #0
 8003df0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003dfa:	2b01      	cmp	r3, #1
 8003dfc:	d101      	bne.n	8003e02 <HAL_SPI_TransmitReceive+0x26>
 8003dfe:	2302      	movs	r3, #2
 8003e00:	e198      	b.n	8004134 <HAL_SPI_TransmitReceive+0x358>
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	2201      	movs	r2, #1
 8003e06:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003e0a:	f7fe f923 	bl	8002054 <HAL_GetTick>
 8003e0e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003e16:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	685b      	ldr	r3, [r3, #4]
 8003e1e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003e20:	887b      	ldrh	r3, [r7, #2]
 8003e22:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003e24:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003e28:	2b01      	cmp	r3, #1
 8003e2a:	d00f      	beq.n	8003e4c <HAL_SPI_TransmitReceive+0x70>
 8003e2c:	69fb      	ldr	r3, [r7, #28]
 8003e2e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003e32:	d107      	bne.n	8003e44 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	689b      	ldr	r3, [r3, #8]
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d103      	bne.n	8003e44 <HAL_SPI_TransmitReceive+0x68>
 8003e3c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003e40:	2b04      	cmp	r3, #4
 8003e42:	d003      	beq.n	8003e4c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003e44:	2302      	movs	r3, #2
 8003e46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003e4a:	e16d      	b.n	8004128 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003e4c:	68bb      	ldr	r3, [r7, #8]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d005      	beq.n	8003e5e <HAL_SPI_TransmitReceive+0x82>
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d002      	beq.n	8003e5e <HAL_SPI_TransmitReceive+0x82>
 8003e58:	887b      	ldrh	r3, [r7, #2]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d103      	bne.n	8003e66 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003e5e:	2301      	movs	r3, #1
 8003e60:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003e64:	e160      	b.n	8004128 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003e6c:	b2db      	uxtb	r3, r3
 8003e6e:	2b04      	cmp	r3, #4
 8003e70:	d003      	beq.n	8003e7a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	2205      	movs	r2, #5
 8003e76:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	687a      	ldr	r2, [r7, #4]
 8003e84:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	887a      	ldrh	r2, [r7, #2]
 8003e8a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	887a      	ldrh	r2, [r7, #2]
 8003e90:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	68ba      	ldr	r2, [r7, #8]
 8003e96:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	887a      	ldrh	r2, [r7, #2]
 8003e9c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	887a      	ldrh	r2, [r7, #2]
 8003ea2:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	2200      	movs	r2, #0
 8003eae:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003eba:	2b40      	cmp	r3, #64	; 0x40
 8003ebc:	d007      	beq.n	8003ece <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	681a      	ldr	r2, [r3, #0]
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003ecc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	68db      	ldr	r3, [r3, #12]
 8003ed2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ed6:	d17c      	bne.n	8003fd2 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	685b      	ldr	r3, [r3, #4]
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d002      	beq.n	8003ee6 <HAL_SPI_TransmitReceive+0x10a>
 8003ee0:	8b7b      	ldrh	r3, [r7, #26]
 8003ee2:	2b01      	cmp	r3, #1
 8003ee4:	d16a      	bne.n	8003fbc <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eea:	881a      	ldrh	r2, [r3, #0]
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ef6:	1c9a      	adds	r2, r3, #2
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f00:	b29b      	uxth	r3, r3
 8003f02:	3b01      	subs	r3, #1
 8003f04:	b29a      	uxth	r2, r3
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003f0a:	e057      	b.n	8003fbc <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	689b      	ldr	r3, [r3, #8]
 8003f12:	f003 0302 	and.w	r3, r3, #2
 8003f16:	2b02      	cmp	r3, #2
 8003f18:	d11b      	bne.n	8003f52 <HAL_SPI_TransmitReceive+0x176>
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f1e:	b29b      	uxth	r3, r3
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d016      	beq.n	8003f52 <HAL_SPI_TransmitReceive+0x176>
 8003f24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f26:	2b01      	cmp	r3, #1
 8003f28:	d113      	bne.n	8003f52 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f2e:	881a      	ldrh	r2, [r3, #0]
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f3a:	1c9a      	adds	r2, r3, #2
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f44:	b29b      	uxth	r3, r3
 8003f46:	3b01      	subs	r3, #1
 8003f48:	b29a      	uxth	r2, r3
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003f4e:	2300      	movs	r3, #0
 8003f50:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	689b      	ldr	r3, [r3, #8]
 8003f58:	f003 0301 	and.w	r3, r3, #1
 8003f5c:	2b01      	cmp	r3, #1
 8003f5e:	d119      	bne.n	8003f94 <HAL_SPI_TransmitReceive+0x1b8>
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f64:	b29b      	uxth	r3, r3
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d014      	beq.n	8003f94 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	68da      	ldr	r2, [r3, #12]
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f74:	b292      	uxth	r2, r2
 8003f76:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f7c:	1c9a      	adds	r2, r3, #2
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f86:	b29b      	uxth	r3, r3
 8003f88:	3b01      	subs	r3, #1
 8003f8a:	b29a      	uxth	r2, r3
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003f90:	2301      	movs	r3, #1
 8003f92:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003f94:	f7fe f85e 	bl	8002054 <HAL_GetTick>
 8003f98:	4602      	mov	r2, r0
 8003f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f9c:	1ad3      	subs	r3, r2, r3
 8003f9e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003fa0:	429a      	cmp	r2, r3
 8003fa2:	d80b      	bhi.n	8003fbc <HAL_SPI_TransmitReceive+0x1e0>
 8003fa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fa6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003faa:	d007      	beq.n	8003fbc <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8003fac:	2303      	movs	r3, #3
 8003fae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	2201      	movs	r2, #1
 8003fb6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8003fba:	e0b5      	b.n	8004128 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003fc0:	b29b      	uxth	r3, r3
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d1a2      	bne.n	8003f0c <HAL_SPI_TransmitReceive+0x130>
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003fca:	b29b      	uxth	r3, r3
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d19d      	bne.n	8003f0c <HAL_SPI_TransmitReceive+0x130>
 8003fd0:	e080      	b.n	80040d4 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	685b      	ldr	r3, [r3, #4]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d002      	beq.n	8003fe0 <HAL_SPI_TransmitReceive+0x204>
 8003fda:	8b7b      	ldrh	r3, [r7, #26]
 8003fdc:	2b01      	cmp	r3, #1
 8003fde:	d16f      	bne.n	80040c0 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	330c      	adds	r3, #12
 8003fea:	7812      	ldrb	r2, [r2, #0]
 8003fec:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ff2:	1c5a      	adds	r2, r3, #1
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ffc:	b29b      	uxth	r3, r3
 8003ffe:	3b01      	subs	r3, #1
 8004000:	b29a      	uxth	r2, r3
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004006:	e05b      	b.n	80040c0 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	689b      	ldr	r3, [r3, #8]
 800400e:	f003 0302 	and.w	r3, r3, #2
 8004012:	2b02      	cmp	r3, #2
 8004014:	d11c      	bne.n	8004050 <HAL_SPI_TransmitReceive+0x274>
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800401a:	b29b      	uxth	r3, r3
 800401c:	2b00      	cmp	r3, #0
 800401e:	d017      	beq.n	8004050 <HAL_SPI_TransmitReceive+0x274>
 8004020:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004022:	2b01      	cmp	r3, #1
 8004024:	d114      	bne.n	8004050 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	330c      	adds	r3, #12
 8004030:	7812      	ldrb	r2, [r2, #0]
 8004032:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004038:	1c5a      	adds	r2, r3, #1
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004042:	b29b      	uxth	r3, r3
 8004044:	3b01      	subs	r3, #1
 8004046:	b29a      	uxth	r2, r3
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800404c:	2300      	movs	r3, #0
 800404e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	689b      	ldr	r3, [r3, #8]
 8004056:	f003 0301 	and.w	r3, r3, #1
 800405a:	2b01      	cmp	r3, #1
 800405c:	d119      	bne.n	8004092 <HAL_SPI_TransmitReceive+0x2b6>
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004062:	b29b      	uxth	r3, r3
 8004064:	2b00      	cmp	r3, #0
 8004066:	d014      	beq.n	8004092 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	68da      	ldr	r2, [r3, #12]
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004072:	b2d2      	uxtb	r2, r2
 8004074:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800407a:	1c5a      	adds	r2, r3, #1
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004084:	b29b      	uxth	r3, r3
 8004086:	3b01      	subs	r3, #1
 8004088:	b29a      	uxth	r2, r3
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800408e:	2301      	movs	r3, #1
 8004090:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004092:	f7fd ffdf 	bl	8002054 <HAL_GetTick>
 8004096:	4602      	mov	r2, r0
 8004098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800409a:	1ad3      	subs	r3, r2, r3
 800409c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800409e:	429a      	cmp	r2, r3
 80040a0:	d803      	bhi.n	80040aa <HAL_SPI_TransmitReceive+0x2ce>
 80040a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040a4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80040a8:	d102      	bne.n	80040b0 <HAL_SPI_TransmitReceive+0x2d4>
 80040aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d107      	bne.n	80040c0 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 80040b0:	2303      	movs	r3, #3
 80040b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	2201      	movs	r2, #1
 80040ba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 80040be:	e033      	b.n	8004128 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80040c4:	b29b      	uxth	r3, r3
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d19e      	bne.n	8004008 <HAL_SPI_TransmitReceive+0x22c>
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80040ce:	b29b      	uxth	r3, r3
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d199      	bne.n	8004008 <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80040d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040d6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80040d8:	68f8      	ldr	r0, [r7, #12]
 80040da:	f000 f8b7 	bl	800424c <SPI_EndRxTxTransaction>
 80040de:	4603      	mov	r3, r0
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d006      	beq.n	80040f2 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 80040e4:	2301      	movs	r3, #1
 80040e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	2220      	movs	r2, #32
 80040ee:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80040f0:	e01a      	b.n	8004128 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	689b      	ldr	r3, [r3, #8]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d10a      	bne.n	8004110 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80040fa:	2300      	movs	r3, #0
 80040fc:	617b      	str	r3, [r7, #20]
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	68db      	ldr	r3, [r3, #12]
 8004104:	617b      	str	r3, [r7, #20]
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	689b      	ldr	r3, [r3, #8]
 800410c:	617b      	str	r3, [r7, #20]
 800410e:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004114:	2b00      	cmp	r3, #0
 8004116:	d003      	beq.n	8004120 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8004118:	2301      	movs	r3, #1
 800411a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800411e:	e003      	b.n	8004128 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	2201      	movs	r2, #1
 8004124:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	2200      	movs	r2, #0
 800412c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004130:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004134:	4618      	mov	r0, r3
 8004136:	3730      	adds	r7, #48	; 0x30
 8004138:	46bd      	mov	sp, r7
 800413a:	bd80      	pop	{r7, pc}

0800413c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800413c:	b580      	push	{r7, lr}
 800413e:	b088      	sub	sp, #32
 8004140:	af00      	add	r7, sp, #0
 8004142:	60f8      	str	r0, [r7, #12]
 8004144:	60b9      	str	r1, [r7, #8]
 8004146:	603b      	str	r3, [r7, #0]
 8004148:	4613      	mov	r3, r2
 800414a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800414c:	f7fd ff82 	bl	8002054 <HAL_GetTick>
 8004150:	4602      	mov	r2, r0
 8004152:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004154:	1a9b      	subs	r3, r3, r2
 8004156:	683a      	ldr	r2, [r7, #0]
 8004158:	4413      	add	r3, r2
 800415a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800415c:	f7fd ff7a 	bl	8002054 <HAL_GetTick>
 8004160:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004162:	4b39      	ldr	r3, [pc, #228]	; (8004248 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	015b      	lsls	r3, r3, #5
 8004168:	0d1b      	lsrs	r3, r3, #20
 800416a:	69fa      	ldr	r2, [r7, #28]
 800416c:	fb02 f303 	mul.w	r3, r2, r3
 8004170:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004172:	e054      	b.n	800421e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800417a:	d050      	beq.n	800421e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800417c:	f7fd ff6a 	bl	8002054 <HAL_GetTick>
 8004180:	4602      	mov	r2, r0
 8004182:	69bb      	ldr	r3, [r7, #24]
 8004184:	1ad3      	subs	r3, r2, r3
 8004186:	69fa      	ldr	r2, [r7, #28]
 8004188:	429a      	cmp	r2, r3
 800418a:	d902      	bls.n	8004192 <SPI_WaitFlagStateUntilTimeout+0x56>
 800418c:	69fb      	ldr	r3, [r7, #28]
 800418e:	2b00      	cmp	r3, #0
 8004190:	d13d      	bne.n	800420e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	685a      	ldr	r2, [r3, #4]
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80041a0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	685b      	ldr	r3, [r3, #4]
 80041a6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80041aa:	d111      	bne.n	80041d0 <SPI_WaitFlagStateUntilTimeout+0x94>
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	689b      	ldr	r3, [r3, #8]
 80041b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80041b4:	d004      	beq.n	80041c0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	689b      	ldr	r3, [r3, #8]
 80041ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041be:	d107      	bne.n	80041d0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	681a      	ldr	r2, [r3, #0]
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80041ce:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80041d8:	d10f      	bne.n	80041fa <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	681a      	ldr	r2, [r3, #0]
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80041e8:	601a      	str	r2, [r3, #0]
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	681a      	ldr	r2, [r3, #0]
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80041f8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	2201      	movs	r2, #1
 80041fe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	2200      	movs	r2, #0
 8004206:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800420a:	2303      	movs	r3, #3
 800420c:	e017      	b.n	800423e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800420e:	697b      	ldr	r3, [r7, #20]
 8004210:	2b00      	cmp	r3, #0
 8004212:	d101      	bne.n	8004218 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004214:	2300      	movs	r3, #0
 8004216:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004218:	697b      	ldr	r3, [r7, #20]
 800421a:	3b01      	subs	r3, #1
 800421c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	689a      	ldr	r2, [r3, #8]
 8004224:	68bb      	ldr	r3, [r7, #8]
 8004226:	4013      	ands	r3, r2
 8004228:	68ba      	ldr	r2, [r7, #8]
 800422a:	429a      	cmp	r2, r3
 800422c:	bf0c      	ite	eq
 800422e:	2301      	moveq	r3, #1
 8004230:	2300      	movne	r3, #0
 8004232:	b2db      	uxtb	r3, r3
 8004234:	461a      	mov	r2, r3
 8004236:	79fb      	ldrb	r3, [r7, #7]
 8004238:	429a      	cmp	r2, r3
 800423a:	d19b      	bne.n	8004174 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800423c:	2300      	movs	r3, #0
}
 800423e:	4618      	mov	r0, r3
 8004240:	3720      	adds	r7, #32
 8004242:	46bd      	mov	sp, r7
 8004244:	bd80      	pop	{r7, pc}
 8004246:	bf00      	nop
 8004248:	20000000 	.word	0x20000000

0800424c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800424c:	b580      	push	{r7, lr}
 800424e:	b086      	sub	sp, #24
 8004250:	af02      	add	r7, sp, #8
 8004252:	60f8      	str	r0, [r7, #12]
 8004254:	60b9      	str	r1, [r7, #8]
 8004256:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	9300      	str	r3, [sp, #0]
 800425c:	68bb      	ldr	r3, [r7, #8]
 800425e:	2200      	movs	r2, #0
 8004260:	2180      	movs	r1, #128	; 0x80
 8004262:	68f8      	ldr	r0, [r7, #12]
 8004264:	f7ff ff6a 	bl	800413c <SPI_WaitFlagStateUntilTimeout>
 8004268:	4603      	mov	r3, r0
 800426a:	2b00      	cmp	r3, #0
 800426c:	d007      	beq.n	800427e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004272:	f043 0220 	orr.w	r2, r3, #32
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800427a:	2303      	movs	r3, #3
 800427c:	e000      	b.n	8004280 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 800427e:	2300      	movs	r3, #0
}
 8004280:	4618      	mov	r0, r3
 8004282:	3710      	adds	r7, #16
 8004284:	46bd      	mov	sp, r7
 8004286:	bd80      	pop	{r7, pc}

08004288 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	b082      	sub	sp, #8
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2b00      	cmp	r3, #0
 8004294:	d101      	bne.n	800429a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004296:	2301      	movs	r3, #1
 8004298:	e041      	b.n	800431e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042a0:	b2db      	uxtb	r3, r3
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d106      	bne.n	80042b4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	2200      	movs	r2, #0
 80042aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80042ae:	6878      	ldr	r0, [r7, #4]
 80042b0:	f7fd fcb6 	bl	8001c20 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2202      	movs	r2, #2
 80042b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681a      	ldr	r2, [r3, #0]
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	3304      	adds	r3, #4
 80042c4:	4619      	mov	r1, r3
 80042c6:	4610      	mov	r0, r2
 80042c8:	f000 f966 	bl	8004598 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2201      	movs	r2, #1
 80042d0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2201      	movs	r2, #1
 80042d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2201      	movs	r2, #1
 80042e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2201      	movs	r2, #1
 80042e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2201      	movs	r2, #1
 80042f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2201      	movs	r2, #1
 80042f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2201      	movs	r2, #1
 8004300:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2201      	movs	r2, #1
 8004308:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2201      	movs	r2, #1
 8004310:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2201      	movs	r2, #1
 8004318:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800431c:	2300      	movs	r3, #0
}
 800431e:	4618      	mov	r0, r3
 8004320:	3708      	adds	r7, #8
 8004322:	46bd      	mov	sp, r7
 8004324:	bd80      	pop	{r7, pc}
	...

08004328 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004328:	b480      	push	{r7}
 800432a:	b085      	sub	sp, #20
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004336:	b2db      	uxtb	r3, r3
 8004338:	2b01      	cmp	r3, #1
 800433a:	d001      	beq.n	8004340 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800433c:	2301      	movs	r3, #1
 800433e:	e032      	b.n	80043a6 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2202      	movs	r2, #2
 8004344:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	4a18      	ldr	r2, [pc, #96]	; (80043b0 <HAL_TIM_Base_Start+0x88>)
 800434e:	4293      	cmp	r3, r2
 8004350:	d00e      	beq.n	8004370 <HAL_TIM_Base_Start+0x48>
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800435a:	d009      	beq.n	8004370 <HAL_TIM_Base_Start+0x48>
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	4a14      	ldr	r2, [pc, #80]	; (80043b4 <HAL_TIM_Base_Start+0x8c>)
 8004362:	4293      	cmp	r3, r2
 8004364:	d004      	beq.n	8004370 <HAL_TIM_Base_Start+0x48>
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	4a13      	ldr	r2, [pc, #76]	; (80043b8 <HAL_TIM_Base_Start+0x90>)
 800436c:	4293      	cmp	r3, r2
 800436e:	d111      	bne.n	8004394 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	689b      	ldr	r3, [r3, #8]
 8004376:	f003 0307 	and.w	r3, r3, #7
 800437a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	2b06      	cmp	r3, #6
 8004380:	d010      	beq.n	80043a4 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	681a      	ldr	r2, [r3, #0]
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f042 0201 	orr.w	r2, r2, #1
 8004390:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004392:	e007      	b.n	80043a4 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	681a      	ldr	r2, [r3, #0]
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f042 0201 	orr.w	r2, r2, #1
 80043a2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80043a4:	2300      	movs	r3, #0
}
 80043a6:	4618      	mov	r0, r3
 80043a8:	3714      	adds	r7, #20
 80043aa:	46bd      	mov	sp, r7
 80043ac:	bc80      	pop	{r7}
 80043ae:	4770      	bx	lr
 80043b0:	40012c00 	.word	0x40012c00
 80043b4:	40000400 	.word	0x40000400
 80043b8:	40000800 	.word	0x40000800

080043bc <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 80043bc:	b480      	push	{r7}
 80043be:	b083      	sub	sp, #12
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	6a1a      	ldr	r2, [r3, #32]
 80043ca:	f241 1311 	movw	r3, #4369	; 0x1111
 80043ce:	4013      	ands	r3, r2
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d10f      	bne.n	80043f4 <HAL_TIM_Base_Stop+0x38>
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	6a1a      	ldr	r2, [r3, #32]
 80043da:	f240 4344 	movw	r3, #1092	; 0x444
 80043de:	4013      	ands	r3, r2
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d107      	bne.n	80043f4 <HAL_TIM_Base_Stop+0x38>
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	681a      	ldr	r2, [r3, #0]
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f022 0201 	bic.w	r2, r2, #1
 80043f2:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2201      	movs	r2, #1
 80043f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80043fc:	2300      	movs	r3, #0
}
 80043fe:	4618      	mov	r0, r3
 8004400:	370c      	adds	r7, #12
 8004402:	46bd      	mov	sp, r7
 8004404:	bc80      	pop	{r7}
 8004406:	4770      	bx	lr

08004408 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004408:	b580      	push	{r7, lr}
 800440a:	b084      	sub	sp, #16
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
 8004410:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004412:	2300      	movs	r3, #0
 8004414:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800441c:	2b01      	cmp	r3, #1
 800441e:	d101      	bne.n	8004424 <HAL_TIM_ConfigClockSource+0x1c>
 8004420:	2302      	movs	r3, #2
 8004422:	e0b4      	b.n	800458e <HAL_TIM_ConfigClockSource+0x186>
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2201      	movs	r2, #1
 8004428:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2202      	movs	r2, #2
 8004430:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	689b      	ldr	r3, [r3, #8]
 800443a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800443c:	68bb      	ldr	r3, [r7, #8]
 800443e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004442:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004444:	68bb      	ldr	r3, [r7, #8]
 8004446:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800444a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	68ba      	ldr	r2, [r7, #8]
 8004452:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800445c:	d03e      	beq.n	80044dc <HAL_TIM_ConfigClockSource+0xd4>
 800445e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004462:	f200 8087 	bhi.w	8004574 <HAL_TIM_ConfigClockSource+0x16c>
 8004466:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800446a:	f000 8086 	beq.w	800457a <HAL_TIM_ConfigClockSource+0x172>
 800446e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004472:	d87f      	bhi.n	8004574 <HAL_TIM_ConfigClockSource+0x16c>
 8004474:	2b70      	cmp	r3, #112	; 0x70
 8004476:	d01a      	beq.n	80044ae <HAL_TIM_ConfigClockSource+0xa6>
 8004478:	2b70      	cmp	r3, #112	; 0x70
 800447a:	d87b      	bhi.n	8004574 <HAL_TIM_ConfigClockSource+0x16c>
 800447c:	2b60      	cmp	r3, #96	; 0x60
 800447e:	d050      	beq.n	8004522 <HAL_TIM_ConfigClockSource+0x11a>
 8004480:	2b60      	cmp	r3, #96	; 0x60
 8004482:	d877      	bhi.n	8004574 <HAL_TIM_ConfigClockSource+0x16c>
 8004484:	2b50      	cmp	r3, #80	; 0x50
 8004486:	d03c      	beq.n	8004502 <HAL_TIM_ConfigClockSource+0xfa>
 8004488:	2b50      	cmp	r3, #80	; 0x50
 800448a:	d873      	bhi.n	8004574 <HAL_TIM_ConfigClockSource+0x16c>
 800448c:	2b40      	cmp	r3, #64	; 0x40
 800448e:	d058      	beq.n	8004542 <HAL_TIM_ConfigClockSource+0x13a>
 8004490:	2b40      	cmp	r3, #64	; 0x40
 8004492:	d86f      	bhi.n	8004574 <HAL_TIM_ConfigClockSource+0x16c>
 8004494:	2b30      	cmp	r3, #48	; 0x30
 8004496:	d064      	beq.n	8004562 <HAL_TIM_ConfigClockSource+0x15a>
 8004498:	2b30      	cmp	r3, #48	; 0x30
 800449a:	d86b      	bhi.n	8004574 <HAL_TIM_ConfigClockSource+0x16c>
 800449c:	2b20      	cmp	r3, #32
 800449e:	d060      	beq.n	8004562 <HAL_TIM_ConfigClockSource+0x15a>
 80044a0:	2b20      	cmp	r3, #32
 80044a2:	d867      	bhi.n	8004574 <HAL_TIM_ConfigClockSource+0x16c>
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d05c      	beq.n	8004562 <HAL_TIM_ConfigClockSource+0x15a>
 80044a8:	2b10      	cmp	r3, #16
 80044aa:	d05a      	beq.n	8004562 <HAL_TIM_ConfigClockSource+0x15a>
 80044ac:	e062      	b.n	8004574 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6818      	ldr	r0, [r3, #0]
 80044b2:	683b      	ldr	r3, [r7, #0]
 80044b4:	6899      	ldr	r1, [r3, #8]
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	685a      	ldr	r2, [r3, #4]
 80044ba:	683b      	ldr	r3, [r7, #0]
 80044bc:	68db      	ldr	r3, [r3, #12]
 80044be:	f000 f944 	bl	800474a <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	689b      	ldr	r3, [r3, #8]
 80044c8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80044ca:	68bb      	ldr	r3, [r7, #8]
 80044cc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80044d0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	68ba      	ldr	r2, [r7, #8]
 80044d8:	609a      	str	r2, [r3, #8]
      break;
 80044da:	e04f      	b.n	800457c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6818      	ldr	r0, [r3, #0]
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	6899      	ldr	r1, [r3, #8]
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	685a      	ldr	r2, [r3, #4]
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	68db      	ldr	r3, [r3, #12]
 80044ec:	f000 f92d 	bl	800474a <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	689a      	ldr	r2, [r3, #8]
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80044fe:	609a      	str	r2, [r3, #8]
      break;
 8004500:	e03c      	b.n	800457c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6818      	ldr	r0, [r3, #0]
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	6859      	ldr	r1, [r3, #4]
 800450a:	683b      	ldr	r3, [r7, #0]
 800450c:	68db      	ldr	r3, [r3, #12]
 800450e:	461a      	mov	r2, r3
 8004510:	f000 f8a4 	bl	800465c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	2150      	movs	r1, #80	; 0x50
 800451a:	4618      	mov	r0, r3
 800451c:	f000 f8fb 	bl	8004716 <TIM_ITRx_SetConfig>
      break;
 8004520:	e02c      	b.n	800457c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6818      	ldr	r0, [r3, #0]
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	6859      	ldr	r1, [r3, #4]
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	68db      	ldr	r3, [r3, #12]
 800452e:	461a      	mov	r2, r3
 8004530:	f000 f8c2 	bl	80046b8 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	2160      	movs	r1, #96	; 0x60
 800453a:	4618      	mov	r0, r3
 800453c:	f000 f8eb 	bl	8004716 <TIM_ITRx_SetConfig>
      break;
 8004540:	e01c      	b.n	800457c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6818      	ldr	r0, [r3, #0]
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	6859      	ldr	r1, [r3, #4]
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	68db      	ldr	r3, [r3, #12]
 800454e:	461a      	mov	r2, r3
 8004550:	f000 f884 	bl	800465c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	2140      	movs	r1, #64	; 0x40
 800455a:	4618      	mov	r0, r3
 800455c:	f000 f8db 	bl	8004716 <TIM_ITRx_SetConfig>
      break;
 8004560:	e00c      	b.n	800457c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681a      	ldr	r2, [r3, #0]
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	4619      	mov	r1, r3
 800456c:	4610      	mov	r0, r2
 800456e:	f000 f8d2 	bl	8004716 <TIM_ITRx_SetConfig>
      break;
 8004572:	e003      	b.n	800457c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004574:	2301      	movs	r3, #1
 8004576:	73fb      	strb	r3, [r7, #15]
      break;
 8004578:	e000      	b.n	800457c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800457a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2201      	movs	r2, #1
 8004580:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2200      	movs	r2, #0
 8004588:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800458c:	7bfb      	ldrb	r3, [r7, #15]
}
 800458e:	4618      	mov	r0, r3
 8004590:	3710      	adds	r7, #16
 8004592:	46bd      	mov	sp, r7
 8004594:	bd80      	pop	{r7, pc}
	...

08004598 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004598:	b480      	push	{r7}
 800459a:	b085      	sub	sp, #20
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
 80045a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	4a29      	ldr	r2, [pc, #164]	; (8004650 <TIM_Base_SetConfig+0xb8>)
 80045ac:	4293      	cmp	r3, r2
 80045ae:	d00b      	beq.n	80045c8 <TIM_Base_SetConfig+0x30>
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045b6:	d007      	beq.n	80045c8 <TIM_Base_SetConfig+0x30>
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	4a26      	ldr	r2, [pc, #152]	; (8004654 <TIM_Base_SetConfig+0xbc>)
 80045bc:	4293      	cmp	r3, r2
 80045be:	d003      	beq.n	80045c8 <TIM_Base_SetConfig+0x30>
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	4a25      	ldr	r2, [pc, #148]	; (8004658 <TIM_Base_SetConfig+0xc0>)
 80045c4:	4293      	cmp	r3, r2
 80045c6:	d108      	bne.n	80045da <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	685b      	ldr	r3, [r3, #4]
 80045d4:	68fa      	ldr	r2, [r7, #12]
 80045d6:	4313      	orrs	r3, r2
 80045d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	4a1c      	ldr	r2, [pc, #112]	; (8004650 <TIM_Base_SetConfig+0xb8>)
 80045de:	4293      	cmp	r3, r2
 80045e0:	d00b      	beq.n	80045fa <TIM_Base_SetConfig+0x62>
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045e8:	d007      	beq.n	80045fa <TIM_Base_SetConfig+0x62>
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	4a19      	ldr	r2, [pc, #100]	; (8004654 <TIM_Base_SetConfig+0xbc>)
 80045ee:	4293      	cmp	r3, r2
 80045f0:	d003      	beq.n	80045fa <TIM_Base_SetConfig+0x62>
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	4a18      	ldr	r2, [pc, #96]	; (8004658 <TIM_Base_SetConfig+0xc0>)
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d108      	bne.n	800460c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004600:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	68db      	ldr	r3, [r3, #12]
 8004606:	68fa      	ldr	r2, [r7, #12]
 8004608:	4313      	orrs	r3, r2
 800460a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	695b      	ldr	r3, [r3, #20]
 8004616:	4313      	orrs	r3, r2
 8004618:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	68fa      	ldr	r2, [r7, #12]
 800461e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	689a      	ldr	r2, [r3, #8]
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	681a      	ldr	r2, [r3, #0]
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	4a07      	ldr	r2, [pc, #28]	; (8004650 <TIM_Base_SetConfig+0xb8>)
 8004634:	4293      	cmp	r3, r2
 8004636:	d103      	bne.n	8004640 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	691a      	ldr	r2, [r3, #16]
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2201      	movs	r2, #1
 8004644:	615a      	str	r2, [r3, #20]
}
 8004646:	bf00      	nop
 8004648:	3714      	adds	r7, #20
 800464a:	46bd      	mov	sp, r7
 800464c:	bc80      	pop	{r7}
 800464e:	4770      	bx	lr
 8004650:	40012c00 	.word	0x40012c00
 8004654:	40000400 	.word	0x40000400
 8004658:	40000800 	.word	0x40000800

0800465c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800465c:	b480      	push	{r7}
 800465e:	b087      	sub	sp, #28
 8004660:	af00      	add	r7, sp, #0
 8004662:	60f8      	str	r0, [r7, #12]
 8004664:	60b9      	str	r1, [r7, #8]
 8004666:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	6a1b      	ldr	r3, [r3, #32]
 800466c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	6a1b      	ldr	r3, [r3, #32]
 8004672:	f023 0201 	bic.w	r2, r3, #1
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	699b      	ldr	r3, [r3, #24]
 800467e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004680:	693b      	ldr	r3, [r7, #16]
 8004682:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004686:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	011b      	lsls	r3, r3, #4
 800468c:	693a      	ldr	r2, [r7, #16]
 800468e:	4313      	orrs	r3, r2
 8004690:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004692:	697b      	ldr	r3, [r7, #20]
 8004694:	f023 030a 	bic.w	r3, r3, #10
 8004698:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800469a:	697a      	ldr	r2, [r7, #20]
 800469c:	68bb      	ldr	r3, [r7, #8]
 800469e:	4313      	orrs	r3, r2
 80046a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	693a      	ldr	r2, [r7, #16]
 80046a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	697a      	ldr	r2, [r7, #20]
 80046ac:	621a      	str	r2, [r3, #32]
}
 80046ae:	bf00      	nop
 80046b0:	371c      	adds	r7, #28
 80046b2:	46bd      	mov	sp, r7
 80046b4:	bc80      	pop	{r7}
 80046b6:	4770      	bx	lr

080046b8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80046b8:	b480      	push	{r7}
 80046ba:	b087      	sub	sp, #28
 80046bc:	af00      	add	r7, sp, #0
 80046be:	60f8      	str	r0, [r7, #12]
 80046c0:	60b9      	str	r1, [r7, #8]
 80046c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	6a1b      	ldr	r3, [r3, #32]
 80046c8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	6a1b      	ldr	r3, [r3, #32]
 80046ce:	f023 0210 	bic.w	r2, r3, #16
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	699b      	ldr	r3, [r3, #24]
 80046da:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80046dc:	693b      	ldr	r3, [r7, #16]
 80046de:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80046e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	031b      	lsls	r3, r3, #12
 80046e8:	693a      	ldr	r2, [r7, #16]
 80046ea:	4313      	orrs	r3, r2
 80046ec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80046ee:	697b      	ldr	r3, [r7, #20]
 80046f0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80046f4:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80046f6:	68bb      	ldr	r3, [r7, #8]
 80046f8:	011b      	lsls	r3, r3, #4
 80046fa:	697a      	ldr	r2, [r7, #20]
 80046fc:	4313      	orrs	r3, r2
 80046fe:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	693a      	ldr	r2, [r7, #16]
 8004704:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	697a      	ldr	r2, [r7, #20]
 800470a:	621a      	str	r2, [r3, #32]
}
 800470c:	bf00      	nop
 800470e:	371c      	adds	r7, #28
 8004710:	46bd      	mov	sp, r7
 8004712:	bc80      	pop	{r7}
 8004714:	4770      	bx	lr

08004716 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004716:	b480      	push	{r7}
 8004718:	b085      	sub	sp, #20
 800471a:	af00      	add	r7, sp, #0
 800471c:	6078      	str	r0, [r7, #4]
 800471e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	689b      	ldr	r3, [r3, #8]
 8004724:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800472c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800472e:	683a      	ldr	r2, [r7, #0]
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	4313      	orrs	r3, r2
 8004734:	f043 0307 	orr.w	r3, r3, #7
 8004738:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	68fa      	ldr	r2, [r7, #12]
 800473e:	609a      	str	r2, [r3, #8]
}
 8004740:	bf00      	nop
 8004742:	3714      	adds	r7, #20
 8004744:	46bd      	mov	sp, r7
 8004746:	bc80      	pop	{r7}
 8004748:	4770      	bx	lr

0800474a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800474a:	b480      	push	{r7}
 800474c:	b087      	sub	sp, #28
 800474e:	af00      	add	r7, sp, #0
 8004750:	60f8      	str	r0, [r7, #12]
 8004752:	60b9      	str	r1, [r7, #8]
 8004754:	607a      	str	r2, [r7, #4]
 8004756:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	689b      	ldr	r3, [r3, #8]
 800475c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800475e:	697b      	ldr	r3, [r7, #20]
 8004760:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004764:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	021a      	lsls	r2, r3, #8
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	431a      	orrs	r2, r3
 800476e:	68bb      	ldr	r3, [r7, #8]
 8004770:	4313      	orrs	r3, r2
 8004772:	697a      	ldr	r2, [r7, #20]
 8004774:	4313      	orrs	r3, r2
 8004776:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	697a      	ldr	r2, [r7, #20]
 800477c:	609a      	str	r2, [r3, #8]
}
 800477e:	bf00      	nop
 8004780:	371c      	adds	r7, #28
 8004782:	46bd      	mov	sp, r7
 8004784:	bc80      	pop	{r7}
 8004786:	4770      	bx	lr

08004788 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004788:	b480      	push	{r7}
 800478a:	b085      	sub	sp, #20
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
 8004790:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004798:	2b01      	cmp	r3, #1
 800479a:	d101      	bne.n	80047a0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800479c:	2302      	movs	r3, #2
 800479e:	e046      	b.n	800482e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2201      	movs	r2, #1
 80047a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2202      	movs	r2, #2
 80047ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	685b      	ldr	r3, [r3, #4]
 80047b6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	689b      	ldr	r3, [r3, #8]
 80047be:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047c6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	68fa      	ldr	r2, [r7, #12]
 80047ce:	4313      	orrs	r3, r2
 80047d0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	68fa      	ldr	r2, [r7, #12]
 80047d8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	4a16      	ldr	r2, [pc, #88]	; (8004838 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80047e0:	4293      	cmp	r3, r2
 80047e2:	d00e      	beq.n	8004802 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047ec:	d009      	beq.n	8004802 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	4a12      	ldr	r2, [pc, #72]	; (800483c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80047f4:	4293      	cmp	r3, r2
 80047f6:	d004      	beq.n	8004802 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	4a10      	ldr	r2, [pc, #64]	; (8004840 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80047fe:	4293      	cmp	r3, r2
 8004800:	d10c      	bne.n	800481c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004802:	68bb      	ldr	r3, [r7, #8]
 8004804:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004808:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	685b      	ldr	r3, [r3, #4]
 800480e:	68ba      	ldr	r2, [r7, #8]
 8004810:	4313      	orrs	r3, r2
 8004812:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	68ba      	ldr	r2, [r7, #8]
 800481a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2201      	movs	r2, #1
 8004820:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2200      	movs	r2, #0
 8004828:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800482c:	2300      	movs	r3, #0
}
 800482e:	4618      	mov	r0, r3
 8004830:	3714      	adds	r7, #20
 8004832:	46bd      	mov	sp, r7
 8004834:	bc80      	pop	{r7}
 8004836:	4770      	bx	lr
 8004838:	40012c00 	.word	0x40012c00
 800483c:	40000400 	.word	0x40000400
 8004840:	40000800 	.word	0x40000800

08004844 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004844:	b580      	push	{r7, lr}
 8004846:	b082      	sub	sp, #8
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2b00      	cmp	r3, #0
 8004850:	d101      	bne.n	8004856 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004852:	2301      	movs	r3, #1
 8004854:	e042      	b.n	80048dc <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800485c:	b2db      	uxtb	r3, r3
 800485e:	2b00      	cmp	r3, #0
 8004860:	d106      	bne.n	8004870 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	2200      	movs	r2, #0
 8004866:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800486a:	6878      	ldr	r0, [r7, #4]
 800486c:	f7fd f9f4 	bl	8001c58 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2224      	movs	r2, #36	; 0x24
 8004874:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	68da      	ldr	r2, [r3, #12]
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004886:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004888:	6878      	ldr	r0, [r7, #4]
 800488a:	f000 ff89 	bl	80057a0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	691a      	ldr	r2, [r3, #16]
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800489c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	695a      	ldr	r2, [r3, #20]
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80048ac:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	68da      	ldr	r2, [r3, #12]
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80048bc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	2200      	movs	r2, #0
 80048c2:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2220      	movs	r2, #32
 80048c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2220      	movs	r2, #32
 80048d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2200      	movs	r2, #0
 80048d8:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80048da:	2300      	movs	r3, #0
}
 80048dc:	4618      	mov	r0, r3
 80048de:	3708      	adds	r7, #8
 80048e0:	46bd      	mov	sp, r7
 80048e2:	bd80      	pop	{r7, pc}

080048e4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b08a      	sub	sp, #40	; 0x28
 80048e8:	af02      	add	r7, sp, #8
 80048ea:	60f8      	str	r0, [r7, #12]
 80048ec:	60b9      	str	r1, [r7, #8]
 80048ee:	603b      	str	r3, [r7, #0]
 80048f0:	4613      	mov	r3, r2
 80048f2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80048f4:	2300      	movs	r3, #0
 80048f6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80048fe:	b2db      	uxtb	r3, r3
 8004900:	2b20      	cmp	r3, #32
 8004902:	d16d      	bne.n	80049e0 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8004904:	68bb      	ldr	r3, [r7, #8]
 8004906:	2b00      	cmp	r3, #0
 8004908:	d002      	beq.n	8004910 <HAL_UART_Transmit+0x2c>
 800490a:	88fb      	ldrh	r3, [r7, #6]
 800490c:	2b00      	cmp	r3, #0
 800490e:	d101      	bne.n	8004914 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004910:	2301      	movs	r3, #1
 8004912:	e066      	b.n	80049e2 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	2200      	movs	r2, #0
 8004918:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	2221      	movs	r2, #33	; 0x21
 800491e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004922:	f7fd fb97 	bl	8002054 <HAL_GetTick>
 8004926:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	88fa      	ldrh	r2, [r7, #6]
 800492c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	88fa      	ldrh	r2, [r7, #6]
 8004932:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	689b      	ldr	r3, [r3, #8]
 8004938:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800493c:	d108      	bne.n	8004950 <HAL_UART_Transmit+0x6c>
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	691b      	ldr	r3, [r3, #16]
 8004942:	2b00      	cmp	r3, #0
 8004944:	d104      	bne.n	8004950 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004946:	2300      	movs	r3, #0
 8004948:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800494a:	68bb      	ldr	r3, [r7, #8]
 800494c:	61bb      	str	r3, [r7, #24]
 800494e:	e003      	b.n	8004958 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004950:	68bb      	ldr	r3, [r7, #8]
 8004952:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004954:	2300      	movs	r3, #0
 8004956:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004958:	e02a      	b.n	80049b0 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	9300      	str	r3, [sp, #0]
 800495e:	697b      	ldr	r3, [r7, #20]
 8004960:	2200      	movs	r2, #0
 8004962:	2180      	movs	r1, #128	; 0x80
 8004964:	68f8      	ldr	r0, [r7, #12]
 8004966:	f000 fc51 	bl	800520c <UART_WaitOnFlagUntilTimeout>
 800496a:	4603      	mov	r3, r0
 800496c:	2b00      	cmp	r3, #0
 800496e:	d001      	beq.n	8004974 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8004970:	2303      	movs	r3, #3
 8004972:	e036      	b.n	80049e2 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8004974:	69fb      	ldr	r3, [r7, #28]
 8004976:	2b00      	cmp	r3, #0
 8004978:	d10b      	bne.n	8004992 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800497a:	69bb      	ldr	r3, [r7, #24]
 800497c:	881b      	ldrh	r3, [r3, #0]
 800497e:	461a      	mov	r2, r3
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004988:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800498a:	69bb      	ldr	r3, [r7, #24]
 800498c:	3302      	adds	r3, #2
 800498e:	61bb      	str	r3, [r7, #24]
 8004990:	e007      	b.n	80049a2 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004992:	69fb      	ldr	r3, [r7, #28]
 8004994:	781a      	ldrb	r2, [r3, #0]
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800499c:	69fb      	ldr	r3, [r7, #28]
 800499e:	3301      	adds	r3, #1
 80049a0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80049a6:	b29b      	uxth	r3, r3
 80049a8:	3b01      	subs	r3, #1
 80049aa:	b29a      	uxth	r2, r3
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80049b4:	b29b      	uxth	r3, r3
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d1cf      	bne.n	800495a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80049ba:	683b      	ldr	r3, [r7, #0]
 80049bc:	9300      	str	r3, [sp, #0]
 80049be:	697b      	ldr	r3, [r7, #20]
 80049c0:	2200      	movs	r2, #0
 80049c2:	2140      	movs	r1, #64	; 0x40
 80049c4:	68f8      	ldr	r0, [r7, #12]
 80049c6:	f000 fc21 	bl	800520c <UART_WaitOnFlagUntilTimeout>
 80049ca:	4603      	mov	r3, r0
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d001      	beq.n	80049d4 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 80049d0:	2303      	movs	r3, #3
 80049d2:	e006      	b.n	80049e2 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	2220      	movs	r2, #32
 80049d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80049dc:	2300      	movs	r3, #0
 80049de:	e000      	b.n	80049e2 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80049e0:	2302      	movs	r3, #2
  }
}
 80049e2:	4618      	mov	r0, r3
 80049e4:	3720      	adds	r7, #32
 80049e6:	46bd      	mov	sp, r7
 80049e8:	bd80      	pop	{r7, pc}

080049ea <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80049ea:	b580      	push	{r7, lr}
 80049ec:	b08c      	sub	sp, #48	; 0x30
 80049ee:	af00      	add	r7, sp, #0
 80049f0:	60f8      	str	r0, [r7, #12]
 80049f2:	60b9      	str	r1, [r7, #8]
 80049f4:	4613      	mov	r3, r2
 80049f6:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80049fe:	b2db      	uxtb	r3, r3
 8004a00:	2b20      	cmp	r3, #32
 8004a02:	d14a      	bne.n	8004a9a <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 8004a04:	68bb      	ldr	r3, [r7, #8]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d002      	beq.n	8004a10 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8004a0a:	88fb      	ldrh	r3, [r7, #6]
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d101      	bne.n	8004a14 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8004a10:	2301      	movs	r3, #1
 8004a12:	e043      	b.n	8004a9c <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	2201      	movs	r2, #1
 8004a18:	631a      	str	r2, [r3, #48]	; 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	635a      	str	r2, [r3, #52]	; 0x34

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8004a20:	88fb      	ldrh	r3, [r7, #6]
 8004a22:	461a      	mov	r2, r3
 8004a24:	68b9      	ldr	r1, [r7, #8]
 8004a26:	68f8      	ldr	r0, [r7, #12]
 8004a28:	f000 fc5e 	bl	80052e8 <UART_Start_Receive_DMA>
 8004a2c:	4603      	mov	r3, r0
 8004a2e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8004a32:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d12c      	bne.n	8004a94 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a3e:	2b01      	cmp	r3, #1
 8004a40:	d125      	bne.n	8004a8e <HAL_UARTEx_ReceiveToIdle_DMA+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004a42:	2300      	movs	r3, #0
 8004a44:	613b      	str	r3, [r7, #16]
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	613b      	str	r3, [r7, #16]
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	685b      	ldr	r3, [r3, #4]
 8004a54:	613b      	str	r3, [r7, #16]
 8004a56:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	330c      	adds	r3, #12
 8004a5e:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a60:	69bb      	ldr	r3, [r7, #24]
 8004a62:	e853 3f00 	ldrex	r3, [r3]
 8004a66:	617b      	str	r3, [r7, #20]
   return(result);
 8004a68:	697b      	ldr	r3, [r7, #20]
 8004a6a:	f043 0310 	orr.w	r3, r3, #16
 8004a6e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	330c      	adds	r3, #12
 8004a76:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004a78:	627a      	str	r2, [r7, #36]	; 0x24
 8004a7a:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a7c:	6a39      	ldr	r1, [r7, #32]
 8004a7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a80:	e841 2300 	strex	r3, r2, [r1]
 8004a84:	61fb      	str	r3, [r7, #28]
   return(result);
 8004a86:	69fb      	ldr	r3, [r7, #28]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d1e5      	bne.n	8004a58 <HAL_UARTEx_ReceiveToIdle_DMA+0x6e>
 8004a8c:	e002      	b.n	8004a94 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8004a8e:	2301      	movs	r3, #1
 8004a90:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8004a94:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004a98:	e000      	b.n	8004a9c <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
  }
  else
  {
    return HAL_BUSY;
 8004a9a:	2302      	movs	r3, #2
  }
}
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	3730      	adds	r7, #48	; 0x30
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	bd80      	pop	{r7, pc}

08004aa4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	b0ba      	sub	sp, #232	; 0xe8
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	68db      	ldr	r3, [r3, #12]
 8004abc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	695b      	ldr	r3, [r3, #20]
 8004ac6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004aca:	2300      	movs	r3, #0
 8004acc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004ad0:	2300      	movs	r3, #0
 8004ad2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004ad6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ada:	f003 030f 	and.w	r3, r3, #15
 8004ade:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004ae2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d10f      	bne.n	8004b0a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004aea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004aee:	f003 0320 	and.w	r3, r3, #32
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d009      	beq.n	8004b0a <HAL_UART_IRQHandler+0x66>
 8004af6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004afa:	f003 0320 	and.w	r3, r3, #32
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d003      	beq.n	8004b0a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004b02:	6878      	ldr	r0, [r7, #4]
 8004b04:	f000 fd8e 	bl	8005624 <UART_Receive_IT>
      return;
 8004b08:	e25b      	b.n	8004fc2 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004b0a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	f000 80de 	beq.w	8004cd0 <HAL_UART_IRQHandler+0x22c>
 8004b14:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004b18:	f003 0301 	and.w	r3, r3, #1
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d106      	bne.n	8004b2e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004b20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b24:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	f000 80d1 	beq.w	8004cd0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004b2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b32:	f003 0301 	and.w	r3, r3, #1
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d00b      	beq.n	8004b52 <HAL_UART_IRQHandler+0xae>
 8004b3a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d005      	beq.n	8004b52 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b4a:	f043 0201 	orr.w	r2, r3, #1
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004b52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b56:	f003 0304 	and.w	r3, r3, #4
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d00b      	beq.n	8004b76 <HAL_UART_IRQHandler+0xd2>
 8004b5e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004b62:	f003 0301 	and.w	r3, r3, #1
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d005      	beq.n	8004b76 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b6e:	f043 0202 	orr.w	r2, r3, #2
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004b76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b7a:	f003 0302 	and.w	r3, r3, #2
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d00b      	beq.n	8004b9a <HAL_UART_IRQHandler+0xf6>
 8004b82:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004b86:	f003 0301 	and.w	r3, r3, #1
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d005      	beq.n	8004b9a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b92:	f043 0204 	orr.w	r2, r3, #4
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004b9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b9e:	f003 0308 	and.w	r3, r3, #8
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d011      	beq.n	8004bca <HAL_UART_IRQHandler+0x126>
 8004ba6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004baa:	f003 0320 	and.w	r3, r3, #32
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d105      	bne.n	8004bbe <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004bb2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004bb6:	f003 0301 	and.w	r3, r3, #1
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d005      	beq.n	8004bca <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bc2:	f043 0208 	orr.w	r2, r3, #8
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	f000 81f2 	beq.w	8004fb8 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004bd4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004bd8:	f003 0320 	and.w	r3, r3, #32
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d008      	beq.n	8004bf2 <HAL_UART_IRQHandler+0x14e>
 8004be0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004be4:	f003 0320 	and.w	r3, r3, #32
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d002      	beq.n	8004bf2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004bec:	6878      	ldr	r0, [r7, #4]
 8004bee:	f000 fd19 	bl	8005624 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	695b      	ldr	r3, [r3, #20]
 8004bf8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	bf14      	ite	ne
 8004c00:	2301      	movne	r3, #1
 8004c02:	2300      	moveq	r3, #0
 8004c04:	b2db      	uxtb	r3, r3
 8004c06:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c0e:	f003 0308 	and.w	r3, r3, #8
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d103      	bne.n	8004c1e <HAL_UART_IRQHandler+0x17a>
 8004c16:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d04f      	beq.n	8004cbe <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004c1e:	6878      	ldr	r0, [r7, #4]
 8004c20:	f000 fc23 	bl	800546a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	695b      	ldr	r3, [r3, #20]
 8004c2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d041      	beq.n	8004cb6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	3314      	adds	r3, #20
 8004c38:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c3c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004c40:	e853 3f00 	ldrex	r3, [r3]
 8004c44:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004c48:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004c4c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c50:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	3314      	adds	r3, #20
 8004c5a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004c5e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004c62:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c66:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004c6a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004c6e:	e841 2300 	strex	r3, r2, [r1]
 8004c72:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004c76:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d1d9      	bne.n	8004c32 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d013      	beq.n	8004cae <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c8a:	4a7e      	ldr	r2, [pc, #504]	; (8004e84 <HAL_UART_IRQHandler+0x3e0>)
 8004c8c:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c92:	4618      	mov	r0, r3
 8004c94:	f7fd fc10 	bl	80024b8 <HAL_DMA_Abort_IT>
 8004c98:	4603      	mov	r3, r0
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d016      	beq.n	8004ccc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ca2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ca4:	687a      	ldr	r2, [r7, #4]
 8004ca6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004ca8:	4610      	mov	r0, r2
 8004caa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004cac:	e00e      	b.n	8004ccc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004cae:	6878      	ldr	r0, [r7, #4]
 8004cb0:	f000 f9a5 	bl	8004ffe <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004cb4:	e00a      	b.n	8004ccc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004cb6:	6878      	ldr	r0, [r7, #4]
 8004cb8:	f000 f9a1 	bl	8004ffe <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004cbc:	e006      	b.n	8004ccc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004cbe:	6878      	ldr	r0, [r7, #4]
 8004cc0:	f000 f99d 	bl	8004ffe <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8004cca:	e175      	b.n	8004fb8 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ccc:	bf00      	nop
    return;
 8004cce:	e173      	b.n	8004fb8 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cd4:	2b01      	cmp	r3, #1
 8004cd6:	f040 814f 	bne.w	8004f78 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004cda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004cde:	f003 0310 	and.w	r3, r3, #16
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	f000 8148 	beq.w	8004f78 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004ce8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004cec:	f003 0310 	and.w	r3, r3, #16
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	f000 8141 	beq.w	8004f78 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004cf6:	2300      	movs	r3, #0
 8004cf8:	60bb      	str	r3, [r7, #8]
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	60bb      	str	r3, [r7, #8]
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	685b      	ldr	r3, [r3, #4]
 8004d08:	60bb      	str	r3, [r7, #8]
 8004d0a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	695b      	ldr	r3, [r3, #20]
 8004d12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	f000 80b6 	beq.w	8004e88 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	685b      	ldr	r3, [r3, #4]
 8004d24:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004d28:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	f000 8145 	beq.w	8004fbc <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004d36:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004d3a:	429a      	cmp	r2, r3
 8004d3c:	f080 813e 	bcs.w	8004fbc <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004d46:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d4c:	699b      	ldr	r3, [r3, #24]
 8004d4e:	2b20      	cmp	r3, #32
 8004d50:	f000 8088 	beq.w	8004e64 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	330c      	adds	r3, #12
 8004d5a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d5e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004d62:	e853 3f00 	ldrex	r3, [r3]
 8004d66:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004d6a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004d6e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004d72:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	330c      	adds	r3, #12
 8004d7c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004d80:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004d84:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d88:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004d8c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004d90:	e841 2300 	strex	r3, r2, [r1]
 8004d94:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004d98:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d1d9      	bne.n	8004d54 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	3314      	adds	r3, #20
 8004da6:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004da8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004daa:	e853 3f00 	ldrex	r3, [r3]
 8004dae:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004db0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004db2:	f023 0301 	bic.w	r3, r3, #1
 8004db6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	3314      	adds	r3, #20
 8004dc0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004dc4:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004dc8:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dca:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004dcc:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004dd0:	e841 2300 	strex	r3, r2, [r1]
 8004dd4:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004dd6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d1e1      	bne.n	8004da0 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	3314      	adds	r3, #20
 8004de2:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004de4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004de6:	e853 3f00 	ldrex	r3, [r3]
 8004dea:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004dec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004dee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004df2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	3314      	adds	r3, #20
 8004dfc:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004e00:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004e02:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e04:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004e06:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004e08:	e841 2300 	strex	r3, r2, [r1]
 8004e0c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004e0e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d1e3      	bne.n	8004ddc <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2220      	movs	r2, #32
 8004e18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2200      	movs	r2, #0
 8004e20:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	330c      	adds	r3, #12
 8004e28:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e2c:	e853 3f00 	ldrex	r3, [r3]
 8004e30:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004e32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e34:	f023 0310 	bic.w	r3, r3, #16
 8004e38:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	330c      	adds	r3, #12
 8004e42:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004e46:	65ba      	str	r2, [r7, #88]	; 0x58
 8004e48:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e4a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004e4c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004e4e:	e841 2300 	strex	r3, r2, [r1]
 8004e52:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004e54:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d1e3      	bne.n	8004e22 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e5e:	4618      	mov	r0, r3
 8004e60:	f7fd faee 	bl	8002440 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2202      	movs	r2, #2
 8004e68:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004e72:	b29b      	uxth	r3, r3
 8004e74:	1ad3      	subs	r3, r2, r3
 8004e76:	b29b      	uxth	r3, r3
 8004e78:	4619      	mov	r1, r3
 8004e7a:	6878      	ldr	r0, [r7, #4]
 8004e7c:	f7fc fa2a 	bl	80012d4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004e80:	e09c      	b.n	8004fbc <HAL_UART_IRQHandler+0x518>
 8004e82:	bf00      	nop
 8004e84:	0800552f 	.word	0x0800552f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004e90:	b29b      	uxth	r3, r3
 8004e92:	1ad3      	subs	r3, r2, r3
 8004e94:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004e9c:	b29b      	uxth	r3, r3
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	f000 808e 	beq.w	8004fc0 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004ea4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	f000 8089 	beq.w	8004fc0 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	330c      	adds	r3, #12
 8004eb4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004eb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004eb8:	e853 3f00 	ldrex	r3, [r3]
 8004ebc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004ebe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ec0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004ec4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	330c      	adds	r3, #12
 8004ece:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004ed2:	647a      	str	r2, [r7, #68]	; 0x44
 8004ed4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ed6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004ed8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004eda:	e841 2300 	strex	r3, r2, [r1]
 8004ede:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004ee0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d1e3      	bne.n	8004eae <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	3314      	adds	r3, #20
 8004eec:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ef0:	e853 3f00 	ldrex	r3, [r3]
 8004ef4:	623b      	str	r3, [r7, #32]
   return(result);
 8004ef6:	6a3b      	ldr	r3, [r7, #32]
 8004ef8:	f023 0301 	bic.w	r3, r3, #1
 8004efc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	3314      	adds	r3, #20
 8004f06:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004f0a:	633a      	str	r2, [r7, #48]	; 0x30
 8004f0c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f0e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004f10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f12:	e841 2300 	strex	r3, r2, [r1]
 8004f16:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004f18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d1e3      	bne.n	8004ee6 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	2220      	movs	r2, #32
 8004f22:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	2200      	movs	r2, #0
 8004f2a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	330c      	adds	r3, #12
 8004f32:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f34:	693b      	ldr	r3, [r7, #16]
 8004f36:	e853 3f00 	ldrex	r3, [r3]
 8004f3a:	60fb      	str	r3, [r7, #12]
   return(result);
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	f023 0310 	bic.w	r3, r3, #16
 8004f42:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	330c      	adds	r3, #12
 8004f4c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004f50:	61fa      	str	r2, [r7, #28]
 8004f52:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f54:	69b9      	ldr	r1, [r7, #24]
 8004f56:	69fa      	ldr	r2, [r7, #28]
 8004f58:	e841 2300 	strex	r3, r2, [r1]
 8004f5c:	617b      	str	r3, [r7, #20]
   return(result);
 8004f5e:	697b      	ldr	r3, [r7, #20]
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d1e3      	bne.n	8004f2c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2202      	movs	r2, #2
 8004f68:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004f6a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004f6e:	4619      	mov	r1, r3
 8004f70:	6878      	ldr	r0, [r7, #4]
 8004f72:	f7fc f9af 	bl	80012d4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004f76:	e023      	b.n	8004fc0 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004f78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d009      	beq.n	8004f98 <HAL_UART_IRQHandler+0x4f4>
 8004f84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d003      	beq.n	8004f98 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004f90:	6878      	ldr	r0, [r7, #4]
 8004f92:	f000 fae0 	bl	8005556 <UART_Transmit_IT>
    return;
 8004f96:	e014      	b.n	8004fc2 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004f98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d00e      	beq.n	8004fc2 <HAL_UART_IRQHandler+0x51e>
 8004fa4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004fa8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d008      	beq.n	8004fc2 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004fb0:	6878      	ldr	r0, [r7, #4]
 8004fb2:	f000 fb1f 	bl	80055f4 <UART_EndTransmit_IT>
    return;
 8004fb6:	e004      	b.n	8004fc2 <HAL_UART_IRQHandler+0x51e>
    return;
 8004fb8:	bf00      	nop
 8004fba:	e002      	b.n	8004fc2 <HAL_UART_IRQHandler+0x51e>
      return;
 8004fbc:	bf00      	nop
 8004fbe:	e000      	b.n	8004fc2 <HAL_UART_IRQHandler+0x51e>
      return;
 8004fc0:	bf00      	nop
  }
}
 8004fc2:	37e8      	adds	r7, #232	; 0xe8
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	bd80      	pop	{r7, pc}

08004fc8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004fc8:	b480      	push	{r7}
 8004fca:	b083      	sub	sp, #12
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004fd0:	bf00      	nop
 8004fd2:	370c      	adds	r7, #12
 8004fd4:	46bd      	mov	sp, r7
 8004fd6:	bc80      	pop	{r7}
 8004fd8:	4770      	bx	lr

08004fda <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004fda:	b480      	push	{r7}
 8004fdc:	b083      	sub	sp, #12
 8004fde:	af00      	add	r7, sp, #0
 8004fe0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004fe2:	bf00      	nop
 8004fe4:	370c      	adds	r7, #12
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	bc80      	pop	{r7}
 8004fea:	4770      	bx	lr

08004fec <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004fec:	b480      	push	{r7}
 8004fee:	b083      	sub	sp, #12
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8004ff4:	bf00      	nop
 8004ff6:	370c      	adds	r7, #12
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	bc80      	pop	{r7}
 8004ffc:	4770      	bx	lr

08004ffe <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004ffe:	b480      	push	{r7}
 8005000:	b083      	sub	sp, #12
 8005002:	af00      	add	r7, sp, #0
 8005004:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005006:	bf00      	nop
 8005008:	370c      	adds	r7, #12
 800500a:	46bd      	mov	sp, r7
 800500c:	bc80      	pop	{r7}
 800500e:	4770      	bx	lr

08005010 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005010:	b580      	push	{r7, lr}
 8005012:	b09c      	sub	sp, #112	; 0x70
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800501c:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f003 0320 	and.w	r3, r3, #32
 8005028:	2b00      	cmp	r3, #0
 800502a:	d172      	bne.n	8005112 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800502c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800502e:	2200      	movs	r2, #0
 8005030:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005032:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	330c      	adds	r3, #12
 8005038:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800503a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800503c:	e853 3f00 	ldrex	r3, [r3]
 8005040:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005042:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005044:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005048:	66bb      	str	r3, [r7, #104]	; 0x68
 800504a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	330c      	adds	r3, #12
 8005050:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005052:	65ba      	str	r2, [r7, #88]	; 0x58
 8005054:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005056:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005058:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800505a:	e841 2300 	strex	r3, r2, [r1]
 800505e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005060:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005062:	2b00      	cmp	r3, #0
 8005064:	d1e5      	bne.n	8005032 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005066:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	3314      	adds	r3, #20
 800506c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800506e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005070:	e853 3f00 	ldrex	r3, [r3]
 8005074:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005076:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005078:	f023 0301 	bic.w	r3, r3, #1
 800507c:	667b      	str	r3, [r7, #100]	; 0x64
 800507e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	3314      	adds	r3, #20
 8005084:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005086:	647a      	str	r2, [r7, #68]	; 0x44
 8005088:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800508a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800508c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800508e:	e841 2300 	strex	r3, r2, [r1]
 8005092:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005094:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005096:	2b00      	cmp	r3, #0
 8005098:	d1e5      	bne.n	8005066 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800509a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	3314      	adds	r3, #20
 80050a0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050a4:	e853 3f00 	ldrex	r3, [r3]
 80050a8:	623b      	str	r3, [r7, #32]
   return(result);
 80050aa:	6a3b      	ldr	r3, [r7, #32]
 80050ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80050b0:	663b      	str	r3, [r7, #96]	; 0x60
 80050b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	3314      	adds	r3, #20
 80050b8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80050ba:	633a      	str	r2, [r7, #48]	; 0x30
 80050bc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050be:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80050c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80050c2:	e841 2300 	strex	r3, r2, [r1]
 80050c6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80050c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d1e5      	bne.n	800509a <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80050ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050d0:	2220      	movs	r2, #32
 80050d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80050d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050da:	2b01      	cmp	r3, #1
 80050dc:	d119      	bne.n	8005112 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80050de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	330c      	adds	r3, #12
 80050e4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050e6:	693b      	ldr	r3, [r7, #16]
 80050e8:	e853 3f00 	ldrex	r3, [r3]
 80050ec:	60fb      	str	r3, [r7, #12]
   return(result);
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	f023 0310 	bic.w	r3, r3, #16
 80050f4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80050f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	330c      	adds	r3, #12
 80050fc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80050fe:	61fa      	str	r2, [r7, #28]
 8005100:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005102:	69b9      	ldr	r1, [r7, #24]
 8005104:	69fa      	ldr	r2, [r7, #28]
 8005106:	e841 2300 	strex	r3, r2, [r1]
 800510a:	617b      	str	r3, [r7, #20]
   return(result);
 800510c:	697b      	ldr	r3, [r7, #20]
 800510e:	2b00      	cmp	r3, #0
 8005110:	d1e5      	bne.n	80050de <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005112:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005114:	2200      	movs	r2, #0
 8005116:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005118:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800511a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800511c:	2b01      	cmp	r3, #1
 800511e:	d106      	bne.n	800512e <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005120:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005122:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005124:	4619      	mov	r1, r3
 8005126:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005128:	f7fc f8d4 	bl	80012d4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800512c:	e002      	b.n	8005134 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800512e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005130:	f7ff ff53 	bl	8004fda <HAL_UART_RxCpltCallback>
}
 8005134:	bf00      	nop
 8005136:	3770      	adds	r7, #112	; 0x70
 8005138:	46bd      	mov	sp, r7
 800513a:	bd80      	pop	{r7, pc}

0800513c <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800513c:	b580      	push	{r7, lr}
 800513e:	b084      	sub	sp, #16
 8005140:	af00      	add	r7, sp, #0
 8005142:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005148:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	2201      	movs	r2, #1
 800514e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005154:	2b01      	cmp	r3, #1
 8005156:	d108      	bne.n	800516a <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800515c:	085b      	lsrs	r3, r3, #1
 800515e:	b29b      	uxth	r3, r3
 8005160:	4619      	mov	r1, r3
 8005162:	68f8      	ldr	r0, [r7, #12]
 8005164:	f7fc f8b6 	bl	80012d4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005168:	e002      	b.n	8005170 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 800516a:	68f8      	ldr	r0, [r7, #12]
 800516c:	f7ff ff3e 	bl	8004fec <HAL_UART_RxHalfCpltCallback>
}
 8005170:	bf00      	nop
 8005172:	3710      	adds	r7, #16
 8005174:	46bd      	mov	sp, r7
 8005176:	bd80      	pop	{r7, pc}

08005178 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005178:	b580      	push	{r7, lr}
 800517a:	b084      	sub	sp, #16
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8005180:	2300      	movs	r3, #0
 8005182:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005188:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800518a:	68bb      	ldr	r3, [r7, #8]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	695b      	ldr	r3, [r3, #20]
 8005190:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005194:	2b00      	cmp	r3, #0
 8005196:	bf14      	ite	ne
 8005198:	2301      	movne	r3, #1
 800519a:	2300      	moveq	r3, #0
 800519c:	b2db      	uxtb	r3, r3
 800519e:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80051a0:	68bb      	ldr	r3, [r7, #8]
 80051a2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80051a6:	b2db      	uxtb	r3, r3
 80051a8:	2b21      	cmp	r3, #33	; 0x21
 80051aa:	d108      	bne.n	80051be <UART_DMAError+0x46>
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d005      	beq.n	80051be <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80051b2:	68bb      	ldr	r3, [r7, #8]
 80051b4:	2200      	movs	r2, #0
 80051b6:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80051b8:	68b8      	ldr	r0, [r7, #8]
 80051ba:	f000 f92f 	bl	800541c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80051be:	68bb      	ldr	r3, [r7, #8]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	695b      	ldr	r3, [r3, #20]
 80051c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	bf14      	ite	ne
 80051cc:	2301      	movne	r3, #1
 80051ce:	2300      	moveq	r3, #0
 80051d0:	b2db      	uxtb	r3, r3
 80051d2:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80051d4:	68bb      	ldr	r3, [r7, #8]
 80051d6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80051da:	b2db      	uxtb	r3, r3
 80051dc:	2b22      	cmp	r3, #34	; 0x22
 80051de:	d108      	bne.n	80051f2 <UART_DMAError+0x7a>
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d005      	beq.n	80051f2 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80051e6:	68bb      	ldr	r3, [r7, #8]
 80051e8:	2200      	movs	r2, #0
 80051ea:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80051ec:	68b8      	ldr	r0, [r7, #8]
 80051ee:	f000 f93c 	bl	800546a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80051f2:	68bb      	ldr	r3, [r7, #8]
 80051f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051f6:	f043 0210 	orr.w	r2, r3, #16
 80051fa:	68bb      	ldr	r3, [r7, #8]
 80051fc:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80051fe:	68b8      	ldr	r0, [r7, #8]
 8005200:	f7ff fefd 	bl	8004ffe <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005204:	bf00      	nop
 8005206:	3710      	adds	r7, #16
 8005208:	46bd      	mov	sp, r7
 800520a:	bd80      	pop	{r7, pc}

0800520c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800520c:	b580      	push	{r7, lr}
 800520e:	b090      	sub	sp, #64	; 0x40
 8005210:	af00      	add	r7, sp, #0
 8005212:	60f8      	str	r0, [r7, #12]
 8005214:	60b9      	str	r1, [r7, #8]
 8005216:	603b      	str	r3, [r7, #0]
 8005218:	4613      	mov	r3, r2
 800521a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800521c:	e050      	b.n	80052c0 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800521e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005220:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005224:	d04c      	beq.n	80052c0 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005226:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005228:	2b00      	cmp	r3, #0
 800522a:	d007      	beq.n	800523c <UART_WaitOnFlagUntilTimeout+0x30>
 800522c:	f7fc ff12 	bl	8002054 <HAL_GetTick>
 8005230:	4602      	mov	r2, r0
 8005232:	683b      	ldr	r3, [r7, #0]
 8005234:	1ad3      	subs	r3, r2, r3
 8005236:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005238:	429a      	cmp	r2, r3
 800523a:	d241      	bcs.n	80052c0 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	330c      	adds	r3, #12
 8005242:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005244:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005246:	e853 3f00 	ldrex	r3, [r3]
 800524a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800524c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800524e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005252:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	330c      	adds	r3, #12
 800525a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800525c:	637a      	str	r2, [r7, #52]	; 0x34
 800525e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005260:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005262:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005264:	e841 2300 	strex	r3, r2, [r1]
 8005268:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800526a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800526c:	2b00      	cmp	r3, #0
 800526e:	d1e5      	bne.n	800523c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	3314      	adds	r3, #20
 8005276:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005278:	697b      	ldr	r3, [r7, #20]
 800527a:	e853 3f00 	ldrex	r3, [r3]
 800527e:	613b      	str	r3, [r7, #16]
   return(result);
 8005280:	693b      	ldr	r3, [r7, #16]
 8005282:	f023 0301 	bic.w	r3, r3, #1
 8005286:	63bb      	str	r3, [r7, #56]	; 0x38
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	3314      	adds	r3, #20
 800528e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005290:	623a      	str	r2, [r7, #32]
 8005292:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005294:	69f9      	ldr	r1, [r7, #28]
 8005296:	6a3a      	ldr	r2, [r7, #32]
 8005298:	e841 2300 	strex	r3, r2, [r1]
 800529c:	61bb      	str	r3, [r7, #24]
   return(result);
 800529e:	69bb      	ldr	r3, [r7, #24]
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d1e5      	bne.n	8005270 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	2220      	movs	r2, #32
 80052a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	2220      	movs	r2, #32
 80052b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	2200      	movs	r2, #0
 80052b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 80052bc:	2303      	movs	r3, #3
 80052be:	e00f      	b.n	80052e0 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	681a      	ldr	r2, [r3, #0]
 80052c6:	68bb      	ldr	r3, [r7, #8]
 80052c8:	4013      	ands	r3, r2
 80052ca:	68ba      	ldr	r2, [r7, #8]
 80052cc:	429a      	cmp	r2, r3
 80052ce:	bf0c      	ite	eq
 80052d0:	2301      	moveq	r3, #1
 80052d2:	2300      	movne	r3, #0
 80052d4:	b2db      	uxtb	r3, r3
 80052d6:	461a      	mov	r2, r3
 80052d8:	79fb      	ldrb	r3, [r7, #7]
 80052da:	429a      	cmp	r2, r3
 80052dc:	d09f      	beq.n	800521e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80052de:	2300      	movs	r3, #0
}
 80052e0:	4618      	mov	r0, r3
 80052e2:	3740      	adds	r7, #64	; 0x40
 80052e4:	46bd      	mov	sp, r7
 80052e6:	bd80      	pop	{r7, pc}

080052e8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80052e8:	b580      	push	{r7, lr}
 80052ea:	b098      	sub	sp, #96	; 0x60
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	60f8      	str	r0, [r7, #12]
 80052f0:	60b9      	str	r1, [r7, #8]
 80052f2:	4613      	mov	r3, r2
 80052f4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80052f6:	68ba      	ldr	r2, [r7, #8]
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	88fa      	ldrh	r2, [r7, #6]
 8005300:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	2200      	movs	r2, #0
 8005306:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	2222      	movs	r2, #34	; 0x22
 800530c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005314:	4a3e      	ldr	r2, [pc, #248]	; (8005410 <UART_Start_Receive_DMA+0x128>)
 8005316:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800531c:	4a3d      	ldr	r2, [pc, #244]	; (8005414 <UART_Start_Receive_DMA+0x12c>)
 800531e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005324:	4a3c      	ldr	r2, [pc, #240]	; (8005418 <UART_Start_Receive_DMA+0x130>)
 8005326:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800532c:	2200      	movs	r2, #0
 800532e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8005330:	f107 0308 	add.w	r3, r7, #8
 8005334:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	3304      	adds	r3, #4
 8005340:	4619      	mov	r1, r3
 8005342:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005344:	681a      	ldr	r2, [r3, #0]
 8005346:	88fb      	ldrh	r3, [r7, #6]
 8005348:	f7fd f81a 	bl	8002380 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800534c:	2300      	movs	r3, #0
 800534e:	613b      	str	r3, [r7, #16]
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	613b      	str	r3, [r7, #16]
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	685b      	ldr	r3, [r3, #4]
 800535e:	613b      	str	r3, [r7, #16]
 8005360:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	691b      	ldr	r3, [r3, #16]
 8005366:	2b00      	cmp	r3, #0
 8005368:	d019      	beq.n	800539e <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	330c      	adds	r3, #12
 8005370:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005372:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005374:	e853 3f00 	ldrex	r3, [r3]
 8005378:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800537a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800537c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005380:	65bb      	str	r3, [r7, #88]	; 0x58
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	330c      	adds	r3, #12
 8005388:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800538a:	64fa      	str	r2, [r7, #76]	; 0x4c
 800538c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800538e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8005390:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005392:	e841 2300 	strex	r3, r2, [r1]
 8005396:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8005398:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800539a:	2b00      	cmp	r3, #0
 800539c:	d1e5      	bne.n	800536a <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	3314      	adds	r3, #20
 80053a4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053a8:	e853 3f00 	ldrex	r3, [r3]
 80053ac:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80053ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053b0:	f043 0301 	orr.w	r3, r3, #1
 80053b4:	657b      	str	r3, [r7, #84]	; 0x54
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	3314      	adds	r3, #20
 80053bc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80053be:	63ba      	str	r2, [r7, #56]	; 0x38
 80053c0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053c2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80053c4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80053c6:	e841 2300 	strex	r3, r2, [r1]
 80053ca:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80053cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d1e5      	bne.n	800539e <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	3314      	adds	r3, #20
 80053d8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053da:	69bb      	ldr	r3, [r7, #24]
 80053dc:	e853 3f00 	ldrex	r3, [r3]
 80053e0:	617b      	str	r3, [r7, #20]
   return(result);
 80053e2:	697b      	ldr	r3, [r7, #20]
 80053e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80053e8:	653b      	str	r3, [r7, #80]	; 0x50
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	3314      	adds	r3, #20
 80053f0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80053f2:	627a      	str	r2, [r7, #36]	; 0x24
 80053f4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053f6:	6a39      	ldr	r1, [r7, #32]
 80053f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053fa:	e841 2300 	strex	r3, r2, [r1]
 80053fe:	61fb      	str	r3, [r7, #28]
   return(result);
 8005400:	69fb      	ldr	r3, [r7, #28]
 8005402:	2b00      	cmp	r3, #0
 8005404:	d1e5      	bne.n	80053d2 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8005406:	2300      	movs	r3, #0
}
 8005408:	4618      	mov	r0, r3
 800540a:	3760      	adds	r7, #96	; 0x60
 800540c:	46bd      	mov	sp, r7
 800540e:	bd80      	pop	{r7, pc}
 8005410:	08005011 	.word	0x08005011
 8005414:	0800513d 	.word	0x0800513d
 8005418:	08005179 	.word	0x08005179

0800541c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800541c:	b480      	push	{r7}
 800541e:	b089      	sub	sp, #36	; 0x24
 8005420:	af00      	add	r7, sp, #0
 8005422:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	330c      	adds	r3, #12
 800542a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	e853 3f00 	ldrex	r3, [r3]
 8005432:	60bb      	str	r3, [r7, #8]
   return(result);
 8005434:	68bb      	ldr	r3, [r7, #8]
 8005436:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800543a:	61fb      	str	r3, [r7, #28]
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	330c      	adds	r3, #12
 8005442:	69fa      	ldr	r2, [r7, #28]
 8005444:	61ba      	str	r2, [r7, #24]
 8005446:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005448:	6979      	ldr	r1, [r7, #20]
 800544a:	69ba      	ldr	r2, [r7, #24]
 800544c:	e841 2300 	strex	r3, r2, [r1]
 8005450:	613b      	str	r3, [r7, #16]
   return(result);
 8005452:	693b      	ldr	r3, [r7, #16]
 8005454:	2b00      	cmp	r3, #0
 8005456:	d1e5      	bne.n	8005424 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2220      	movs	r2, #32
 800545c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 8005460:	bf00      	nop
 8005462:	3724      	adds	r7, #36	; 0x24
 8005464:	46bd      	mov	sp, r7
 8005466:	bc80      	pop	{r7}
 8005468:	4770      	bx	lr

0800546a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800546a:	b480      	push	{r7}
 800546c:	b095      	sub	sp, #84	; 0x54
 800546e:	af00      	add	r7, sp, #0
 8005470:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	330c      	adds	r3, #12
 8005478:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800547a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800547c:	e853 3f00 	ldrex	r3, [r3]
 8005480:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005482:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005484:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005488:	64fb      	str	r3, [r7, #76]	; 0x4c
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	330c      	adds	r3, #12
 8005490:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005492:	643a      	str	r2, [r7, #64]	; 0x40
 8005494:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005496:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005498:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800549a:	e841 2300 	strex	r3, r2, [r1]
 800549e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80054a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d1e5      	bne.n	8005472 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	3314      	adds	r3, #20
 80054ac:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054ae:	6a3b      	ldr	r3, [r7, #32]
 80054b0:	e853 3f00 	ldrex	r3, [r3]
 80054b4:	61fb      	str	r3, [r7, #28]
   return(result);
 80054b6:	69fb      	ldr	r3, [r7, #28]
 80054b8:	f023 0301 	bic.w	r3, r3, #1
 80054bc:	64bb      	str	r3, [r7, #72]	; 0x48
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	3314      	adds	r3, #20
 80054c4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80054c6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80054c8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054ca:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80054cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80054ce:	e841 2300 	strex	r3, r2, [r1]
 80054d2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80054d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d1e5      	bne.n	80054a6 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054de:	2b01      	cmp	r3, #1
 80054e0:	d119      	bne.n	8005516 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	330c      	adds	r3, #12
 80054e8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	e853 3f00 	ldrex	r3, [r3]
 80054f0:	60bb      	str	r3, [r7, #8]
   return(result);
 80054f2:	68bb      	ldr	r3, [r7, #8]
 80054f4:	f023 0310 	bic.w	r3, r3, #16
 80054f8:	647b      	str	r3, [r7, #68]	; 0x44
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	330c      	adds	r3, #12
 8005500:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005502:	61ba      	str	r2, [r7, #24]
 8005504:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005506:	6979      	ldr	r1, [r7, #20]
 8005508:	69ba      	ldr	r2, [r7, #24]
 800550a:	e841 2300 	strex	r3, r2, [r1]
 800550e:	613b      	str	r3, [r7, #16]
   return(result);
 8005510:	693b      	ldr	r3, [r7, #16]
 8005512:	2b00      	cmp	r3, #0
 8005514:	d1e5      	bne.n	80054e2 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	2220      	movs	r2, #32
 800551a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	2200      	movs	r2, #0
 8005522:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005524:	bf00      	nop
 8005526:	3754      	adds	r7, #84	; 0x54
 8005528:	46bd      	mov	sp, r7
 800552a:	bc80      	pop	{r7}
 800552c:	4770      	bx	lr

0800552e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800552e:	b580      	push	{r7, lr}
 8005530:	b084      	sub	sp, #16
 8005532:	af00      	add	r7, sp, #0
 8005534:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800553a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	2200      	movs	r2, #0
 8005540:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	2200      	movs	r2, #0
 8005546:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005548:	68f8      	ldr	r0, [r7, #12]
 800554a:	f7ff fd58 	bl	8004ffe <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800554e:	bf00      	nop
 8005550:	3710      	adds	r7, #16
 8005552:	46bd      	mov	sp, r7
 8005554:	bd80      	pop	{r7, pc}

08005556 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005556:	b480      	push	{r7}
 8005558:	b085      	sub	sp, #20
 800555a:	af00      	add	r7, sp, #0
 800555c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005564:	b2db      	uxtb	r3, r3
 8005566:	2b21      	cmp	r3, #33	; 0x21
 8005568:	d13e      	bne.n	80055e8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	689b      	ldr	r3, [r3, #8]
 800556e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005572:	d114      	bne.n	800559e <UART_Transmit_IT+0x48>
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	691b      	ldr	r3, [r3, #16]
 8005578:	2b00      	cmp	r3, #0
 800557a:	d110      	bne.n	800559e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	6a1b      	ldr	r3, [r3, #32]
 8005580:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	881b      	ldrh	r3, [r3, #0]
 8005586:	461a      	mov	r2, r3
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005590:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	6a1b      	ldr	r3, [r3, #32]
 8005596:	1c9a      	adds	r2, r3, #2
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	621a      	str	r2, [r3, #32]
 800559c:	e008      	b.n	80055b0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6a1b      	ldr	r3, [r3, #32]
 80055a2:	1c59      	adds	r1, r3, #1
 80055a4:	687a      	ldr	r2, [r7, #4]
 80055a6:	6211      	str	r1, [r2, #32]
 80055a8:	781a      	ldrb	r2, [r3, #0]
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80055b4:	b29b      	uxth	r3, r3
 80055b6:	3b01      	subs	r3, #1
 80055b8:	b29b      	uxth	r3, r3
 80055ba:	687a      	ldr	r2, [r7, #4]
 80055bc:	4619      	mov	r1, r3
 80055be:	84d1      	strh	r1, [r2, #38]	; 0x26
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d10f      	bne.n	80055e4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	68da      	ldr	r2, [r3, #12]
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80055d2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	68da      	ldr	r2, [r3, #12]
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80055e2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80055e4:	2300      	movs	r3, #0
 80055e6:	e000      	b.n	80055ea <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80055e8:	2302      	movs	r3, #2
  }
}
 80055ea:	4618      	mov	r0, r3
 80055ec:	3714      	adds	r7, #20
 80055ee:	46bd      	mov	sp, r7
 80055f0:	bc80      	pop	{r7}
 80055f2:	4770      	bx	lr

080055f4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80055f4:	b580      	push	{r7, lr}
 80055f6:	b082      	sub	sp, #8
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	68da      	ldr	r2, [r3, #12]
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800560a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2220      	movs	r2, #32
 8005610:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005614:	6878      	ldr	r0, [r7, #4]
 8005616:	f7ff fcd7 	bl	8004fc8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800561a:	2300      	movs	r3, #0
}
 800561c:	4618      	mov	r0, r3
 800561e:	3708      	adds	r7, #8
 8005620:	46bd      	mov	sp, r7
 8005622:	bd80      	pop	{r7, pc}

08005624 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005624:	b580      	push	{r7, lr}
 8005626:	b08c      	sub	sp, #48	; 0x30
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005632:	b2db      	uxtb	r3, r3
 8005634:	2b22      	cmp	r3, #34	; 0x22
 8005636:	f040 80ae 	bne.w	8005796 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	689b      	ldr	r3, [r3, #8]
 800563e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005642:	d117      	bne.n	8005674 <UART_Receive_IT+0x50>
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	691b      	ldr	r3, [r3, #16]
 8005648:	2b00      	cmp	r3, #0
 800564a:	d113      	bne.n	8005674 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800564c:	2300      	movs	r3, #0
 800564e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005654:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	685b      	ldr	r3, [r3, #4]
 800565c:	b29b      	uxth	r3, r3
 800565e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005662:	b29a      	uxth	r2, r3
 8005664:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005666:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800566c:	1c9a      	adds	r2, r3, #2
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	629a      	str	r2, [r3, #40]	; 0x28
 8005672:	e026      	b.n	80056c2 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005678:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800567a:	2300      	movs	r3, #0
 800567c:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	689b      	ldr	r3, [r3, #8]
 8005682:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005686:	d007      	beq.n	8005698 <UART_Receive_IT+0x74>
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	689b      	ldr	r3, [r3, #8]
 800568c:	2b00      	cmp	r3, #0
 800568e:	d10a      	bne.n	80056a6 <UART_Receive_IT+0x82>
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	691b      	ldr	r3, [r3, #16]
 8005694:	2b00      	cmp	r3, #0
 8005696:	d106      	bne.n	80056a6 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	685b      	ldr	r3, [r3, #4]
 800569e:	b2da      	uxtb	r2, r3
 80056a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056a2:	701a      	strb	r2, [r3, #0]
 80056a4:	e008      	b.n	80056b8 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	685b      	ldr	r3, [r3, #4]
 80056ac:	b2db      	uxtb	r3, r3
 80056ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80056b2:	b2da      	uxtb	r2, r3
 80056b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056b6:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056bc:	1c5a      	adds	r2, r3, #1
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80056c6:	b29b      	uxth	r3, r3
 80056c8:	3b01      	subs	r3, #1
 80056ca:	b29b      	uxth	r3, r3
 80056cc:	687a      	ldr	r2, [r7, #4]
 80056ce:	4619      	mov	r1, r3
 80056d0:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d15d      	bne.n	8005792 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	68da      	ldr	r2, [r3, #12]
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f022 0220 	bic.w	r2, r2, #32
 80056e4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	68da      	ldr	r2, [r3, #12]
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80056f4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	695a      	ldr	r2, [r3, #20]
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	f022 0201 	bic.w	r2, r2, #1
 8005704:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	2220      	movs	r2, #32
 800570a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	2200      	movs	r2, #0
 8005712:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005718:	2b01      	cmp	r3, #1
 800571a:	d135      	bne.n	8005788 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2200      	movs	r2, #0
 8005720:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	330c      	adds	r3, #12
 8005728:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800572a:	697b      	ldr	r3, [r7, #20]
 800572c:	e853 3f00 	ldrex	r3, [r3]
 8005730:	613b      	str	r3, [r7, #16]
   return(result);
 8005732:	693b      	ldr	r3, [r7, #16]
 8005734:	f023 0310 	bic.w	r3, r3, #16
 8005738:	627b      	str	r3, [r7, #36]	; 0x24
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	330c      	adds	r3, #12
 8005740:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005742:	623a      	str	r2, [r7, #32]
 8005744:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005746:	69f9      	ldr	r1, [r7, #28]
 8005748:	6a3a      	ldr	r2, [r7, #32]
 800574a:	e841 2300 	strex	r3, r2, [r1]
 800574e:	61bb      	str	r3, [r7, #24]
   return(result);
 8005750:	69bb      	ldr	r3, [r7, #24]
 8005752:	2b00      	cmp	r3, #0
 8005754:	d1e5      	bne.n	8005722 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f003 0310 	and.w	r3, r3, #16
 8005760:	2b10      	cmp	r3, #16
 8005762:	d10a      	bne.n	800577a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005764:	2300      	movs	r3, #0
 8005766:	60fb      	str	r3, [r7, #12]
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	60fb      	str	r3, [r7, #12]
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	685b      	ldr	r3, [r3, #4]
 8005776:	60fb      	str	r3, [r7, #12]
 8005778:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800577e:	4619      	mov	r1, r3
 8005780:	6878      	ldr	r0, [r7, #4]
 8005782:	f7fb fda7 	bl	80012d4 <HAL_UARTEx_RxEventCallback>
 8005786:	e002      	b.n	800578e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005788:	6878      	ldr	r0, [r7, #4]
 800578a:	f7ff fc26 	bl	8004fda <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800578e:	2300      	movs	r3, #0
 8005790:	e002      	b.n	8005798 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005792:	2300      	movs	r3, #0
 8005794:	e000      	b.n	8005798 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005796:	2302      	movs	r3, #2
  }
}
 8005798:	4618      	mov	r0, r3
 800579a:	3730      	adds	r7, #48	; 0x30
 800579c:	46bd      	mov	sp, r7
 800579e:	bd80      	pop	{r7, pc}

080057a0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80057a0:	b580      	push	{r7, lr}
 80057a2:	b084      	sub	sp, #16
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	691b      	ldr	r3, [r3, #16]
 80057ae:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	68da      	ldr	r2, [r3, #12]
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	430a      	orrs	r2, r1
 80057bc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	689a      	ldr	r2, [r3, #8]
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	691b      	ldr	r3, [r3, #16]
 80057c6:	431a      	orrs	r2, r3
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	695b      	ldr	r3, [r3, #20]
 80057cc:	4313      	orrs	r3, r2
 80057ce:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	68db      	ldr	r3, [r3, #12]
 80057d6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80057da:	f023 030c 	bic.w	r3, r3, #12
 80057de:	687a      	ldr	r2, [r7, #4]
 80057e0:	6812      	ldr	r2, [r2, #0]
 80057e2:	68b9      	ldr	r1, [r7, #8]
 80057e4:	430b      	orrs	r3, r1
 80057e6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	695b      	ldr	r3, [r3, #20]
 80057ee:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	699a      	ldr	r2, [r3, #24]
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	430a      	orrs	r2, r1
 80057fc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	4a2c      	ldr	r2, [pc, #176]	; (80058b4 <UART_SetConfig+0x114>)
 8005804:	4293      	cmp	r3, r2
 8005806:	d103      	bne.n	8005810 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005808:	f7fe fa32 	bl	8003c70 <HAL_RCC_GetPCLK2Freq>
 800580c:	60f8      	str	r0, [r7, #12]
 800580e:	e002      	b.n	8005816 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005810:	f7fe fa1a 	bl	8003c48 <HAL_RCC_GetPCLK1Freq>
 8005814:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005816:	68fa      	ldr	r2, [r7, #12]
 8005818:	4613      	mov	r3, r2
 800581a:	009b      	lsls	r3, r3, #2
 800581c:	4413      	add	r3, r2
 800581e:	009a      	lsls	r2, r3, #2
 8005820:	441a      	add	r2, r3
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	685b      	ldr	r3, [r3, #4]
 8005826:	009b      	lsls	r3, r3, #2
 8005828:	fbb2 f3f3 	udiv	r3, r2, r3
 800582c:	4a22      	ldr	r2, [pc, #136]	; (80058b8 <UART_SetConfig+0x118>)
 800582e:	fba2 2303 	umull	r2, r3, r2, r3
 8005832:	095b      	lsrs	r3, r3, #5
 8005834:	0119      	lsls	r1, r3, #4
 8005836:	68fa      	ldr	r2, [r7, #12]
 8005838:	4613      	mov	r3, r2
 800583a:	009b      	lsls	r3, r3, #2
 800583c:	4413      	add	r3, r2
 800583e:	009a      	lsls	r2, r3, #2
 8005840:	441a      	add	r2, r3
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	685b      	ldr	r3, [r3, #4]
 8005846:	009b      	lsls	r3, r3, #2
 8005848:	fbb2 f2f3 	udiv	r2, r2, r3
 800584c:	4b1a      	ldr	r3, [pc, #104]	; (80058b8 <UART_SetConfig+0x118>)
 800584e:	fba3 0302 	umull	r0, r3, r3, r2
 8005852:	095b      	lsrs	r3, r3, #5
 8005854:	2064      	movs	r0, #100	; 0x64
 8005856:	fb00 f303 	mul.w	r3, r0, r3
 800585a:	1ad3      	subs	r3, r2, r3
 800585c:	011b      	lsls	r3, r3, #4
 800585e:	3332      	adds	r3, #50	; 0x32
 8005860:	4a15      	ldr	r2, [pc, #84]	; (80058b8 <UART_SetConfig+0x118>)
 8005862:	fba2 2303 	umull	r2, r3, r2, r3
 8005866:	095b      	lsrs	r3, r3, #5
 8005868:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800586c:	4419      	add	r1, r3
 800586e:	68fa      	ldr	r2, [r7, #12]
 8005870:	4613      	mov	r3, r2
 8005872:	009b      	lsls	r3, r3, #2
 8005874:	4413      	add	r3, r2
 8005876:	009a      	lsls	r2, r3, #2
 8005878:	441a      	add	r2, r3
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	685b      	ldr	r3, [r3, #4]
 800587e:	009b      	lsls	r3, r3, #2
 8005880:	fbb2 f2f3 	udiv	r2, r2, r3
 8005884:	4b0c      	ldr	r3, [pc, #48]	; (80058b8 <UART_SetConfig+0x118>)
 8005886:	fba3 0302 	umull	r0, r3, r3, r2
 800588a:	095b      	lsrs	r3, r3, #5
 800588c:	2064      	movs	r0, #100	; 0x64
 800588e:	fb00 f303 	mul.w	r3, r0, r3
 8005892:	1ad3      	subs	r3, r2, r3
 8005894:	011b      	lsls	r3, r3, #4
 8005896:	3332      	adds	r3, #50	; 0x32
 8005898:	4a07      	ldr	r2, [pc, #28]	; (80058b8 <UART_SetConfig+0x118>)
 800589a:	fba2 2303 	umull	r2, r3, r2, r3
 800589e:	095b      	lsrs	r3, r3, #5
 80058a0:	f003 020f 	and.w	r2, r3, #15
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	440a      	add	r2, r1
 80058aa:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80058ac:	bf00      	nop
 80058ae:	3710      	adds	r7, #16
 80058b0:	46bd      	mov	sp, r7
 80058b2:	bd80      	pop	{r7, pc}
 80058b4:	40013800 	.word	0x40013800
 80058b8:	51eb851f 	.word	0x51eb851f

080058bc <atof>:
 80058bc:	2100      	movs	r1, #0
 80058be:	f000 be3f 	b.w	8006540 <strtod>
	...

080058c4 <__errno>:
 80058c4:	4b01      	ldr	r3, [pc, #4]	; (80058cc <__errno+0x8>)
 80058c6:	6818      	ldr	r0, [r3, #0]
 80058c8:	4770      	bx	lr
 80058ca:	bf00      	nop
 80058cc:	2000000c 	.word	0x2000000c

080058d0 <__libc_init_array>:
 80058d0:	b570      	push	{r4, r5, r6, lr}
 80058d2:	2600      	movs	r6, #0
 80058d4:	4d0c      	ldr	r5, [pc, #48]	; (8005908 <__libc_init_array+0x38>)
 80058d6:	4c0d      	ldr	r4, [pc, #52]	; (800590c <__libc_init_array+0x3c>)
 80058d8:	1b64      	subs	r4, r4, r5
 80058da:	10a4      	asrs	r4, r4, #2
 80058dc:	42a6      	cmp	r6, r4
 80058de:	d109      	bne.n	80058f4 <__libc_init_array+0x24>
 80058e0:	f002 ff10 	bl	8008704 <_init>
 80058e4:	2600      	movs	r6, #0
 80058e6:	4d0a      	ldr	r5, [pc, #40]	; (8005910 <__libc_init_array+0x40>)
 80058e8:	4c0a      	ldr	r4, [pc, #40]	; (8005914 <__libc_init_array+0x44>)
 80058ea:	1b64      	subs	r4, r4, r5
 80058ec:	10a4      	asrs	r4, r4, #2
 80058ee:	42a6      	cmp	r6, r4
 80058f0:	d105      	bne.n	80058fe <__libc_init_array+0x2e>
 80058f2:	bd70      	pop	{r4, r5, r6, pc}
 80058f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80058f8:	4798      	blx	r3
 80058fa:	3601      	adds	r6, #1
 80058fc:	e7ee      	b.n	80058dc <__libc_init_array+0xc>
 80058fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8005902:	4798      	blx	r3
 8005904:	3601      	adds	r6, #1
 8005906:	e7f2      	b.n	80058ee <__libc_init_array+0x1e>
 8005908:	08008c08 	.word	0x08008c08
 800590c:	08008c08 	.word	0x08008c08
 8005910:	08008c08 	.word	0x08008c08
 8005914:	08008c0c 	.word	0x08008c0c

08005918 <memset>:
 8005918:	4603      	mov	r3, r0
 800591a:	4402      	add	r2, r0
 800591c:	4293      	cmp	r3, r2
 800591e:	d100      	bne.n	8005922 <memset+0xa>
 8005920:	4770      	bx	lr
 8005922:	f803 1b01 	strb.w	r1, [r3], #1
 8005926:	e7f9      	b.n	800591c <memset+0x4>

08005928 <sulp>:
 8005928:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800592c:	460f      	mov	r7, r1
 800592e:	4690      	mov	r8, r2
 8005930:	f001 fd9c 	bl	800746c <__ulp>
 8005934:	4604      	mov	r4, r0
 8005936:	460d      	mov	r5, r1
 8005938:	f1b8 0f00 	cmp.w	r8, #0
 800593c:	d011      	beq.n	8005962 <sulp+0x3a>
 800593e:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8005942:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8005946:	2b00      	cmp	r3, #0
 8005948:	dd0b      	ble.n	8005962 <sulp+0x3a>
 800594a:	2400      	movs	r4, #0
 800594c:	051b      	lsls	r3, r3, #20
 800594e:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8005952:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8005956:	4622      	mov	r2, r4
 8005958:	462b      	mov	r3, r5
 800595a:	f7fa fdbd 	bl	80004d8 <__aeabi_dmul>
 800595e:	4604      	mov	r4, r0
 8005960:	460d      	mov	r5, r1
 8005962:	4620      	mov	r0, r4
 8005964:	4629      	mov	r1, r5
 8005966:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800596a:	0000      	movs	r0, r0
 800596c:	0000      	movs	r0, r0
	...

08005970 <_strtod_l>:
 8005970:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005974:	469b      	mov	fp, r3
 8005976:	2300      	movs	r3, #0
 8005978:	b09f      	sub	sp, #124	; 0x7c
 800597a:	931a      	str	r3, [sp, #104]	; 0x68
 800597c:	4b9e      	ldr	r3, [pc, #632]	; (8005bf8 <_strtod_l+0x288>)
 800597e:	4682      	mov	sl, r0
 8005980:	681f      	ldr	r7, [r3, #0]
 8005982:	460e      	mov	r6, r1
 8005984:	4638      	mov	r0, r7
 8005986:	9215      	str	r2, [sp, #84]	; 0x54
 8005988:	f7fa fbe2 	bl	8000150 <strlen>
 800598c:	f04f 0800 	mov.w	r8, #0
 8005990:	4604      	mov	r4, r0
 8005992:	f04f 0900 	mov.w	r9, #0
 8005996:	9619      	str	r6, [sp, #100]	; 0x64
 8005998:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800599a:	781a      	ldrb	r2, [r3, #0]
 800599c:	2a2b      	cmp	r2, #43	; 0x2b
 800599e:	d04c      	beq.n	8005a3a <_strtod_l+0xca>
 80059a0:	d83a      	bhi.n	8005a18 <_strtod_l+0xa8>
 80059a2:	2a0d      	cmp	r2, #13
 80059a4:	d833      	bhi.n	8005a0e <_strtod_l+0x9e>
 80059a6:	2a08      	cmp	r2, #8
 80059a8:	d833      	bhi.n	8005a12 <_strtod_l+0xa2>
 80059aa:	2a00      	cmp	r2, #0
 80059ac:	d03d      	beq.n	8005a2a <_strtod_l+0xba>
 80059ae:	2300      	movs	r3, #0
 80059b0:	930a      	str	r3, [sp, #40]	; 0x28
 80059b2:	9d19      	ldr	r5, [sp, #100]	; 0x64
 80059b4:	782b      	ldrb	r3, [r5, #0]
 80059b6:	2b30      	cmp	r3, #48	; 0x30
 80059b8:	f040 80aa 	bne.w	8005b10 <_strtod_l+0x1a0>
 80059bc:	786b      	ldrb	r3, [r5, #1]
 80059be:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80059c2:	2b58      	cmp	r3, #88	; 0x58
 80059c4:	d166      	bne.n	8005a94 <_strtod_l+0x124>
 80059c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80059c8:	4650      	mov	r0, sl
 80059ca:	9301      	str	r3, [sp, #4]
 80059cc:	ab1a      	add	r3, sp, #104	; 0x68
 80059ce:	9300      	str	r3, [sp, #0]
 80059d0:	4a8a      	ldr	r2, [pc, #552]	; (8005bfc <_strtod_l+0x28c>)
 80059d2:	f8cd b008 	str.w	fp, [sp, #8]
 80059d6:	ab1b      	add	r3, sp, #108	; 0x6c
 80059d8:	a919      	add	r1, sp, #100	; 0x64
 80059da:	f000 feb1 	bl	8006740 <__gethex>
 80059de:	f010 0607 	ands.w	r6, r0, #7
 80059e2:	4604      	mov	r4, r0
 80059e4:	d005      	beq.n	80059f2 <_strtod_l+0x82>
 80059e6:	2e06      	cmp	r6, #6
 80059e8:	d129      	bne.n	8005a3e <_strtod_l+0xce>
 80059ea:	2300      	movs	r3, #0
 80059ec:	3501      	adds	r5, #1
 80059ee:	9519      	str	r5, [sp, #100]	; 0x64
 80059f0:	930a      	str	r3, [sp, #40]	; 0x28
 80059f2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	f040 858a 	bne.w	800650e <_strtod_l+0xb9e>
 80059fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80059fc:	b1d3      	cbz	r3, 8005a34 <_strtod_l+0xc4>
 80059fe:	4642      	mov	r2, r8
 8005a00:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8005a04:	4610      	mov	r0, r2
 8005a06:	4619      	mov	r1, r3
 8005a08:	b01f      	add	sp, #124	; 0x7c
 8005a0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a0e:	2a20      	cmp	r2, #32
 8005a10:	d1cd      	bne.n	80059ae <_strtod_l+0x3e>
 8005a12:	3301      	adds	r3, #1
 8005a14:	9319      	str	r3, [sp, #100]	; 0x64
 8005a16:	e7bf      	b.n	8005998 <_strtod_l+0x28>
 8005a18:	2a2d      	cmp	r2, #45	; 0x2d
 8005a1a:	d1c8      	bne.n	80059ae <_strtod_l+0x3e>
 8005a1c:	2201      	movs	r2, #1
 8005a1e:	920a      	str	r2, [sp, #40]	; 0x28
 8005a20:	1c5a      	adds	r2, r3, #1
 8005a22:	9219      	str	r2, [sp, #100]	; 0x64
 8005a24:	785b      	ldrb	r3, [r3, #1]
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d1c3      	bne.n	80059b2 <_strtod_l+0x42>
 8005a2a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005a2c:	9619      	str	r6, [sp, #100]	; 0x64
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	f040 856b 	bne.w	800650a <_strtod_l+0xb9a>
 8005a34:	4642      	mov	r2, r8
 8005a36:	464b      	mov	r3, r9
 8005a38:	e7e4      	b.n	8005a04 <_strtod_l+0x94>
 8005a3a:	2200      	movs	r2, #0
 8005a3c:	e7ef      	b.n	8005a1e <_strtod_l+0xae>
 8005a3e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8005a40:	b13a      	cbz	r2, 8005a52 <_strtod_l+0xe2>
 8005a42:	2135      	movs	r1, #53	; 0x35
 8005a44:	a81c      	add	r0, sp, #112	; 0x70
 8005a46:	f001 fe15 	bl	8007674 <__copybits>
 8005a4a:	4650      	mov	r0, sl
 8005a4c:	991a      	ldr	r1, [sp, #104]	; 0x68
 8005a4e:	f001 f9dd 	bl	8006e0c <_Bfree>
 8005a52:	3e01      	subs	r6, #1
 8005a54:	2e04      	cmp	r6, #4
 8005a56:	d806      	bhi.n	8005a66 <_strtod_l+0xf6>
 8005a58:	e8df f006 	tbb	[pc, r6]
 8005a5c:	1714030a 	.word	0x1714030a
 8005a60:	0a          	.byte	0x0a
 8005a61:	00          	.byte	0x00
 8005a62:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 8005a66:	0721      	lsls	r1, r4, #28
 8005a68:	d5c3      	bpl.n	80059f2 <_strtod_l+0x82>
 8005a6a:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8005a6e:	e7c0      	b.n	80059f2 <_strtod_l+0x82>
 8005a70:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8005a72:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 8005a76:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8005a7a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005a7e:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8005a82:	e7f0      	b.n	8005a66 <_strtod_l+0xf6>
 8005a84:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8005c00 <_strtod_l+0x290>
 8005a88:	e7ed      	b.n	8005a66 <_strtod_l+0xf6>
 8005a8a:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8005a8e:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8005a92:	e7e8      	b.n	8005a66 <_strtod_l+0xf6>
 8005a94:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005a96:	1c5a      	adds	r2, r3, #1
 8005a98:	9219      	str	r2, [sp, #100]	; 0x64
 8005a9a:	785b      	ldrb	r3, [r3, #1]
 8005a9c:	2b30      	cmp	r3, #48	; 0x30
 8005a9e:	d0f9      	beq.n	8005a94 <_strtod_l+0x124>
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d0a6      	beq.n	80059f2 <_strtod_l+0x82>
 8005aa4:	2301      	movs	r3, #1
 8005aa6:	9307      	str	r3, [sp, #28]
 8005aa8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005aaa:	220a      	movs	r2, #10
 8005aac:	9308      	str	r3, [sp, #32]
 8005aae:	2300      	movs	r3, #0
 8005ab0:	469b      	mov	fp, r3
 8005ab2:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8005ab6:	9819      	ldr	r0, [sp, #100]	; 0x64
 8005ab8:	7805      	ldrb	r5, [r0, #0]
 8005aba:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 8005abe:	b2d9      	uxtb	r1, r3
 8005ac0:	2909      	cmp	r1, #9
 8005ac2:	d927      	bls.n	8005b14 <_strtod_l+0x1a4>
 8005ac4:	4622      	mov	r2, r4
 8005ac6:	4639      	mov	r1, r7
 8005ac8:	f002 fa0c 	bl	8007ee4 <strncmp>
 8005acc:	2800      	cmp	r0, #0
 8005ace:	d033      	beq.n	8005b38 <_strtod_l+0x1c8>
 8005ad0:	2000      	movs	r0, #0
 8005ad2:	462a      	mov	r2, r5
 8005ad4:	465c      	mov	r4, fp
 8005ad6:	4603      	mov	r3, r0
 8005ad8:	9004      	str	r0, [sp, #16]
 8005ada:	2a65      	cmp	r2, #101	; 0x65
 8005adc:	d001      	beq.n	8005ae2 <_strtod_l+0x172>
 8005ade:	2a45      	cmp	r2, #69	; 0x45
 8005ae0:	d114      	bne.n	8005b0c <_strtod_l+0x19c>
 8005ae2:	b91c      	cbnz	r4, 8005aec <_strtod_l+0x17c>
 8005ae4:	9a07      	ldr	r2, [sp, #28]
 8005ae6:	4302      	orrs	r2, r0
 8005ae8:	d09f      	beq.n	8005a2a <_strtod_l+0xba>
 8005aea:	2400      	movs	r4, #0
 8005aec:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8005aee:	1c72      	adds	r2, r6, #1
 8005af0:	9219      	str	r2, [sp, #100]	; 0x64
 8005af2:	7872      	ldrb	r2, [r6, #1]
 8005af4:	2a2b      	cmp	r2, #43	; 0x2b
 8005af6:	d079      	beq.n	8005bec <_strtod_l+0x27c>
 8005af8:	2a2d      	cmp	r2, #45	; 0x2d
 8005afa:	f000 8083 	beq.w	8005c04 <_strtod_l+0x294>
 8005afe:	2700      	movs	r7, #0
 8005b00:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8005b04:	2909      	cmp	r1, #9
 8005b06:	f240 8083 	bls.w	8005c10 <_strtod_l+0x2a0>
 8005b0a:	9619      	str	r6, [sp, #100]	; 0x64
 8005b0c:	2500      	movs	r5, #0
 8005b0e:	e09f      	b.n	8005c50 <_strtod_l+0x2e0>
 8005b10:	2300      	movs	r3, #0
 8005b12:	e7c8      	b.n	8005aa6 <_strtod_l+0x136>
 8005b14:	f1bb 0f08 	cmp.w	fp, #8
 8005b18:	bfd5      	itete	le
 8005b1a:	9906      	ldrle	r1, [sp, #24]
 8005b1c:	9905      	ldrgt	r1, [sp, #20]
 8005b1e:	fb02 3301 	mlale	r3, r2, r1, r3
 8005b22:	fb02 3301 	mlagt	r3, r2, r1, r3
 8005b26:	f100 0001 	add.w	r0, r0, #1
 8005b2a:	bfd4      	ite	le
 8005b2c:	9306      	strle	r3, [sp, #24]
 8005b2e:	9305      	strgt	r3, [sp, #20]
 8005b30:	f10b 0b01 	add.w	fp, fp, #1
 8005b34:	9019      	str	r0, [sp, #100]	; 0x64
 8005b36:	e7be      	b.n	8005ab6 <_strtod_l+0x146>
 8005b38:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005b3a:	191a      	adds	r2, r3, r4
 8005b3c:	9219      	str	r2, [sp, #100]	; 0x64
 8005b3e:	5d1a      	ldrb	r2, [r3, r4]
 8005b40:	f1bb 0f00 	cmp.w	fp, #0
 8005b44:	d036      	beq.n	8005bb4 <_strtod_l+0x244>
 8005b46:	465c      	mov	r4, fp
 8005b48:	9004      	str	r0, [sp, #16]
 8005b4a:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8005b4e:	2b09      	cmp	r3, #9
 8005b50:	d912      	bls.n	8005b78 <_strtod_l+0x208>
 8005b52:	2301      	movs	r3, #1
 8005b54:	e7c1      	b.n	8005ada <_strtod_l+0x16a>
 8005b56:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005b58:	3001      	adds	r0, #1
 8005b5a:	1c5a      	adds	r2, r3, #1
 8005b5c:	9219      	str	r2, [sp, #100]	; 0x64
 8005b5e:	785a      	ldrb	r2, [r3, #1]
 8005b60:	2a30      	cmp	r2, #48	; 0x30
 8005b62:	d0f8      	beq.n	8005b56 <_strtod_l+0x1e6>
 8005b64:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8005b68:	2b08      	cmp	r3, #8
 8005b6a:	f200 84d5 	bhi.w	8006518 <_strtod_l+0xba8>
 8005b6e:	9004      	str	r0, [sp, #16]
 8005b70:	2000      	movs	r0, #0
 8005b72:	4604      	mov	r4, r0
 8005b74:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005b76:	9308      	str	r3, [sp, #32]
 8005b78:	3a30      	subs	r2, #48	; 0x30
 8005b7a:	f100 0301 	add.w	r3, r0, #1
 8005b7e:	d013      	beq.n	8005ba8 <_strtod_l+0x238>
 8005b80:	9904      	ldr	r1, [sp, #16]
 8005b82:	1905      	adds	r5, r0, r4
 8005b84:	4419      	add	r1, r3
 8005b86:	9104      	str	r1, [sp, #16]
 8005b88:	4623      	mov	r3, r4
 8005b8a:	210a      	movs	r1, #10
 8005b8c:	42ab      	cmp	r3, r5
 8005b8e:	d113      	bne.n	8005bb8 <_strtod_l+0x248>
 8005b90:	1823      	adds	r3, r4, r0
 8005b92:	2b08      	cmp	r3, #8
 8005b94:	f104 0401 	add.w	r4, r4, #1
 8005b98:	4404      	add	r4, r0
 8005b9a:	dc1b      	bgt.n	8005bd4 <_strtod_l+0x264>
 8005b9c:	230a      	movs	r3, #10
 8005b9e:	9906      	ldr	r1, [sp, #24]
 8005ba0:	fb03 2301 	mla	r3, r3, r1, r2
 8005ba4:	9306      	str	r3, [sp, #24]
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8005baa:	4618      	mov	r0, r3
 8005bac:	1c51      	adds	r1, r2, #1
 8005bae:	9119      	str	r1, [sp, #100]	; 0x64
 8005bb0:	7852      	ldrb	r2, [r2, #1]
 8005bb2:	e7ca      	b.n	8005b4a <_strtod_l+0x1da>
 8005bb4:	4658      	mov	r0, fp
 8005bb6:	e7d3      	b.n	8005b60 <_strtod_l+0x1f0>
 8005bb8:	2b08      	cmp	r3, #8
 8005bba:	dc04      	bgt.n	8005bc6 <_strtod_l+0x256>
 8005bbc:	9f06      	ldr	r7, [sp, #24]
 8005bbe:	434f      	muls	r7, r1
 8005bc0:	9706      	str	r7, [sp, #24]
 8005bc2:	3301      	adds	r3, #1
 8005bc4:	e7e2      	b.n	8005b8c <_strtod_l+0x21c>
 8005bc6:	1c5f      	adds	r7, r3, #1
 8005bc8:	2f10      	cmp	r7, #16
 8005bca:	bfde      	ittt	le
 8005bcc:	9f05      	ldrle	r7, [sp, #20]
 8005bce:	434f      	mulle	r7, r1
 8005bd0:	9705      	strle	r7, [sp, #20]
 8005bd2:	e7f6      	b.n	8005bc2 <_strtod_l+0x252>
 8005bd4:	2c10      	cmp	r4, #16
 8005bd6:	bfdf      	itttt	le
 8005bd8:	230a      	movle	r3, #10
 8005bda:	9905      	ldrle	r1, [sp, #20]
 8005bdc:	fb03 2301 	mlale	r3, r3, r1, r2
 8005be0:	9305      	strle	r3, [sp, #20]
 8005be2:	e7e0      	b.n	8005ba6 <_strtod_l+0x236>
 8005be4:	2300      	movs	r3, #0
 8005be6:	9304      	str	r3, [sp, #16]
 8005be8:	2301      	movs	r3, #1
 8005bea:	e77b      	b.n	8005ae4 <_strtod_l+0x174>
 8005bec:	2700      	movs	r7, #0
 8005bee:	1cb2      	adds	r2, r6, #2
 8005bf0:	9219      	str	r2, [sp, #100]	; 0x64
 8005bf2:	78b2      	ldrb	r2, [r6, #2]
 8005bf4:	e784      	b.n	8005b00 <_strtod_l+0x190>
 8005bf6:	bf00      	nop
 8005bf8:	08008908 	.word	0x08008908
 8005bfc:	08008790 	.word	0x08008790
 8005c00:	7ff00000 	.word	0x7ff00000
 8005c04:	2701      	movs	r7, #1
 8005c06:	e7f2      	b.n	8005bee <_strtod_l+0x27e>
 8005c08:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8005c0a:	1c51      	adds	r1, r2, #1
 8005c0c:	9119      	str	r1, [sp, #100]	; 0x64
 8005c0e:	7852      	ldrb	r2, [r2, #1]
 8005c10:	2a30      	cmp	r2, #48	; 0x30
 8005c12:	d0f9      	beq.n	8005c08 <_strtod_l+0x298>
 8005c14:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8005c18:	2908      	cmp	r1, #8
 8005c1a:	f63f af77 	bhi.w	8005b0c <_strtod_l+0x19c>
 8005c1e:	f04f 0e0a 	mov.w	lr, #10
 8005c22:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 8005c26:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8005c28:	9209      	str	r2, [sp, #36]	; 0x24
 8005c2a:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8005c2c:	1c51      	adds	r1, r2, #1
 8005c2e:	9119      	str	r1, [sp, #100]	; 0x64
 8005c30:	7852      	ldrb	r2, [r2, #1]
 8005c32:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 8005c36:	2d09      	cmp	r5, #9
 8005c38:	d935      	bls.n	8005ca6 <_strtod_l+0x336>
 8005c3a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8005c3c:	1b49      	subs	r1, r1, r5
 8005c3e:	2908      	cmp	r1, #8
 8005c40:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8005c44:	dc02      	bgt.n	8005c4c <_strtod_l+0x2dc>
 8005c46:	4565      	cmp	r5, ip
 8005c48:	bfa8      	it	ge
 8005c4a:	4665      	movge	r5, ip
 8005c4c:	b107      	cbz	r7, 8005c50 <_strtod_l+0x2e0>
 8005c4e:	426d      	negs	r5, r5
 8005c50:	2c00      	cmp	r4, #0
 8005c52:	d14c      	bne.n	8005cee <_strtod_l+0x37e>
 8005c54:	9907      	ldr	r1, [sp, #28]
 8005c56:	4301      	orrs	r1, r0
 8005c58:	f47f aecb 	bne.w	80059f2 <_strtod_l+0x82>
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	f47f aee4 	bne.w	8005a2a <_strtod_l+0xba>
 8005c62:	2a69      	cmp	r2, #105	; 0x69
 8005c64:	d026      	beq.n	8005cb4 <_strtod_l+0x344>
 8005c66:	dc23      	bgt.n	8005cb0 <_strtod_l+0x340>
 8005c68:	2a49      	cmp	r2, #73	; 0x49
 8005c6a:	d023      	beq.n	8005cb4 <_strtod_l+0x344>
 8005c6c:	2a4e      	cmp	r2, #78	; 0x4e
 8005c6e:	f47f aedc 	bne.w	8005a2a <_strtod_l+0xba>
 8005c72:	499d      	ldr	r1, [pc, #628]	; (8005ee8 <_strtod_l+0x578>)
 8005c74:	a819      	add	r0, sp, #100	; 0x64
 8005c76:	f000 ffb1 	bl	8006bdc <__match>
 8005c7a:	2800      	cmp	r0, #0
 8005c7c:	f43f aed5 	beq.w	8005a2a <_strtod_l+0xba>
 8005c80:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005c82:	781b      	ldrb	r3, [r3, #0]
 8005c84:	2b28      	cmp	r3, #40	; 0x28
 8005c86:	d12c      	bne.n	8005ce2 <_strtod_l+0x372>
 8005c88:	4998      	ldr	r1, [pc, #608]	; (8005eec <_strtod_l+0x57c>)
 8005c8a:	aa1c      	add	r2, sp, #112	; 0x70
 8005c8c:	a819      	add	r0, sp, #100	; 0x64
 8005c8e:	f000 ffb9 	bl	8006c04 <__hexnan>
 8005c92:	2805      	cmp	r0, #5
 8005c94:	d125      	bne.n	8005ce2 <_strtod_l+0x372>
 8005c96:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005c98:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 8005c9c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8005ca0:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8005ca4:	e6a5      	b.n	80059f2 <_strtod_l+0x82>
 8005ca6:	fb0e 2c0c 	mla	ip, lr, ip, r2
 8005caa:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 8005cae:	e7bc      	b.n	8005c2a <_strtod_l+0x2ba>
 8005cb0:	2a6e      	cmp	r2, #110	; 0x6e
 8005cb2:	e7dc      	b.n	8005c6e <_strtod_l+0x2fe>
 8005cb4:	498e      	ldr	r1, [pc, #568]	; (8005ef0 <_strtod_l+0x580>)
 8005cb6:	a819      	add	r0, sp, #100	; 0x64
 8005cb8:	f000 ff90 	bl	8006bdc <__match>
 8005cbc:	2800      	cmp	r0, #0
 8005cbe:	f43f aeb4 	beq.w	8005a2a <_strtod_l+0xba>
 8005cc2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005cc4:	498b      	ldr	r1, [pc, #556]	; (8005ef4 <_strtod_l+0x584>)
 8005cc6:	3b01      	subs	r3, #1
 8005cc8:	a819      	add	r0, sp, #100	; 0x64
 8005cca:	9319      	str	r3, [sp, #100]	; 0x64
 8005ccc:	f000 ff86 	bl	8006bdc <__match>
 8005cd0:	b910      	cbnz	r0, 8005cd8 <_strtod_l+0x368>
 8005cd2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005cd4:	3301      	adds	r3, #1
 8005cd6:	9319      	str	r3, [sp, #100]	; 0x64
 8005cd8:	f04f 0800 	mov.w	r8, #0
 8005cdc:	f8df 9218 	ldr.w	r9, [pc, #536]	; 8005ef8 <_strtod_l+0x588>
 8005ce0:	e687      	b.n	80059f2 <_strtod_l+0x82>
 8005ce2:	4886      	ldr	r0, [pc, #536]	; (8005efc <_strtod_l+0x58c>)
 8005ce4:	f002 f8e8 	bl	8007eb8 <nan>
 8005ce8:	4680      	mov	r8, r0
 8005cea:	4689      	mov	r9, r1
 8005cec:	e681      	b.n	80059f2 <_strtod_l+0x82>
 8005cee:	9b04      	ldr	r3, [sp, #16]
 8005cf0:	f1bb 0f00 	cmp.w	fp, #0
 8005cf4:	bf08      	it	eq
 8005cf6:	46a3      	moveq	fp, r4
 8005cf8:	1aeb      	subs	r3, r5, r3
 8005cfa:	2c10      	cmp	r4, #16
 8005cfc:	9806      	ldr	r0, [sp, #24]
 8005cfe:	4626      	mov	r6, r4
 8005d00:	9307      	str	r3, [sp, #28]
 8005d02:	bfa8      	it	ge
 8005d04:	2610      	movge	r6, #16
 8005d06:	f7fa fb6d 	bl	80003e4 <__aeabi_ui2d>
 8005d0a:	2c09      	cmp	r4, #9
 8005d0c:	4680      	mov	r8, r0
 8005d0e:	4689      	mov	r9, r1
 8005d10:	dd13      	ble.n	8005d3a <_strtod_l+0x3ca>
 8005d12:	4b7b      	ldr	r3, [pc, #492]	; (8005f00 <_strtod_l+0x590>)
 8005d14:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8005d18:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8005d1c:	f7fa fbdc 	bl	80004d8 <__aeabi_dmul>
 8005d20:	4680      	mov	r8, r0
 8005d22:	9805      	ldr	r0, [sp, #20]
 8005d24:	4689      	mov	r9, r1
 8005d26:	f7fa fb5d 	bl	80003e4 <__aeabi_ui2d>
 8005d2a:	4602      	mov	r2, r0
 8005d2c:	460b      	mov	r3, r1
 8005d2e:	4640      	mov	r0, r8
 8005d30:	4649      	mov	r1, r9
 8005d32:	f7fa fa1b 	bl	800016c <__adddf3>
 8005d36:	4680      	mov	r8, r0
 8005d38:	4689      	mov	r9, r1
 8005d3a:	2c0f      	cmp	r4, #15
 8005d3c:	dc36      	bgt.n	8005dac <_strtod_l+0x43c>
 8005d3e:	9b07      	ldr	r3, [sp, #28]
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	f43f ae56 	beq.w	80059f2 <_strtod_l+0x82>
 8005d46:	dd22      	ble.n	8005d8e <_strtod_l+0x41e>
 8005d48:	2b16      	cmp	r3, #22
 8005d4a:	dc09      	bgt.n	8005d60 <_strtod_l+0x3f0>
 8005d4c:	496c      	ldr	r1, [pc, #432]	; (8005f00 <_strtod_l+0x590>)
 8005d4e:	4642      	mov	r2, r8
 8005d50:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005d54:	464b      	mov	r3, r9
 8005d56:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005d5a:	f7fa fbbd 	bl	80004d8 <__aeabi_dmul>
 8005d5e:	e7c3      	b.n	8005ce8 <_strtod_l+0x378>
 8005d60:	9a07      	ldr	r2, [sp, #28]
 8005d62:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8005d66:	4293      	cmp	r3, r2
 8005d68:	db20      	blt.n	8005dac <_strtod_l+0x43c>
 8005d6a:	4d65      	ldr	r5, [pc, #404]	; (8005f00 <_strtod_l+0x590>)
 8005d6c:	f1c4 040f 	rsb	r4, r4, #15
 8005d70:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8005d74:	4642      	mov	r2, r8
 8005d76:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005d7a:	464b      	mov	r3, r9
 8005d7c:	f7fa fbac 	bl	80004d8 <__aeabi_dmul>
 8005d80:	9b07      	ldr	r3, [sp, #28]
 8005d82:	1b1c      	subs	r4, r3, r4
 8005d84:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8005d88:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005d8c:	e7e5      	b.n	8005d5a <_strtod_l+0x3ea>
 8005d8e:	9b07      	ldr	r3, [sp, #28]
 8005d90:	3316      	adds	r3, #22
 8005d92:	db0b      	blt.n	8005dac <_strtod_l+0x43c>
 8005d94:	9b04      	ldr	r3, [sp, #16]
 8005d96:	4640      	mov	r0, r8
 8005d98:	1b5d      	subs	r5, r3, r5
 8005d9a:	4b59      	ldr	r3, [pc, #356]	; (8005f00 <_strtod_l+0x590>)
 8005d9c:	4649      	mov	r1, r9
 8005d9e:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8005da2:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005da6:	f7fa fcc1 	bl	800072c <__aeabi_ddiv>
 8005daa:	e79d      	b.n	8005ce8 <_strtod_l+0x378>
 8005dac:	9b07      	ldr	r3, [sp, #28]
 8005dae:	1ba6      	subs	r6, r4, r6
 8005db0:	441e      	add	r6, r3
 8005db2:	2e00      	cmp	r6, #0
 8005db4:	dd74      	ble.n	8005ea0 <_strtod_l+0x530>
 8005db6:	f016 030f 	ands.w	r3, r6, #15
 8005dba:	d00a      	beq.n	8005dd2 <_strtod_l+0x462>
 8005dbc:	4950      	ldr	r1, [pc, #320]	; (8005f00 <_strtod_l+0x590>)
 8005dbe:	4642      	mov	r2, r8
 8005dc0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005dc4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005dc8:	464b      	mov	r3, r9
 8005dca:	f7fa fb85 	bl	80004d8 <__aeabi_dmul>
 8005dce:	4680      	mov	r8, r0
 8005dd0:	4689      	mov	r9, r1
 8005dd2:	f036 060f 	bics.w	r6, r6, #15
 8005dd6:	d052      	beq.n	8005e7e <_strtod_l+0x50e>
 8005dd8:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 8005ddc:	dd27      	ble.n	8005e2e <_strtod_l+0x4be>
 8005dde:	f04f 0b00 	mov.w	fp, #0
 8005de2:	f8cd b010 	str.w	fp, [sp, #16]
 8005de6:	f8cd b020 	str.w	fp, [sp, #32]
 8005dea:	f8cd b018 	str.w	fp, [sp, #24]
 8005dee:	2322      	movs	r3, #34	; 0x22
 8005df0:	f04f 0800 	mov.w	r8, #0
 8005df4:	f8df 9100 	ldr.w	r9, [pc, #256]	; 8005ef8 <_strtod_l+0x588>
 8005df8:	f8ca 3000 	str.w	r3, [sl]
 8005dfc:	9b08      	ldr	r3, [sp, #32]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	f43f adf7 	beq.w	80059f2 <_strtod_l+0x82>
 8005e04:	4650      	mov	r0, sl
 8005e06:	991a      	ldr	r1, [sp, #104]	; 0x68
 8005e08:	f001 f800 	bl	8006e0c <_Bfree>
 8005e0c:	4650      	mov	r0, sl
 8005e0e:	9906      	ldr	r1, [sp, #24]
 8005e10:	f000 fffc 	bl	8006e0c <_Bfree>
 8005e14:	4650      	mov	r0, sl
 8005e16:	9904      	ldr	r1, [sp, #16]
 8005e18:	f000 fff8 	bl	8006e0c <_Bfree>
 8005e1c:	4650      	mov	r0, sl
 8005e1e:	9908      	ldr	r1, [sp, #32]
 8005e20:	f000 fff4 	bl	8006e0c <_Bfree>
 8005e24:	4659      	mov	r1, fp
 8005e26:	4650      	mov	r0, sl
 8005e28:	f000 fff0 	bl	8006e0c <_Bfree>
 8005e2c:	e5e1      	b.n	80059f2 <_strtod_l+0x82>
 8005e2e:	4b35      	ldr	r3, [pc, #212]	; (8005f04 <_strtod_l+0x594>)
 8005e30:	4640      	mov	r0, r8
 8005e32:	9305      	str	r3, [sp, #20]
 8005e34:	2300      	movs	r3, #0
 8005e36:	4649      	mov	r1, r9
 8005e38:	461f      	mov	r7, r3
 8005e3a:	1136      	asrs	r6, r6, #4
 8005e3c:	2e01      	cmp	r6, #1
 8005e3e:	dc21      	bgt.n	8005e84 <_strtod_l+0x514>
 8005e40:	b10b      	cbz	r3, 8005e46 <_strtod_l+0x4d6>
 8005e42:	4680      	mov	r8, r0
 8005e44:	4689      	mov	r9, r1
 8005e46:	4b2f      	ldr	r3, [pc, #188]	; (8005f04 <_strtod_l+0x594>)
 8005e48:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8005e4c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8005e50:	4642      	mov	r2, r8
 8005e52:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005e56:	464b      	mov	r3, r9
 8005e58:	f7fa fb3e 	bl	80004d8 <__aeabi_dmul>
 8005e5c:	4b26      	ldr	r3, [pc, #152]	; (8005ef8 <_strtod_l+0x588>)
 8005e5e:	460a      	mov	r2, r1
 8005e60:	400b      	ands	r3, r1
 8005e62:	4929      	ldr	r1, [pc, #164]	; (8005f08 <_strtod_l+0x598>)
 8005e64:	4680      	mov	r8, r0
 8005e66:	428b      	cmp	r3, r1
 8005e68:	d8b9      	bhi.n	8005dde <_strtod_l+0x46e>
 8005e6a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8005e6e:	428b      	cmp	r3, r1
 8005e70:	bf86      	itte	hi
 8005e72:	f04f 38ff 	movhi.w	r8, #4294967295	; 0xffffffff
 8005e76:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 8005f0c <_strtod_l+0x59c>
 8005e7a:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8005e7e:	2300      	movs	r3, #0
 8005e80:	9305      	str	r3, [sp, #20]
 8005e82:	e07f      	b.n	8005f84 <_strtod_l+0x614>
 8005e84:	07f2      	lsls	r2, r6, #31
 8005e86:	d505      	bpl.n	8005e94 <_strtod_l+0x524>
 8005e88:	9b05      	ldr	r3, [sp, #20]
 8005e8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e8e:	f7fa fb23 	bl	80004d8 <__aeabi_dmul>
 8005e92:	2301      	movs	r3, #1
 8005e94:	9a05      	ldr	r2, [sp, #20]
 8005e96:	3701      	adds	r7, #1
 8005e98:	3208      	adds	r2, #8
 8005e9a:	1076      	asrs	r6, r6, #1
 8005e9c:	9205      	str	r2, [sp, #20]
 8005e9e:	e7cd      	b.n	8005e3c <_strtod_l+0x4cc>
 8005ea0:	d0ed      	beq.n	8005e7e <_strtod_l+0x50e>
 8005ea2:	4276      	negs	r6, r6
 8005ea4:	f016 020f 	ands.w	r2, r6, #15
 8005ea8:	d00a      	beq.n	8005ec0 <_strtod_l+0x550>
 8005eaa:	4b15      	ldr	r3, [pc, #84]	; (8005f00 <_strtod_l+0x590>)
 8005eac:	4640      	mov	r0, r8
 8005eae:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005eb2:	4649      	mov	r1, r9
 8005eb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005eb8:	f7fa fc38 	bl	800072c <__aeabi_ddiv>
 8005ebc:	4680      	mov	r8, r0
 8005ebe:	4689      	mov	r9, r1
 8005ec0:	1136      	asrs	r6, r6, #4
 8005ec2:	d0dc      	beq.n	8005e7e <_strtod_l+0x50e>
 8005ec4:	2e1f      	cmp	r6, #31
 8005ec6:	dd23      	ble.n	8005f10 <_strtod_l+0x5a0>
 8005ec8:	f04f 0b00 	mov.w	fp, #0
 8005ecc:	f8cd b010 	str.w	fp, [sp, #16]
 8005ed0:	f8cd b020 	str.w	fp, [sp, #32]
 8005ed4:	f8cd b018 	str.w	fp, [sp, #24]
 8005ed8:	2322      	movs	r3, #34	; 0x22
 8005eda:	f04f 0800 	mov.w	r8, #0
 8005ede:	f04f 0900 	mov.w	r9, #0
 8005ee2:	f8ca 3000 	str.w	r3, [sl]
 8005ee6:	e789      	b.n	8005dfc <_strtod_l+0x48c>
 8005ee8:	0800878d 	.word	0x0800878d
 8005eec:	080087a4 	.word	0x080087a4
 8005ef0:	08008784 	.word	0x08008784
 8005ef4:	08008787 	.word	0x08008787
 8005ef8:	7ff00000 	.word	0x7ff00000
 8005efc:	0800888f 	.word	0x0800888f
 8005f00:	080089a0 	.word	0x080089a0
 8005f04:	08008978 	.word	0x08008978
 8005f08:	7ca00000 	.word	0x7ca00000
 8005f0c:	7fefffff 	.word	0x7fefffff
 8005f10:	f016 0310 	ands.w	r3, r6, #16
 8005f14:	bf18      	it	ne
 8005f16:	236a      	movne	r3, #106	; 0x6a
 8005f18:	4640      	mov	r0, r8
 8005f1a:	9305      	str	r3, [sp, #20]
 8005f1c:	4649      	mov	r1, r9
 8005f1e:	2300      	movs	r3, #0
 8005f20:	4fb0      	ldr	r7, [pc, #704]	; (80061e4 <_strtod_l+0x874>)
 8005f22:	07f2      	lsls	r2, r6, #31
 8005f24:	d504      	bpl.n	8005f30 <_strtod_l+0x5c0>
 8005f26:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005f2a:	f7fa fad5 	bl	80004d8 <__aeabi_dmul>
 8005f2e:	2301      	movs	r3, #1
 8005f30:	1076      	asrs	r6, r6, #1
 8005f32:	f107 0708 	add.w	r7, r7, #8
 8005f36:	d1f4      	bne.n	8005f22 <_strtod_l+0x5b2>
 8005f38:	b10b      	cbz	r3, 8005f3e <_strtod_l+0x5ce>
 8005f3a:	4680      	mov	r8, r0
 8005f3c:	4689      	mov	r9, r1
 8005f3e:	9b05      	ldr	r3, [sp, #20]
 8005f40:	b1c3      	cbz	r3, 8005f74 <_strtod_l+0x604>
 8005f42:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8005f46:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	4649      	mov	r1, r9
 8005f4e:	dd11      	ble.n	8005f74 <_strtod_l+0x604>
 8005f50:	2b1f      	cmp	r3, #31
 8005f52:	f340 8127 	ble.w	80061a4 <_strtod_l+0x834>
 8005f56:	2b34      	cmp	r3, #52	; 0x34
 8005f58:	bfd8      	it	le
 8005f5a:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
 8005f5e:	f04f 0800 	mov.w	r8, #0
 8005f62:	bfcf      	iteee	gt
 8005f64:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8005f68:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8005f6c:	fa03 f202 	lslle.w	r2, r3, r2
 8005f70:	ea02 0901 	andle.w	r9, r2, r1
 8005f74:	2200      	movs	r2, #0
 8005f76:	2300      	movs	r3, #0
 8005f78:	4640      	mov	r0, r8
 8005f7a:	4649      	mov	r1, r9
 8005f7c:	f7fa fd14 	bl	80009a8 <__aeabi_dcmpeq>
 8005f80:	2800      	cmp	r0, #0
 8005f82:	d1a1      	bne.n	8005ec8 <_strtod_l+0x558>
 8005f84:	9b06      	ldr	r3, [sp, #24]
 8005f86:	465a      	mov	r2, fp
 8005f88:	9300      	str	r3, [sp, #0]
 8005f8a:	4650      	mov	r0, sl
 8005f8c:	4623      	mov	r3, r4
 8005f8e:	9908      	ldr	r1, [sp, #32]
 8005f90:	f000 ffa4 	bl	8006edc <__s2b>
 8005f94:	9008      	str	r0, [sp, #32]
 8005f96:	2800      	cmp	r0, #0
 8005f98:	f43f af21 	beq.w	8005dde <_strtod_l+0x46e>
 8005f9c:	9b04      	ldr	r3, [sp, #16]
 8005f9e:	f04f 0b00 	mov.w	fp, #0
 8005fa2:	1b5d      	subs	r5, r3, r5
 8005fa4:	9b07      	ldr	r3, [sp, #28]
 8005fa6:	f8cd b010 	str.w	fp, [sp, #16]
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	bfb4      	ite	lt
 8005fae:	462b      	movlt	r3, r5
 8005fb0:	2300      	movge	r3, #0
 8005fb2:	930e      	str	r3, [sp, #56]	; 0x38
 8005fb4:	9b07      	ldr	r3, [sp, #28]
 8005fb6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8005fba:	9314      	str	r3, [sp, #80]	; 0x50
 8005fbc:	9b08      	ldr	r3, [sp, #32]
 8005fbe:	4650      	mov	r0, sl
 8005fc0:	6859      	ldr	r1, [r3, #4]
 8005fc2:	f000 fee3 	bl	8006d8c <_Balloc>
 8005fc6:	9006      	str	r0, [sp, #24]
 8005fc8:	2800      	cmp	r0, #0
 8005fca:	f43f af10 	beq.w	8005dee <_strtod_l+0x47e>
 8005fce:	9b08      	ldr	r3, [sp, #32]
 8005fd0:	300c      	adds	r0, #12
 8005fd2:	691a      	ldr	r2, [r3, #16]
 8005fd4:	f103 010c 	add.w	r1, r3, #12
 8005fd8:	3202      	adds	r2, #2
 8005fda:	0092      	lsls	r2, r2, #2
 8005fdc:	f000 fec8 	bl	8006d70 <memcpy>
 8005fe0:	ab1c      	add	r3, sp, #112	; 0x70
 8005fe2:	9301      	str	r3, [sp, #4]
 8005fe4:	ab1b      	add	r3, sp, #108	; 0x6c
 8005fe6:	9300      	str	r3, [sp, #0]
 8005fe8:	4642      	mov	r2, r8
 8005fea:	464b      	mov	r3, r9
 8005fec:	4650      	mov	r0, sl
 8005fee:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 8005ff2:	f001 fab5 	bl	8007560 <__d2b>
 8005ff6:	901a      	str	r0, [sp, #104]	; 0x68
 8005ff8:	2800      	cmp	r0, #0
 8005ffa:	f43f aef8 	beq.w	8005dee <_strtod_l+0x47e>
 8005ffe:	2101      	movs	r1, #1
 8006000:	4650      	mov	r0, sl
 8006002:	f001 f803 	bl	800700c <__i2b>
 8006006:	4603      	mov	r3, r0
 8006008:	9004      	str	r0, [sp, #16]
 800600a:	2800      	cmp	r0, #0
 800600c:	f43f aeef 	beq.w	8005dee <_strtod_l+0x47e>
 8006010:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8006012:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8006014:	2d00      	cmp	r5, #0
 8006016:	bfab      	itete	ge
 8006018:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800601a:	9b14      	ldrlt	r3, [sp, #80]	; 0x50
 800601c:	18ee      	addge	r6, r5, r3
 800601e:	1b5c      	sublt	r4, r3, r5
 8006020:	9b05      	ldr	r3, [sp, #20]
 8006022:	bfa8      	it	ge
 8006024:	9c14      	ldrge	r4, [sp, #80]	; 0x50
 8006026:	eba5 0503 	sub.w	r5, r5, r3
 800602a:	4415      	add	r5, r2
 800602c:	4b6e      	ldr	r3, [pc, #440]	; (80061e8 <_strtod_l+0x878>)
 800602e:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
 8006032:	bfb8      	it	lt
 8006034:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 8006036:	429d      	cmp	r5, r3
 8006038:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800603c:	f280 80c4 	bge.w	80061c8 <_strtod_l+0x858>
 8006040:	1b5b      	subs	r3, r3, r5
 8006042:	2b1f      	cmp	r3, #31
 8006044:	f04f 0701 	mov.w	r7, #1
 8006048:	eba2 0203 	sub.w	r2, r2, r3
 800604c:	f300 80b1 	bgt.w	80061b2 <_strtod_l+0x842>
 8006050:	2500      	movs	r5, #0
 8006052:	fa07 f303 	lsl.w	r3, r7, r3
 8006056:	930f      	str	r3, [sp, #60]	; 0x3c
 8006058:	18b7      	adds	r7, r6, r2
 800605a:	9b05      	ldr	r3, [sp, #20]
 800605c:	42be      	cmp	r6, r7
 800605e:	4414      	add	r4, r2
 8006060:	441c      	add	r4, r3
 8006062:	4633      	mov	r3, r6
 8006064:	bfa8      	it	ge
 8006066:	463b      	movge	r3, r7
 8006068:	42a3      	cmp	r3, r4
 800606a:	bfa8      	it	ge
 800606c:	4623      	movge	r3, r4
 800606e:	2b00      	cmp	r3, #0
 8006070:	bfc2      	ittt	gt
 8006072:	1aff      	subgt	r7, r7, r3
 8006074:	1ae4      	subgt	r4, r4, r3
 8006076:	1af6      	subgt	r6, r6, r3
 8006078:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800607a:	2b00      	cmp	r3, #0
 800607c:	dd17      	ble.n	80060ae <_strtod_l+0x73e>
 800607e:	461a      	mov	r2, r3
 8006080:	4650      	mov	r0, sl
 8006082:	9904      	ldr	r1, [sp, #16]
 8006084:	f001 f880 	bl	8007188 <__pow5mult>
 8006088:	9004      	str	r0, [sp, #16]
 800608a:	2800      	cmp	r0, #0
 800608c:	f43f aeaf 	beq.w	8005dee <_strtod_l+0x47e>
 8006090:	4601      	mov	r1, r0
 8006092:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8006094:	4650      	mov	r0, sl
 8006096:	f000 ffcf 	bl	8007038 <__multiply>
 800609a:	9009      	str	r0, [sp, #36]	; 0x24
 800609c:	2800      	cmp	r0, #0
 800609e:	f43f aea6 	beq.w	8005dee <_strtod_l+0x47e>
 80060a2:	4650      	mov	r0, sl
 80060a4:	991a      	ldr	r1, [sp, #104]	; 0x68
 80060a6:	f000 feb1 	bl	8006e0c <_Bfree>
 80060aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80060ac:	931a      	str	r3, [sp, #104]	; 0x68
 80060ae:	2f00      	cmp	r7, #0
 80060b0:	f300 808e 	bgt.w	80061d0 <_strtod_l+0x860>
 80060b4:	9b07      	ldr	r3, [sp, #28]
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	dd08      	ble.n	80060cc <_strtod_l+0x75c>
 80060ba:	4650      	mov	r0, sl
 80060bc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80060be:	9906      	ldr	r1, [sp, #24]
 80060c0:	f001 f862 	bl	8007188 <__pow5mult>
 80060c4:	9006      	str	r0, [sp, #24]
 80060c6:	2800      	cmp	r0, #0
 80060c8:	f43f ae91 	beq.w	8005dee <_strtod_l+0x47e>
 80060cc:	2c00      	cmp	r4, #0
 80060ce:	dd08      	ble.n	80060e2 <_strtod_l+0x772>
 80060d0:	4622      	mov	r2, r4
 80060d2:	4650      	mov	r0, sl
 80060d4:	9906      	ldr	r1, [sp, #24]
 80060d6:	f001 f8b1 	bl	800723c <__lshift>
 80060da:	9006      	str	r0, [sp, #24]
 80060dc:	2800      	cmp	r0, #0
 80060de:	f43f ae86 	beq.w	8005dee <_strtod_l+0x47e>
 80060e2:	2e00      	cmp	r6, #0
 80060e4:	dd08      	ble.n	80060f8 <_strtod_l+0x788>
 80060e6:	4632      	mov	r2, r6
 80060e8:	4650      	mov	r0, sl
 80060ea:	9904      	ldr	r1, [sp, #16]
 80060ec:	f001 f8a6 	bl	800723c <__lshift>
 80060f0:	9004      	str	r0, [sp, #16]
 80060f2:	2800      	cmp	r0, #0
 80060f4:	f43f ae7b 	beq.w	8005dee <_strtod_l+0x47e>
 80060f8:	4650      	mov	r0, sl
 80060fa:	9a06      	ldr	r2, [sp, #24]
 80060fc:	991a      	ldr	r1, [sp, #104]	; 0x68
 80060fe:	f001 f929 	bl	8007354 <__mdiff>
 8006102:	4683      	mov	fp, r0
 8006104:	2800      	cmp	r0, #0
 8006106:	f43f ae72 	beq.w	8005dee <_strtod_l+0x47e>
 800610a:	2400      	movs	r4, #0
 800610c:	68c3      	ldr	r3, [r0, #12]
 800610e:	9904      	ldr	r1, [sp, #16]
 8006110:	60c4      	str	r4, [r0, #12]
 8006112:	930b      	str	r3, [sp, #44]	; 0x2c
 8006114:	f001 f902 	bl	800731c <__mcmp>
 8006118:	42a0      	cmp	r0, r4
 800611a:	da6b      	bge.n	80061f4 <_strtod_l+0x884>
 800611c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800611e:	ea53 0308 	orrs.w	r3, r3, r8
 8006122:	f040 8091 	bne.w	8006248 <_strtod_l+0x8d8>
 8006126:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800612a:	2b00      	cmp	r3, #0
 800612c:	f040 808c 	bne.w	8006248 <_strtod_l+0x8d8>
 8006130:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006134:	0d1b      	lsrs	r3, r3, #20
 8006136:	051b      	lsls	r3, r3, #20
 8006138:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800613c:	f240 8084 	bls.w	8006248 <_strtod_l+0x8d8>
 8006140:	f8db 3014 	ldr.w	r3, [fp, #20]
 8006144:	b91b      	cbnz	r3, 800614e <_strtod_l+0x7de>
 8006146:	f8db 3010 	ldr.w	r3, [fp, #16]
 800614a:	2b01      	cmp	r3, #1
 800614c:	dd7c      	ble.n	8006248 <_strtod_l+0x8d8>
 800614e:	4659      	mov	r1, fp
 8006150:	2201      	movs	r2, #1
 8006152:	4650      	mov	r0, sl
 8006154:	f001 f872 	bl	800723c <__lshift>
 8006158:	9904      	ldr	r1, [sp, #16]
 800615a:	4683      	mov	fp, r0
 800615c:	f001 f8de 	bl	800731c <__mcmp>
 8006160:	2800      	cmp	r0, #0
 8006162:	dd71      	ble.n	8006248 <_strtod_l+0x8d8>
 8006164:	9905      	ldr	r1, [sp, #20]
 8006166:	464b      	mov	r3, r9
 8006168:	4a20      	ldr	r2, [pc, #128]	; (80061ec <_strtod_l+0x87c>)
 800616a:	2900      	cmp	r1, #0
 800616c:	f000 808c 	beq.w	8006288 <_strtod_l+0x918>
 8006170:	ea02 0109 	and.w	r1, r2, r9
 8006174:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8006178:	f300 8086 	bgt.w	8006288 <_strtod_l+0x918>
 800617c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8006180:	f77f aeaa 	ble.w	8005ed8 <_strtod_l+0x568>
 8006184:	4640      	mov	r0, r8
 8006186:	4649      	mov	r1, r9
 8006188:	4b19      	ldr	r3, [pc, #100]	; (80061f0 <_strtod_l+0x880>)
 800618a:	2200      	movs	r2, #0
 800618c:	f7fa f9a4 	bl	80004d8 <__aeabi_dmul>
 8006190:	460b      	mov	r3, r1
 8006192:	4303      	orrs	r3, r0
 8006194:	bf08      	it	eq
 8006196:	2322      	moveq	r3, #34	; 0x22
 8006198:	4680      	mov	r8, r0
 800619a:	4689      	mov	r9, r1
 800619c:	bf08      	it	eq
 800619e:	f8ca 3000 	streq.w	r3, [sl]
 80061a2:	e62f      	b.n	8005e04 <_strtod_l+0x494>
 80061a4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80061a8:	fa02 f303 	lsl.w	r3, r2, r3
 80061ac:	ea03 0808 	and.w	r8, r3, r8
 80061b0:	e6e0      	b.n	8005f74 <_strtod_l+0x604>
 80061b2:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 80061b6:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 80061ba:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 80061be:	35e2      	adds	r5, #226	; 0xe2
 80061c0:	fa07 f505 	lsl.w	r5, r7, r5
 80061c4:	970f      	str	r7, [sp, #60]	; 0x3c
 80061c6:	e747      	b.n	8006058 <_strtod_l+0x6e8>
 80061c8:	2301      	movs	r3, #1
 80061ca:	2500      	movs	r5, #0
 80061cc:	930f      	str	r3, [sp, #60]	; 0x3c
 80061ce:	e743      	b.n	8006058 <_strtod_l+0x6e8>
 80061d0:	463a      	mov	r2, r7
 80061d2:	4650      	mov	r0, sl
 80061d4:	991a      	ldr	r1, [sp, #104]	; 0x68
 80061d6:	f001 f831 	bl	800723c <__lshift>
 80061da:	901a      	str	r0, [sp, #104]	; 0x68
 80061dc:	2800      	cmp	r0, #0
 80061de:	f47f af69 	bne.w	80060b4 <_strtod_l+0x744>
 80061e2:	e604      	b.n	8005dee <_strtod_l+0x47e>
 80061e4:	080087b8 	.word	0x080087b8
 80061e8:	fffffc02 	.word	0xfffffc02
 80061ec:	7ff00000 	.word	0x7ff00000
 80061f0:	39500000 	.word	0x39500000
 80061f4:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80061f8:	d165      	bne.n	80062c6 <_strtod_l+0x956>
 80061fa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80061fc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006200:	b35a      	cbz	r2, 800625a <_strtod_l+0x8ea>
 8006202:	4a99      	ldr	r2, [pc, #612]	; (8006468 <_strtod_l+0xaf8>)
 8006204:	4293      	cmp	r3, r2
 8006206:	d12b      	bne.n	8006260 <_strtod_l+0x8f0>
 8006208:	9b05      	ldr	r3, [sp, #20]
 800620a:	4641      	mov	r1, r8
 800620c:	b303      	cbz	r3, 8006250 <_strtod_l+0x8e0>
 800620e:	464a      	mov	r2, r9
 8006210:	4b96      	ldr	r3, [pc, #600]	; (800646c <_strtod_l+0xafc>)
 8006212:	4013      	ands	r3, r2
 8006214:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8006218:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800621c:	d81b      	bhi.n	8006256 <_strtod_l+0x8e6>
 800621e:	0d1b      	lsrs	r3, r3, #20
 8006220:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006224:	fa02 f303 	lsl.w	r3, r2, r3
 8006228:	4299      	cmp	r1, r3
 800622a:	d119      	bne.n	8006260 <_strtod_l+0x8f0>
 800622c:	4b90      	ldr	r3, [pc, #576]	; (8006470 <_strtod_l+0xb00>)
 800622e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006230:	429a      	cmp	r2, r3
 8006232:	d102      	bne.n	800623a <_strtod_l+0x8ca>
 8006234:	3101      	adds	r1, #1
 8006236:	f43f adda 	beq.w	8005dee <_strtod_l+0x47e>
 800623a:	f04f 0800 	mov.w	r8, #0
 800623e:	4b8b      	ldr	r3, [pc, #556]	; (800646c <_strtod_l+0xafc>)
 8006240:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006242:	401a      	ands	r2, r3
 8006244:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 8006248:	9b05      	ldr	r3, [sp, #20]
 800624a:	2b00      	cmp	r3, #0
 800624c:	d19a      	bne.n	8006184 <_strtod_l+0x814>
 800624e:	e5d9      	b.n	8005e04 <_strtod_l+0x494>
 8006250:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006254:	e7e8      	b.n	8006228 <_strtod_l+0x8b8>
 8006256:	4613      	mov	r3, r2
 8006258:	e7e6      	b.n	8006228 <_strtod_l+0x8b8>
 800625a:	ea53 0308 	orrs.w	r3, r3, r8
 800625e:	d081      	beq.n	8006164 <_strtod_l+0x7f4>
 8006260:	b1e5      	cbz	r5, 800629c <_strtod_l+0x92c>
 8006262:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006264:	421d      	tst	r5, r3
 8006266:	d0ef      	beq.n	8006248 <_strtod_l+0x8d8>
 8006268:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800626a:	4640      	mov	r0, r8
 800626c:	4649      	mov	r1, r9
 800626e:	9a05      	ldr	r2, [sp, #20]
 8006270:	b1c3      	cbz	r3, 80062a4 <_strtod_l+0x934>
 8006272:	f7ff fb59 	bl	8005928 <sulp>
 8006276:	4602      	mov	r2, r0
 8006278:	460b      	mov	r3, r1
 800627a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800627e:	f7f9 ff75 	bl	800016c <__adddf3>
 8006282:	4680      	mov	r8, r0
 8006284:	4689      	mov	r9, r1
 8006286:	e7df      	b.n	8006248 <_strtod_l+0x8d8>
 8006288:	4013      	ands	r3, r2
 800628a:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800628e:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8006292:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8006296:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800629a:	e7d5      	b.n	8006248 <_strtod_l+0x8d8>
 800629c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800629e:	ea13 0f08 	tst.w	r3, r8
 80062a2:	e7e0      	b.n	8006266 <_strtod_l+0x8f6>
 80062a4:	f7ff fb40 	bl	8005928 <sulp>
 80062a8:	4602      	mov	r2, r0
 80062aa:	460b      	mov	r3, r1
 80062ac:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80062b0:	f7f9 ff5a 	bl	8000168 <__aeabi_dsub>
 80062b4:	2200      	movs	r2, #0
 80062b6:	2300      	movs	r3, #0
 80062b8:	4680      	mov	r8, r0
 80062ba:	4689      	mov	r9, r1
 80062bc:	f7fa fb74 	bl	80009a8 <__aeabi_dcmpeq>
 80062c0:	2800      	cmp	r0, #0
 80062c2:	d0c1      	beq.n	8006248 <_strtod_l+0x8d8>
 80062c4:	e608      	b.n	8005ed8 <_strtod_l+0x568>
 80062c6:	4658      	mov	r0, fp
 80062c8:	9904      	ldr	r1, [sp, #16]
 80062ca:	f001 f9a5 	bl	8007618 <__ratio>
 80062ce:	2200      	movs	r2, #0
 80062d0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80062d4:	4606      	mov	r6, r0
 80062d6:	460f      	mov	r7, r1
 80062d8:	f7fa fb7a 	bl	80009d0 <__aeabi_dcmple>
 80062dc:	2800      	cmp	r0, #0
 80062de:	d070      	beq.n	80063c2 <_strtod_l+0xa52>
 80062e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d042      	beq.n	800636c <_strtod_l+0x9fc>
 80062e6:	2600      	movs	r6, #0
 80062e8:	4f62      	ldr	r7, [pc, #392]	; (8006474 <_strtod_l+0xb04>)
 80062ea:	4d62      	ldr	r5, [pc, #392]	; (8006474 <_strtod_l+0xb04>)
 80062ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80062ee:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80062f2:	0d1b      	lsrs	r3, r3, #20
 80062f4:	051b      	lsls	r3, r3, #20
 80062f6:	930f      	str	r3, [sp, #60]	; 0x3c
 80062f8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80062fa:	4b5f      	ldr	r3, [pc, #380]	; (8006478 <_strtod_l+0xb08>)
 80062fc:	429a      	cmp	r2, r3
 80062fe:	f040 80c3 	bne.w	8006488 <_strtod_l+0xb18>
 8006302:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006304:	4640      	mov	r0, r8
 8006306:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 800630a:	4649      	mov	r1, r9
 800630c:	f001 f8ae 	bl	800746c <__ulp>
 8006310:	4602      	mov	r2, r0
 8006312:	460b      	mov	r3, r1
 8006314:	4630      	mov	r0, r6
 8006316:	4639      	mov	r1, r7
 8006318:	f7fa f8de 	bl	80004d8 <__aeabi_dmul>
 800631c:	4642      	mov	r2, r8
 800631e:	464b      	mov	r3, r9
 8006320:	f7f9 ff24 	bl	800016c <__adddf3>
 8006324:	460b      	mov	r3, r1
 8006326:	4951      	ldr	r1, [pc, #324]	; (800646c <_strtod_l+0xafc>)
 8006328:	4a54      	ldr	r2, [pc, #336]	; (800647c <_strtod_l+0xb0c>)
 800632a:	4019      	ands	r1, r3
 800632c:	4291      	cmp	r1, r2
 800632e:	4680      	mov	r8, r0
 8006330:	d95d      	bls.n	80063ee <_strtod_l+0xa7e>
 8006332:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006334:	4b4e      	ldr	r3, [pc, #312]	; (8006470 <_strtod_l+0xb00>)
 8006336:	429a      	cmp	r2, r3
 8006338:	d103      	bne.n	8006342 <_strtod_l+0x9d2>
 800633a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800633c:	3301      	adds	r3, #1
 800633e:	f43f ad56 	beq.w	8005dee <_strtod_l+0x47e>
 8006342:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8006346:	f8df 9128 	ldr.w	r9, [pc, #296]	; 8006470 <_strtod_l+0xb00>
 800634a:	4650      	mov	r0, sl
 800634c:	991a      	ldr	r1, [sp, #104]	; 0x68
 800634e:	f000 fd5d 	bl	8006e0c <_Bfree>
 8006352:	4650      	mov	r0, sl
 8006354:	9906      	ldr	r1, [sp, #24]
 8006356:	f000 fd59 	bl	8006e0c <_Bfree>
 800635a:	4650      	mov	r0, sl
 800635c:	9904      	ldr	r1, [sp, #16]
 800635e:	f000 fd55 	bl	8006e0c <_Bfree>
 8006362:	4659      	mov	r1, fp
 8006364:	4650      	mov	r0, sl
 8006366:	f000 fd51 	bl	8006e0c <_Bfree>
 800636a:	e627      	b.n	8005fbc <_strtod_l+0x64c>
 800636c:	f1b8 0f00 	cmp.w	r8, #0
 8006370:	d119      	bne.n	80063a6 <_strtod_l+0xa36>
 8006372:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006374:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006378:	b9e3      	cbnz	r3, 80063b4 <_strtod_l+0xa44>
 800637a:	2200      	movs	r2, #0
 800637c:	4630      	mov	r0, r6
 800637e:	4639      	mov	r1, r7
 8006380:	4b3c      	ldr	r3, [pc, #240]	; (8006474 <_strtod_l+0xb04>)
 8006382:	f7fa fb1b 	bl	80009bc <__aeabi_dcmplt>
 8006386:	b9c8      	cbnz	r0, 80063bc <_strtod_l+0xa4c>
 8006388:	2200      	movs	r2, #0
 800638a:	4630      	mov	r0, r6
 800638c:	4639      	mov	r1, r7
 800638e:	4b3c      	ldr	r3, [pc, #240]	; (8006480 <_strtod_l+0xb10>)
 8006390:	f7fa f8a2 	bl	80004d8 <__aeabi_dmul>
 8006394:	4604      	mov	r4, r0
 8006396:	460d      	mov	r5, r1
 8006398:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800639c:	9416      	str	r4, [sp, #88]	; 0x58
 800639e:	9317      	str	r3, [sp, #92]	; 0x5c
 80063a0:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
 80063a4:	e7a2      	b.n	80062ec <_strtod_l+0x97c>
 80063a6:	f1b8 0f01 	cmp.w	r8, #1
 80063aa:	d103      	bne.n	80063b4 <_strtod_l+0xa44>
 80063ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	f43f ad92 	beq.w	8005ed8 <_strtod_l+0x568>
 80063b4:	2600      	movs	r6, #0
 80063b6:	2400      	movs	r4, #0
 80063b8:	4f32      	ldr	r7, [pc, #200]	; (8006484 <_strtod_l+0xb14>)
 80063ba:	e796      	b.n	80062ea <_strtod_l+0x97a>
 80063bc:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80063be:	4d30      	ldr	r5, [pc, #192]	; (8006480 <_strtod_l+0xb10>)
 80063c0:	e7ea      	b.n	8006398 <_strtod_l+0xa28>
 80063c2:	4b2f      	ldr	r3, [pc, #188]	; (8006480 <_strtod_l+0xb10>)
 80063c4:	2200      	movs	r2, #0
 80063c6:	4630      	mov	r0, r6
 80063c8:	4639      	mov	r1, r7
 80063ca:	f7fa f885 	bl	80004d8 <__aeabi_dmul>
 80063ce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80063d0:	4604      	mov	r4, r0
 80063d2:	460d      	mov	r5, r1
 80063d4:	b933      	cbnz	r3, 80063e4 <_strtod_l+0xa74>
 80063d6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80063da:	9010      	str	r0, [sp, #64]	; 0x40
 80063dc:	9311      	str	r3, [sp, #68]	; 0x44
 80063de:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80063e2:	e783      	b.n	80062ec <_strtod_l+0x97c>
 80063e4:	4602      	mov	r2, r0
 80063e6:	460b      	mov	r3, r1
 80063e8:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 80063ec:	e7f7      	b.n	80063de <_strtod_l+0xa6e>
 80063ee:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 80063f2:	9b05      	ldr	r3, [sp, #20]
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d1a8      	bne.n	800634a <_strtod_l+0x9da>
 80063f8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80063fc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80063fe:	0d1b      	lsrs	r3, r3, #20
 8006400:	051b      	lsls	r3, r3, #20
 8006402:	429a      	cmp	r2, r3
 8006404:	d1a1      	bne.n	800634a <_strtod_l+0x9da>
 8006406:	4620      	mov	r0, r4
 8006408:	4629      	mov	r1, r5
 800640a:	f7fa fe69 	bl	80010e0 <__aeabi_d2lz>
 800640e:	f7fa f835 	bl	800047c <__aeabi_l2d>
 8006412:	4602      	mov	r2, r0
 8006414:	460b      	mov	r3, r1
 8006416:	4620      	mov	r0, r4
 8006418:	4629      	mov	r1, r5
 800641a:	f7f9 fea5 	bl	8000168 <__aeabi_dsub>
 800641e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006420:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006424:	ea43 0308 	orr.w	r3, r3, r8
 8006428:	4313      	orrs	r3, r2
 800642a:	4604      	mov	r4, r0
 800642c:	460d      	mov	r5, r1
 800642e:	d066      	beq.n	80064fe <_strtod_l+0xb8e>
 8006430:	a309      	add	r3, pc, #36	; (adr r3, 8006458 <_strtod_l+0xae8>)
 8006432:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006436:	f7fa fac1 	bl	80009bc <__aeabi_dcmplt>
 800643a:	2800      	cmp	r0, #0
 800643c:	f47f ace2 	bne.w	8005e04 <_strtod_l+0x494>
 8006440:	a307      	add	r3, pc, #28	; (adr r3, 8006460 <_strtod_l+0xaf0>)
 8006442:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006446:	4620      	mov	r0, r4
 8006448:	4629      	mov	r1, r5
 800644a:	f7fa fad5 	bl	80009f8 <__aeabi_dcmpgt>
 800644e:	2800      	cmp	r0, #0
 8006450:	f43f af7b 	beq.w	800634a <_strtod_l+0x9da>
 8006454:	e4d6      	b.n	8005e04 <_strtod_l+0x494>
 8006456:	bf00      	nop
 8006458:	94a03595 	.word	0x94a03595
 800645c:	3fdfffff 	.word	0x3fdfffff
 8006460:	35afe535 	.word	0x35afe535
 8006464:	3fe00000 	.word	0x3fe00000
 8006468:	000fffff 	.word	0x000fffff
 800646c:	7ff00000 	.word	0x7ff00000
 8006470:	7fefffff 	.word	0x7fefffff
 8006474:	3ff00000 	.word	0x3ff00000
 8006478:	7fe00000 	.word	0x7fe00000
 800647c:	7c9fffff 	.word	0x7c9fffff
 8006480:	3fe00000 	.word	0x3fe00000
 8006484:	bff00000 	.word	0xbff00000
 8006488:	9b05      	ldr	r3, [sp, #20]
 800648a:	b313      	cbz	r3, 80064d2 <_strtod_l+0xb62>
 800648c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800648e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8006492:	d81e      	bhi.n	80064d2 <_strtod_l+0xb62>
 8006494:	a326      	add	r3, pc, #152	; (adr r3, 8006530 <_strtod_l+0xbc0>)
 8006496:	e9d3 2300 	ldrd	r2, r3, [r3]
 800649a:	4620      	mov	r0, r4
 800649c:	4629      	mov	r1, r5
 800649e:	f7fa fa97 	bl	80009d0 <__aeabi_dcmple>
 80064a2:	b190      	cbz	r0, 80064ca <_strtod_l+0xb5a>
 80064a4:	4629      	mov	r1, r5
 80064a6:	4620      	mov	r0, r4
 80064a8:	f7fa fab0 	bl	8000a0c <__aeabi_d2uiz>
 80064ac:	2801      	cmp	r0, #1
 80064ae:	bf38      	it	cc
 80064b0:	2001      	movcc	r0, #1
 80064b2:	f7f9 ff97 	bl	80003e4 <__aeabi_ui2d>
 80064b6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80064b8:	4604      	mov	r4, r0
 80064ba:	460d      	mov	r5, r1
 80064bc:	b9d3      	cbnz	r3, 80064f4 <_strtod_l+0xb84>
 80064be:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80064c2:	9012      	str	r0, [sp, #72]	; 0x48
 80064c4:	9313      	str	r3, [sp, #76]	; 0x4c
 80064c6:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 80064ca:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80064cc:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 80064d0:	1a9f      	subs	r7, r3, r2
 80064d2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80064d6:	f000 ffc9 	bl	800746c <__ulp>
 80064da:	4602      	mov	r2, r0
 80064dc:	460b      	mov	r3, r1
 80064de:	4630      	mov	r0, r6
 80064e0:	4639      	mov	r1, r7
 80064e2:	f7f9 fff9 	bl	80004d8 <__aeabi_dmul>
 80064e6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80064ea:	f7f9 fe3f 	bl	800016c <__adddf3>
 80064ee:	4680      	mov	r8, r0
 80064f0:	4689      	mov	r9, r1
 80064f2:	e77e      	b.n	80063f2 <_strtod_l+0xa82>
 80064f4:	4602      	mov	r2, r0
 80064f6:	460b      	mov	r3, r1
 80064f8:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 80064fc:	e7e3      	b.n	80064c6 <_strtod_l+0xb56>
 80064fe:	a30e      	add	r3, pc, #56	; (adr r3, 8006538 <_strtod_l+0xbc8>)
 8006500:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006504:	f7fa fa5a 	bl	80009bc <__aeabi_dcmplt>
 8006508:	e7a1      	b.n	800644e <_strtod_l+0xade>
 800650a:	2300      	movs	r3, #0
 800650c:	930a      	str	r3, [sp, #40]	; 0x28
 800650e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006510:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8006512:	6013      	str	r3, [r2, #0]
 8006514:	f7ff ba71 	b.w	80059fa <_strtod_l+0x8a>
 8006518:	2a65      	cmp	r2, #101	; 0x65
 800651a:	f43f ab63 	beq.w	8005be4 <_strtod_l+0x274>
 800651e:	2a45      	cmp	r2, #69	; 0x45
 8006520:	f43f ab60 	beq.w	8005be4 <_strtod_l+0x274>
 8006524:	2301      	movs	r3, #1
 8006526:	f7ff bb95 	b.w	8005c54 <_strtod_l+0x2e4>
 800652a:	bf00      	nop
 800652c:	f3af 8000 	nop.w
 8006530:	ffc00000 	.word	0xffc00000
 8006534:	41dfffff 	.word	0x41dfffff
 8006538:	94a03595 	.word	0x94a03595
 800653c:	3fcfffff 	.word	0x3fcfffff

08006540 <strtod>:
 8006540:	460a      	mov	r2, r1
 8006542:	4601      	mov	r1, r0
 8006544:	4802      	ldr	r0, [pc, #8]	; (8006550 <strtod+0x10>)
 8006546:	4b03      	ldr	r3, [pc, #12]	; (8006554 <strtod+0x14>)
 8006548:	6800      	ldr	r0, [r0, #0]
 800654a:	f7ff ba11 	b.w	8005970 <_strtod_l>
 800654e:	bf00      	nop
 8006550:	2000000c 	.word	0x2000000c
 8006554:	20000074 	.word	0x20000074

08006558 <strtok>:
 8006558:	4b16      	ldr	r3, [pc, #88]	; (80065b4 <strtok+0x5c>)
 800655a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800655e:	681f      	ldr	r7, [r3, #0]
 8006560:	4605      	mov	r5, r0
 8006562:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 8006564:	460e      	mov	r6, r1
 8006566:	b9ec      	cbnz	r4, 80065a4 <strtok+0x4c>
 8006568:	2050      	movs	r0, #80	; 0x50
 800656a:	f000 fbe7 	bl	8006d3c <malloc>
 800656e:	4602      	mov	r2, r0
 8006570:	65b8      	str	r0, [r7, #88]	; 0x58
 8006572:	b920      	cbnz	r0, 800657e <strtok+0x26>
 8006574:	2157      	movs	r1, #87	; 0x57
 8006576:	4b10      	ldr	r3, [pc, #64]	; (80065b8 <strtok+0x60>)
 8006578:	4810      	ldr	r0, [pc, #64]	; (80065bc <strtok+0x64>)
 800657a:	f000 f849 	bl	8006610 <__assert_func>
 800657e:	e9c0 4400 	strd	r4, r4, [r0]
 8006582:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8006586:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800658a:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800658e:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8006592:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8006596:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800659a:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800659e:	6184      	str	r4, [r0, #24]
 80065a0:	7704      	strb	r4, [r0, #28]
 80065a2:	6244      	str	r4, [r0, #36]	; 0x24
 80065a4:	4631      	mov	r1, r6
 80065a6:	4628      	mov	r0, r5
 80065a8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80065aa:	2301      	movs	r3, #1
 80065ac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80065b0:	f000 b806 	b.w	80065c0 <__strtok_r>
 80065b4:	2000000c 	.word	0x2000000c
 80065b8:	080087e0 	.word	0x080087e0
 80065bc:	080087f7 	.word	0x080087f7

080065c0 <__strtok_r>:
 80065c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80065c2:	b908      	cbnz	r0, 80065c8 <__strtok_r+0x8>
 80065c4:	6810      	ldr	r0, [r2, #0]
 80065c6:	b188      	cbz	r0, 80065ec <__strtok_r+0x2c>
 80065c8:	4604      	mov	r4, r0
 80065ca:	460f      	mov	r7, r1
 80065cc:	4620      	mov	r0, r4
 80065ce:	f814 5b01 	ldrb.w	r5, [r4], #1
 80065d2:	f817 6b01 	ldrb.w	r6, [r7], #1
 80065d6:	b91e      	cbnz	r6, 80065e0 <__strtok_r+0x20>
 80065d8:	b965      	cbnz	r5, 80065f4 <__strtok_r+0x34>
 80065da:	4628      	mov	r0, r5
 80065dc:	6015      	str	r5, [r2, #0]
 80065de:	e005      	b.n	80065ec <__strtok_r+0x2c>
 80065e0:	42b5      	cmp	r5, r6
 80065e2:	d1f6      	bne.n	80065d2 <__strtok_r+0x12>
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d1f0      	bne.n	80065ca <__strtok_r+0xa>
 80065e8:	6014      	str	r4, [r2, #0]
 80065ea:	7003      	strb	r3, [r0, #0]
 80065ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80065ee:	461c      	mov	r4, r3
 80065f0:	e00c      	b.n	800660c <__strtok_r+0x4c>
 80065f2:	b915      	cbnz	r5, 80065fa <__strtok_r+0x3a>
 80065f4:	460e      	mov	r6, r1
 80065f6:	f814 3b01 	ldrb.w	r3, [r4], #1
 80065fa:	f816 5b01 	ldrb.w	r5, [r6], #1
 80065fe:	42ab      	cmp	r3, r5
 8006600:	d1f7      	bne.n	80065f2 <__strtok_r+0x32>
 8006602:	2b00      	cmp	r3, #0
 8006604:	d0f3      	beq.n	80065ee <__strtok_r+0x2e>
 8006606:	2300      	movs	r3, #0
 8006608:	f804 3c01 	strb.w	r3, [r4, #-1]
 800660c:	6014      	str	r4, [r2, #0]
 800660e:	e7ed      	b.n	80065ec <__strtok_r+0x2c>

08006610 <__assert_func>:
 8006610:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006612:	4614      	mov	r4, r2
 8006614:	461a      	mov	r2, r3
 8006616:	4b09      	ldr	r3, [pc, #36]	; (800663c <__assert_func+0x2c>)
 8006618:	4605      	mov	r5, r0
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	68d8      	ldr	r0, [r3, #12]
 800661e:	b14c      	cbz	r4, 8006634 <__assert_func+0x24>
 8006620:	4b07      	ldr	r3, [pc, #28]	; (8006640 <__assert_func+0x30>)
 8006622:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006626:	9100      	str	r1, [sp, #0]
 8006628:	462b      	mov	r3, r5
 800662a:	4906      	ldr	r1, [pc, #24]	; (8006644 <__assert_func+0x34>)
 800662c:	f000 f80e 	bl	800664c <fiprintf>
 8006630:	f001 fd3a 	bl	80080a8 <abort>
 8006634:	4b04      	ldr	r3, [pc, #16]	; (8006648 <__assert_func+0x38>)
 8006636:	461c      	mov	r4, r3
 8006638:	e7f3      	b.n	8006622 <__assert_func+0x12>
 800663a:	bf00      	nop
 800663c:	2000000c 	.word	0x2000000c
 8006640:	08008854 	.word	0x08008854
 8006644:	08008861 	.word	0x08008861
 8006648:	0800888f 	.word	0x0800888f

0800664c <fiprintf>:
 800664c:	b40e      	push	{r1, r2, r3}
 800664e:	b503      	push	{r0, r1, lr}
 8006650:	4601      	mov	r1, r0
 8006652:	ab03      	add	r3, sp, #12
 8006654:	4805      	ldr	r0, [pc, #20]	; (800666c <fiprintf+0x20>)
 8006656:	f853 2b04 	ldr.w	r2, [r3], #4
 800665a:	6800      	ldr	r0, [r0, #0]
 800665c:	9301      	str	r3, [sp, #4]
 800665e:	f001 f965 	bl	800792c <_vfiprintf_r>
 8006662:	b002      	add	sp, #8
 8006664:	f85d eb04 	ldr.w	lr, [sp], #4
 8006668:	b003      	add	sp, #12
 800666a:	4770      	bx	lr
 800666c:	2000000c 	.word	0x2000000c

08006670 <rshift>:
 8006670:	6903      	ldr	r3, [r0, #16]
 8006672:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006676:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800667a:	f100 0414 	add.w	r4, r0, #20
 800667e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8006682:	dd46      	ble.n	8006712 <rshift+0xa2>
 8006684:	f011 011f 	ands.w	r1, r1, #31
 8006688:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800668c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8006690:	d10c      	bne.n	80066ac <rshift+0x3c>
 8006692:	4629      	mov	r1, r5
 8006694:	f100 0710 	add.w	r7, r0, #16
 8006698:	42b1      	cmp	r1, r6
 800669a:	d335      	bcc.n	8006708 <rshift+0x98>
 800669c:	1a9b      	subs	r3, r3, r2
 800669e:	009b      	lsls	r3, r3, #2
 80066a0:	1eea      	subs	r2, r5, #3
 80066a2:	4296      	cmp	r6, r2
 80066a4:	bf38      	it	cc
 80066a6:	2300      	movcc	r3, #0
 80066a8:	4423      	add	r3, r4
 80066aa:	e015      	b.n	80066d8 <rshift+0x68>
 80066ac:	46a1      	mov	r9, r4
 80066ae:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80066b2:	f1c1 0820 	rsb	r8, r1, #32
 80066b6:	40cf      	lsrs	r7, r1
 80066b8:	f105 0e04 	add.w	lr, r5, #4
 80066bc:	4576      	cmp	r6, lr
 80066be:	46f4      	mov	ip, lr
 80066c0:	d816      	bhi.n	80066f0 <rshift+0x80>
 80066c2:	1a9a      	subs	r2, r3, r2
 80066c4:	0092      	lsls	r2, r2, #2
 80066c6:	3a04      	subs	r2, #4
 80066c8:	3501      	adds	r5, #1
 80066ca:	42ae      	cmp	r6, r5
 80066cc:	bf38      	it	cc
 80066ce:	2200      	movcc	r2, #0
 80066d0:	18a3      	adds	r3, r4, r2
 80066d2:	50a7      	str	r7, [r4, r2]
 80066d4:	b107      	cbz	r7, 80066d8 <rshift+0x68>
 80066d6:	3304      	adds	r3, #4
 80066d8:	42a3      	cmp	r3, r4
 80066da:	eba3 0204 	sub.w	r2, r3, r4
 80066de:	bf08      	it	eq
 80066e0:	2300      	moveq	r3, #0
 80066e2:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80066e6:	6102      	str	r2, [r0, #16]
 80066e8:	bf08      	it	eq
 80066ea:	6143      	streq	r3, [r0, #20]
 80066ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80066f0:	f8dc c000 	ldr.w	ip, [ip]
 80066f4:	fa0c fc08 	lsl.w	ip, ip, r8
 80066f8:	ea4c 0707 	orr.w	r7, ip, r7
 80066fc:	f849 7b04 	str.w	r7, [r9], #4
 8006700:	f85e 7b04 	ldr.w	r7, [lr], #4
 8006704:	40cf      	lsrs	r7, r1
 8006706:	e7d9      	b.n	80066bc <rshift+0x4c>
 8006708:	f851 cb04 	ldr.w	ip, [r1], #4
 800670c:	f847 cf04 	str.w	ip, [r7, #4]!
 8006710:	e7c2      	b.n	8006698 <rshift+0x28>
 8006712:	4623      	mov	r3, r4
 8006714:	e7e0      	b.n	80066d8 <rshift+0x68>

08006716 <__hexdig_fun>:
 8006716:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800671a:	2b09      	cmp	r3, #9
 800671c:	d802      	bhi.n	8006724 <__hexdig_fun+0xe>
 800671e:	3820      	subs	r0, #32
 8006720:	b2c0      	uxtb	r0, r0
 8006722:	4770      	bx	lr
 8006724:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8006728:	2b05      	cmp	r3, #5
 800672a:	d801      	bhi.n	8006730 <__hexdig_fun+0x1a>
 800672c:	3847      	subs	r0, #71	; 0x47
 800672e:	e7f7      	b.n	8006720 <__hexdig_fun+0xa>
 8006730:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8006734:	2b05      	cmp	r3, #5
 8006736:	d801      	bhi.n	800673c <__hexdig_fun+0x26>
 8006738:	3827      	subs	r0, #39	; 0x27
 800673a:	e7f1      	b.n	8006720 <__hexdig_fun+0xa>
 800673c:	2000      	movs	r0, #0
 800673e:	4770      	bx	lr

08006740 <__gethex>:
 8006740:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006744:	b08b      	sub	sp, #44	; 0x2c
 8006746:	9305      	str	r3, [sp, #20]
 8006748:	4bb2      	ldr	r3, [pc, #712]	; (8006a14 <__gethex+0x2d4>)
 800674a:	9002      	str	r0, [sp, #8]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	468b      	mov	fp, r1
 8006750:	4618      	mov	r0, r3
 8006752:	4690      	mov	r8, r2
 8006754:	9303      	str	r3, [sp, #12]
 8006756:	f7f9 fcfb 	bl	8000150 <strlen>
 800675a:	4682      	mov	sl, r0
 800675c:	9b03      	ldr	r3, [sp, #12]
 800675e:	f8db 2000 	ldr.w	r2, [fp]
 8006762:	4403      	add	r3, r0
 8006764:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8006768:	9306      	str	r3, [sp, #24]
 800676a:	1c93      	adds	r3, r2, #2
 800676c:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8006770:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8006774:	32fe      	adds	r2, #254	; 0xfe
 8006776:	18d1      	adds	r1, r2, r3
 8006778:	461f      	mov	r7, r3
 800677a:	f813 0b01 	ldrb.w	r0, [r3], #1
 800677e:	9101      	str	r1, [sp, #4]
 8006780:	2830      	cmp	r0, #48	; 0x30
 8006782:	d0f8      	beq.n	8006776 <__gethex+0x36>
 8006784:	f7ff ffc7 	bl	8006716 <__hexdig_fun>
 8006788:	4604      	mov	r4, r0
 800678a:	2800      	cmp	r0, #0
 800678c:	d13a      	bne.n	8006804 <__gethex+0xc4>
 800678e:	4652      	mov	r2, sl
 8006790:	4638      	mov	r0, r7
 8006792:	9903      	ldr	r1, [sp, #12]
 8006794:	f001 fba6 	bl	8007ee4 <strncmp>
 8006798:	4605      	mov	r5, r0
 800679a:	2800      	cmp	r0, #0
 800679c:	d166      	bne.n	800686c <__gethex+0x12c>
 800679e:	f817 000a 	ldrb.w	r0, [r7, sl]
 80067a2:	eb07 060a 	add.w	r6, r7, sl
 80067a6:	f7ff ffb6 	bl	8006716 <__hexdig_fun>
 80067aa:	2800      	cmp	r0, #0
 80067ac:	d060      	beq.n	8006870 <__gethex+0x130>
 80067ae:	4633      	mov	r3, r6
 80067b0:	7818      	ldrb	r0, [r3, #0]
 80067b2:	461f      	mov	r7, r3
 80067b4:	2830      	cmp	r0, #48	; 0x30
 80067b6:	f103 0301 	add.w	r3, r3, #1
 80067ba:	d0f9      	beq.n	80067b0 <__gethex+0x70>
 80067bc:	f7ff ffab 	bl	8006716 <__hexdig_fun>
 80067c0:	2301      	movs	r3, #1
 80067c2:	fab0 f480 	clz	r4, r0
 80067c6:	4635      	mov	r5, r6
 80067c8:	0964      	lsrs	r4, r4, #5
 80067ca:	9301      	str	r3, [sp, #4]
 80067cc:	463a      	mov	r2, r7
 80067ce:	4616      	mov	r6, r2
 80067d0:	7830      	ldrb	r0, [r6, #0]
 80067d2:	3201      	adds	r2, #1
 80067d4:	f7ff ff9f 	bl	8006716 <__hexdig_fun>
 80067d8:	2800      	cmp	r0, #0
 80067da:	d1f8      	bne.n	80067ce <__gethex+0x8e>
 80067dc:	4652      	mov	r2, sl
 80067de:	4630      	mov	r0, r6
 80067e0:	9903      	ldr	r1, [sp, #12]
 80067e2:	f001 fb7f 	bl	8007ee4 <strncmp>
 80067e6:	b980      	cbnz	r0, 800680a <__gethex+0xca>
 80067e8:	b94d      	cbnz	r5, 80067fe <__gethex+0xbe>
 80067ea:	eb06 050a 	add.w	r5, r6, sl
 80067ee:	462a      	mov	r2, r5
 80067f0:	4616      	mov	r6, r2
 80067f2:	7830      	ldrb	r0, [r6, #0]
 80067f4:	3201      	adds	r2, #1
 80067f6:	f7ff ff8e 	bl	8006716 <__hexdig_fun>
 80067fa:	2800      	cmp	r0, #0
 80067fc:	d1f8      	bne.n	80067f0 <__gethex+0xb0>
 80067fe:	1bad      	subs	r5, r5, r6
 8006800:	00ad      	lsls	r5, r5, #2
 8006802:	e004      	b.n	800680e <__gethex+0xce>
 8006804:	2400      	movs	r4, #0
 8006806:	4625      	mov	r5, r4
 8006808:	e7e0      	b.n	80067cc <__gethex+0x8c>
 800680a:	2d00      	cmp	r5, #0
 800680c:	d1f7      	bne.n	80067fe <__gethex+0xbe>
 800680e:	7833      	ldrb	r3, [r6, #0]
 8006810:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8006814:	2b50      	cmp	r3, #80	; 0x50
 8006816:	d139      	bne.n	800688c <__gethex+0x14c>
 8006818:	7873      	ldrb	r3, [r6, #1]
 800681a:	2b2b      	cmp	r3, #43	; 0x2b
 800681c:	d02a      	beq.n	8006874 <__gethex+0x134>
 800681e:	2b2d      	cmp	r3, #45	; 0x2d
 8006820:	d02c      	beq.n	800687c <__gethex+0x13c>
 8006822:	f04f 0900 	mov.w	r9, #0
 8006826:	1c71      	adds	r1, r6, #1
 8006828:	7808      	ldrb	r0, [r1, #0]
 800682a:	f7ff ff74 	bl	8006716 <__hexdig_fun>
 800682e:	1e43      	subs	r3, r0, #1
 8006830:	b2db      	uxtb	r3, r3
 8006832:	2b18      	cmp	r3, #24
 8006834:	d82a      	bhi.n	800688c <__gethex+0x14c>
 8006836:	f1a0 0210 	sub.w	r2, r0, #16
 800683a:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800683e:	f7ff ff6a 	bl	8006716 <__hexdig_fun>
 8006842:	1e43      	subs	r3, r0, #1
 8006844:	b2db      	uxtb	r3, r3
 8006846:	2b18      	cmp	r3, #24
 8006848:	d91b      	bls.n	8006882 <__gethex+0x142>
 800684a:	f1b9 0f00 	cmp.w	r9, #0
 800684e:	d000      	beq.n	8006852 <__gethex+0x112>
 8006850:	4252      	negs	r2, r2
 8006852:	4415      	add	r5, r2
 8006854:	f8cb 1000 	str.w	r1, [fp]
 8006858:	b1d4      	cbz	r4, 8006890 <__gethex+0x150>
 800685a:	9b01      	ldr	r3, [sp, #4]
 800685c:	2b00      	cmp	r3, #0
 800685e:	bf14      	ite	ne
 8006860:	2700      	movne	r7, #0
 8006862:	2706      	moveq	r7, #6
 8006864:	4638      	mov	r0, r7
 8006866:	b00b      	add	sp, #44	; 0x2c
 8006868:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800686c:	463e      	mov	r6, r7
 800686e:	4625      	mov	r5, r4
 8006870:	2401      	movs	r4, #1
 8006872:	e7cc      	b.n	800680e <__gethex+0xce>
 8006874:	f04f 0900 	mov.w	r9, #0
 8006878:	1cb1      	adds	r1, r6, #2
 800687a:	e7d5      	b.n	8006828 <__gethex+0xe8>
 800687c:	f04f 0901 	mov.w	r9, #1
 8006880:	e7fa      	b.n	8006878 <__gethex+0x138>
 8006882:	230a      	movs	r3, #10
 8006884:	fb03 0202 	mla	r2, r3, r2, r0
 8006888:	3a10      	subs	r2, #16
 800688a:	e7d6      	b.n	800683a <__gethex+0xfa>
 800688c:	4631      	mov	r1, r6
 800688e:	e7e1      	b.n	8006854 <__gethex+0x114>
 8006890:	4621      	mov	r1, r4
 8006892:	1bf3      	subs	r3, r6, r7
 8006894:	3b01      	subs	r3, #1
 8006896:	2b07      	cmp	r3, #7
 8006898:	dc0a      	bgt.n	80068b0 <__gethex+0x170>
 800689a:	9802      	ldr	r0, [sp, #8]
 800689c:	f000 fa76 	bl	8006d8c <_Balloc>
 80068a0:	4604      	mov	r4, r0
 80068a2:	b940      	cbnz	r0, 80068b6 <__gethex+0x176>
 80068a4:	4602      	mov	r2, r0
 80068a6:	21de      	movs	r1, #222	; 0xde
 80068a8:	4b5b      	ldr	r3, [pc, #364]	; (8006a18 <__gethex+0x2d8>)
 80068aa:	485c      	ldr	r0, [pc, #368]	; (8006a1c <__gethex+0x2dc>)
 80068ac:	f7ff feb0 	bl	8006610 <__assert_func>
 80068b0:	3101      	adds	r1, #1
 80068b2:	105b      	asrs	r3, r3, #1
 80068b4:	e7ef      	b.n	8006896 <__gethex+0x156>
 80068b6:	f04f 0b00 	mov.w	fp, #0
 80068ba:	f100 0914 	add.w	r9, r0, #20
 80068be:	f1ca 0301 	rsb	r3, sl, #1
 80068c2:	f8cd 9010 	str.w	r9, [sp, #16]
 80068c6:	f8cd b004 	str.w	fp, [sp, #4]
 80068ca:	9308      	str	r3, [sp, #32]
 80068cc:	42b7      	cmp	r7, r6
 80068ce:	d33f      	bcc.n	8006950 <__gethex+0x210>
 80068d0:	9f04      	ldr	r7, [sp, #16]
 80068d2:	9b01      	ldr	r3, [sp, #4]
 80068d4:	f847 3b04 	str.w	r3, [r7], #4
 80068d8:	eba7 0709 	sub.w	r7, r7, r9
 80068dc:	10bf      	asrs	r7, r7, #2
 80068de:	6127      	str	r7, [r4, #16]
 80068e0:	4618      	mov	r0, r3
 80068e2:	f000 fb45 	bl	8006f70 <__hi0bits>
 80068e6:	017f      	lsls	r7, r7, #5
 80068e8:	f8d8 6000 	ldr.w	r6, [r8]
 80068ec:	1a3f      	subs	r7, r7, r0
 80068ee:	42b7      	cmp	r7, r6
 80068f0:	dd62      	ble.n	80069b8 <__gethex+0x278>
 80068f2:	1bbf      	subs	r7, r7, r6
 80068f4:	4639      	mov	r1, r7
 80068f6:	4620      	mov	r0, r4
 80068f8:	f000 fedf 	bl	80076ba <__any_on>
 80068fc:	4682      	mov	sl, r0
 80068fe:	b1a8      	cbz	r0, 800692c <__gethex+0x1ec>
 8006900:	f04f 0a01 	mov.w	sl, #1
 8006904:	1e7b      	subs	r3, r7, #1
 8006906:	1159      	asrs	r1, r3, #5
 8006908:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800690c:	f003 021f 	and.w	r2, r3, #31
 8006910:	fa0a f202 	lsl.w	r2, sl, r2
 8006914:	420a      	tst	r2, r1
 8006916:	d009      	beq.n	800692c <__gethex+0x1ec>
 8006918:	4553      	cmp	r3, sl
 800691a:	dd05      	ble.n	8006928 <__gethex+0x1e8>
 800691c:	4620      	mov	r0, r4
 800691e:	1eb9      	subs	r1, r7, #2
 8006920:	f000 fecb 	bl	80076ba <__any_on>
 8006924:	2800      	cmp	r0, #0
 8006926:	d144      	bne.n	80069b2 <__gethex+0x272>
 8006928:	f04f 0a02 	mov.w	sl, #2
 800692c:	4639      	mov	r1, r7
 800692e:	4620      	mov	r0, r4
 8006930:	f7ff fe9e 	bl	8006670 <rshift>
 8006934:	443d      	add	r5, r7
 8006936:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800693a:	42ab      	cmp	r3, r5
 800693c:	da4a      	bge.n	80069d4 <__gethex+0x294>
 800693e:	4621      	mov	r1, r4
 8006940:	9802      	ldr	r0, [sp, #8]
 8006942:	f000 fa63 	bl	8006e0c <_Bfree>
 8006946:	2300      	movs	r3, #0
 8006948:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800694a:	27a3      	movs	r7, #163	; 0xa3
 800694c:	6013      	str	r3, [r2, #0]
 800694e:	e789      	b.n	8006864 <__gethex+0x124>
 8006950:	1e73      	subs	r3, r6, #1
 8006952:	9a06      	ldr	r2, [sp, #24]
 8006954:	9307      	str	r3, [sp, #28]
 8006956:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800695a:	4293      	cmp	r3, r2
 800695c:	d019      	beq.n	8006992 <__gethex+0x252>
 800695e:	f1bb 0f20 	cmp.w	fp, #32
 8006962:	d107      	bne.n	8006974 <__gethex+0x234>
 8006964:	9b04      	ldr	r3, [sp, #16]
 8006966:	9a01      	ldr	r2, [sp, #4]
 8006968:	f843 2b04 	str.w	r2, [r3], #4
 800696c:	9304      	str	r3, [sp, #16]
 800696e:	2300      	movs	r3, #0
 8006970:	469b      	mov	fp, r3
 8006972:	9301      	str	r3, [sp, #4]
 8006974:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8006978:	f7ff fecd 	bl	8006716 <__hexdig_fun>
 800697c:	9b01      	ldr	r3, [sp, #4]
 800697e:	f000 000f 	and.w	r0, r0, #15
 8006982:	fa00 f00b 	lsl.w	r0, r0, fp
 8006986:	4303      	orrs	r3, r0
 8006988:	9301      	str	r3, [sp, #4]
 800698a:	f10b 0b04 	add.w	fp, fp, #4
 800698e:	9b07      	ldr	r3, [sp, #28]
 8006990:	e00d      	b.n	80069ae <__gethex+0x26e>
 8006992:	9a08      	ldr	r2, [sp, #32]
 8006994:	1e73      	subs	r3, r6, #1
 8006996:	4413      	add	r3, r2
 8006998:	42bb      	cmp	r3, r7
 800699a:	d3e0      	bcc.n	800695e <__gethex+0x21e>
 800699c:	4618      	mov	r0, r3
 800699e:	4652      	mov	r2, sl
 80069a0:	9903      	ldr	r1, [sp, #12]
 80069a2:	9309      	str	r3, [sp, #36]	; 0x24
 80069a4:	f001 fa9e 	bl	8007ee4 <strncmp>
 80069a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80069aa:	2800      	cmp	r0, #0
 80069ac:	d1d7      	bne.n	800695e <__gethex+0x21e>
 80069ae:	461e      	mov	r6, r3
 80069b0:	e78c      	b.n	80068cc <__gethex+0x18c>
 80069b2:	f04f 0a03 	mov.w	sl, #3
 80069b6:	e7b9      	b.n	800692c <__gethex+0x1ec>
 80069b8:	da09      	bge.n	80069ce <__gethex+0x28e>
 80069ba:	1bf7      	subs	r7, r6, r7
 80069bc:	4621      	mov	r1, r4
 80069be:	463a      	mov	r2, r7
 80069c0:	9802      	ldr	r0, [sp, #8]
 80069c2:	f000 fc3b 	bl	800723c <__lshift>
 80069c6:	4604      	mov	r4, r0
 80069c8:	1bed      	subs	r5, r5, r7
 80069ca:	f100 0914 	add.w	r9, r0, #20
 80069ce:	f04f 0a00 	mov.w	sl, #0
 80069d2:	e7b0      	b.n	8006936 <__gethex+0x1f6>
 80069d4:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80069d8:	42a8      	cmp	r0, r5
 80069da:	dd72      	ble.n	8006ac2 <__gethex+0x382>
 80069dc:	1b45      	subs	r5, r0, r5
 80069de:	42ae      	cmp	r6, r5
 80069e0:	dc35      	bgt.n	8006a4e <__gethex+0x30e>
 80069e2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80069e6:	2b02      	cmp	r3, #2
 80069e8:	d029      	beq.n	8006a3e <__gethex+0x2fe>
 80069ea:	2b03      	cmp	r3, #3
 80069ec:	d02b      	beq.n	8006a46 <__gethex+0x306>
 80069ee:	2b01      	cmp	r3, #1
 80069f0:	d11c      	bne.n	8006a2c <__gethex+0x2ec>
 80069f2:	42ae      	cmp	r6, r5
 80069f4:	d11a      	bne.n	8006a2c <__gethex+0x2ec>
 80069f6:	2e01      	cmp	r6, #1
 80069f8:	d112      	bne.n	8006a20 <__gethex+0x2e0>
 80069fa:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80069fe:	9a05      	ldr	r2, [sp, #20]
 8006a00:	2762      	movs	r7, #98	; 0x62
 8006a02:	6013      	str	r3, [r2, #0]
 8006a04:	2301      	movs	r3, #1
 8006a06:	6123      	str	r3, [r4, #16]
 8006a08:	f8c9 3000 	str.w	r3, [r9]
 8006a0c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006a0e:	601c      	str	r4, [r3, #0]
 8006a10:	e728      	b.n	8006864 <__gethex+0x124>
 8006a12:	bf00      	nop
 8006a14:	08008908 	.word	0x08008908
 8006a18:	08008890 	.word	0x08008890
 8006a1c:	080088a1 	.word	0x080088a1
 8006a20:	4620      	mov	r0, r4
 8006a22:	1e71      	subs	r1, r6, #1
 8006a24:	f000 fe49 	bl	80076ba <__any_on>
 8006a28:	2800      	cmp	r0, #0
 8006a2a:	d1e6      	bne.n	80069fa <__gethex+0x2ba>
 8006a2c:	4621      	mov	r1, r4
 8006a2e:	9802      	ldr	r0, [sp, #8]
 8006a30:	f000 f9ec 	bl	8006e0c <_Bfree>
 8006a34:	2300      	movs	r3, #0
 8006a36:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8006a38:	2750      	movs	r7, #80	; 0x50
 8006a3a:	6013      	str	r3, [r2, #0]
 8006a3c:	e712      	b.n	8006864 <__gethex+0x124>
 8006a3e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d1f3      	bne.n	8006a2c <__gethex+0x2ec>
 8006a44:	e7d9      	b.n	80069fa <__gethex+0x2ba>
 8006a46:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d1d6      	bne.n	80069fa <__gethex+0x2ba>
 8006a4c:	e7ee      	b.n	8006a2c <__gethex+0x2ec>
 8006a4e:	1e6f      	subs	r7, r5, #1
 8006a50:	f1ba 0f00 	cmp.w	sl, #0
 8006a54:	d132      	bne.n	8006abc <__gethex+0x37c>
 8006a56:	b127      	cbz	r7, 8006a62 <__gethex+0x322>
 8006a58:	4639      	mov	r1, r7
 8006a5a:	4620      	mov	r0, r4
 8006a5c:	f000 fe2d 	bl	80076ba <__any_on>
 8006a60:	4682      	mov	sl, r0
 8006a62:	2101      	movs	r1, #1
 8006a64:	117b      	asrs	r3, r7, #5
 8006a66:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8006a6a:	f007 071f 	and.w	r7, r7, #31
 8006a6e:	fa01 f707 	lsl.w	r7, r1, r7
 8006a72:	421f      	tst	r7, r3
 8006a74:	f04f 0702 	mov.w	r7, #2
 8006a78:	4629      	mov	r1, r5
 8006a7a:	4620      	mov	r0, r4
 8006a7c:	bf18      	it	ne
 8006a7e:	f04a 0a02 	orrne.w	sl, sl, #2
 8006a82:	1b76      	subs	r6, r6, r5
 8006a84:	f7ff fdf4 	bl	8006670 <rshift>
 8006a88:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8006a8c:	f1ba 0f00 	cmp.w	sl, #0
 8006a90:	d048      	beq.n	8006b24 <__gethex+0x3e4>
 8006a92:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8006a96:	2b02      	cmp	r3, #2
 8006a98:	d015      	beq.n	8006ac6 <__gethex+0x386>
 8006a9a:	2b03      	cmp	r3, #3
 8006a9c:	d017      	beq.n	8006ace <__gethex+0x38e>
 8006a9e:	2b01      	cmp	r3, #1
 8006aa0:	d109      	bne.n	8006ab6 <__gethex+0x376>
 8006aa2:	f01a 0f02 	tst.w	sl, #2
 8006aa6:	d006      	beq.n	8006ab6 <__gethex+0x376>
 8006aa8:	f8d9 0000 	ldr.w	r0, [r9]
 8006aac:	ea4a 0a00 	orr.w	sl, sl, r0
 8006ab0:	f01a 0f01 	tst.w	sl, #1
 8006ab4:	d10e      	bne.n	8006ad4 <__gethex+0x394>
 8006ab6:	f047 0710 	orr.w	r7, r7, #16
 8006aba:	e033      	b.n	8006b24 <__gethex+0x3e4>
 8006abc:	f04f 0a01 	mov.w	sl, #1
 8006ac0:	e7cf      	b.n	8006a62 <__gethex+0x322>
 8006ac2:	2701      	movs	r7, #1
 8006ac4:	e7e2      	b.n	8006a8c <__gethex+0x34c>
 8006ac6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006ac8:	f1c3 0301 	rsb	r3, r3, #1
 8006acc:	9315      	str	r3, [sp, #84]	; 0x54
 8006ace:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d0f0      	beq.n	8006ab6 <__gethex+0x376>
 8006ad4:	f04f 0c00 	mov.w	ip, #0
 8006ad8:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8006adc:	f104 0314 	add.w	r3, r4, #20
 8006ae0:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8006ae4:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8006ae8:	4618      	mov	r0, r3
 8006aea:	f853 2b04 	ldr.w	r2, [r3], #4
 8006aee:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 8006af2:	d01c      	beq.n	8006b2e <__gethex+0x3ee>
 8006af4:	3201      	adds	r2, #1
 8006af6:	6002      	str	r2, [r0, #0]
 8006af8:	2f02      	cmp	r7, #2
 8006afa:	f104 0314 	add.w	r3, r4, #20
 8006afe:	d13d      	bne.n	8006b7c <__gethex+0x43c>
 8006b00:	f8d8 2000 	ldr.w	r2, [r8]
 8006b04:	3a01      	subs	r2, #1
 8006b06:	42b2      	cmp	r2, r6
 8006b08:	d10a      	bne.n	8006b20 <__gethex+0x3e0>
 8006b0a:	2201      	movs	r2, #1
 8006b0c:	1171      	asrs	r1, r6, #5
 8006b0e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006b12:	f006 061f 	and.w	r6, r6, #31
 8006b16:	fa02 f606 	lsl.w	r6, r2, r6
 8006b1a:	421e      	tst	r6, r3
 8006b1c:	bf18      	it	ne
 8006b1e:	4617      	movne	r7, r2
 8006b20:	f047 0720 	orr.w	r7, r7, #32
 8006b24:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006b26:	601c      	str	r4, [r3, #0]
 8006b28:	9b05      	ldr	r3, [sp, #20]
 8006b2a:	601d      	str	r5, [r3, #0]
 8006b2c:	e69a      	b.n	8006864 <__gethex+0x124>
 8006b2e:	4299      	cmp	r1, r3
 8006b30:	f843 cc04 	str.w	ip, [r3, #-4]
 8006b34:	d8d8      	bhi.n	8006ae8 <__gethex+0x3a8>
 8006b36:	68a3      	ldr	r3, [r4, #8]
 8006b38:	459b      	cmp	fp, r3
 8006b3a:	db17      	blt.n	8006b6c <__gethex+0x42c>
 8006b3c:	6861      	ldr	r1, [r4, #4]
 8006b3e:	9802      	ldr	r0, [sp, #8]
 8006b40:	3101      	adds	r1, #1
 8006b42:	f000 f923 	bl	8006d8c <_Balloc>
 8006b46:	4681      	mov	r9, r0
 8006b48:	b918      	cbnz	r0, 8006b52 <__gethex+0x412>
 8006b4a:	4602      	mov	r2, r0
 8006b4c:	2184      	movs	r1, #132	; 0x84
 8006b4e:	4b19      	ldr	r3, [pc, #100]	; (8006bb4 <__gethex+0x474>)
 8006b50:	e6ab      	b.n	80068aa <__gethex+0x16a>
 8006b52:	6922      	ldr	r2, [r4, #16]
 8006b54:	f104 010c 	add.w	r1, r4, #12
 8006b58:	3202      	adds	r2, #2
 8006b5a:	0092      	lsls	r2, r2, #2
 8006b5c:	300c      	adds	r0, #12
 8006b5e:	f000 f907 	bl	8006d70 <memcpy>
 8006b62:	4621      	mov	r1, r4
 8006b64:	9802      	ldr	r0, [sp, #8]
 8006b66:	f000 f951 	bl	8006e0c <_Bfree>
 8006b6a:	464c      	mov	r4, r9
 8006b6c:	6923      	ldr	r3, [r4, #16]
 8006b6e:	1c5a      	adds	r2, r3, #1
 8006b70:	6122      	str	r2, [r4, #16]
 8006b72:	2201      	movs	r2, #1
 8006b74:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006b78:	615a      	str	r2, [r3, #20]
 8006b7a:	e7bd      	b.n	8006af8 <__gethex+0x3b8>
 8006b7c:	6922      	ldr	r2, [r4, #16]
 8006b7e:	455a      	cmp	r2, fp
 8006b80:	dd0b      	ble.n	8006b9a <__gethex+0x45a>
 8006b82:	2101      	movs	r1, #1
 8006b84:	4620      	mov	r0, r4
 8006b86:	f7ff fd73 	bl	8006670 <rshift>
 8006b8a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006b8e:	3501      	adds	r5, #1
 8006b90:	42ab      	cmp	r3, r5
 8006b92:	f6ff aed4 	blt.w	800693e <__gethex+0x1fe>
 8006b96:	2701      	movs	r7, #1
 8006b98:	e7c2      	b.n	8006b20 <__gethex+0x3e0>
 8006b9a:	f016 061f 	ands.w	r6, r6, #31
 8006b9e:	d0fa      	beq.n	8006b96 <__gethex+0x456>
 8006ba0:	4453      	add	r3, sl
 8006ba2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8006ba6:	f000 f9e3 	bl	8006f70 <__hi0bits>
 8006baa:	f1c6 0620 	rsb	r6, r6, #32
 8006bae:	42b0      	cmp	r0, r6
 8006bb0:	dbe7      	blt.n	8006b82 <__gethex+0x442>
 8006bb2:	e7f0      	b.n	8006b96 <__gethex+0x456>
 8006bb4:	08008890 	.word	0x08008890

08006bb8 <L_shift>:
 8006bb8:	f1c2 0208 	rsb	r2, r2, #8
 8006bbc:	0092      	lsls	r2, r2, #2
 8006bbe:	b570      	push	{r4, r5, r6, lr}
 8006bc0:	f1c2 0620 	rsb	r6, r2, #32
 8006bc4:	6843      	ldr	r3, [r0, #4]
 8006bc6:	6804      	ldr	r4, [r0, #0]
 8006bc8:	fa03 f506 	lsl.w	r5, r3, r6
 8006bcc:	432c      	orrs	r4, r5
 8006bce:	40d3      	lsrs	r3, r2
 8006bd0:	6004      	str	r4, [r0, #0]
 8006bd2:	f840 3f04 	str.w	r3, [r0, #4]!
 8006bd6:	4288      	cmp	r0, r1
 8006bd8:	d3f4      	bcc.n	8006bc4 <L_shift+0xc>
 8006bda:	bd70      	pop	{r4, r5, r6, pc}

08006bdc <__match>:
 8006bdc:	b530      	push	{r4, r5, lr}
 8006bde:	6803      	ldr	r3, [r0, #0]
 8006be0:	3301      	adds	r3, #1
 8006be2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006be6:	b914      	cbnz	r4, 8006bee <__match+0x12>
 8006be8:	6003      	str	r3, [r0, #0]
 8006bea:	2001      	movs	r0, #1
 8006bec:	bd30      	pop	{r4, r5, pc}
 8006bee:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006bf2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8006bf6:	2d19      	cmp	r5, #25
 8006bf8:	bf98      	it	ls
 8006bfa:	3220      	addls	r2, #32
 8006bfc:	42a2      	cmp	r2, r4
 8006bfe:	d0f0      	beq.n	8006be2 <__match+0x6>
 8006c00:	2000      	movs	r0, #0
 8006c02:	e7f3      	b.n	8006bec <__match+0x10>

08006c04 <__hexnan>:
 8006c04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c08:	2500      	movs	r5, #0
 8006c0a:	680b      	ldr	r3, [r1, #0]
 8006c0c:	4682      	mov	sl, r0
 8006c0e:	115e      	asrs	r6, r3, #5
 8006c10:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8006c14:	f013 031f 	ands.w	r3, r3, #31
 8006c18:	bf18      	it	ne
 8006c1a:	3604      	addne	r6, #4
 8006c1c:	1f37      	subs	r7, r6, #4
 8006c1e:	46b9      	mov	r9, r7
 8006c20:	463c      	mov	r4, r7
 8006c22:	46ab      	mov	fp, r5
 8006c24:	b087      	sub	sp, #28
 8006c26:	4690      	mov	r8, r2
 8006c28:	6802      	ldr	r2, [r0, #0]
 8006c2a:	9301      	str	r3, [sp, #4]
 8006c2c:	f846 5c04 	str.w	r5, [r6, #-4]
 8006c30:	9502      	str	r5, [sp, #8]
 8006c32:	7851      	ldrb	r1, [r2, #1]
 8006c34:	1c53      	adds	r3, r2, #1
 8006c36:	9303      	str	r3, [sp, #12]
 8006c38:	b341      	cbz	r1, 8006c8c <__hexnan+0x88>
 8006c3a:	4608      	mov	r0, r1
 8006c3c:	9205      	str	r2, [sp, #20]
 8006c3e:	9104      	str	r1, [sp, #16]
 8006c40:	f7ff fd69 	bl	8006716 <__hexdig_fun>
 8006c44:	2800      	cmp	r0, #0
 8006c46:	d14f      	bne.n	8006ce8 <__hexnan+0xe4>
 8006c48:	9904      	ldr	r1, [sp, #16]
 8006c4a:	9a05      	ldr	r2, [sp, #20]
 8006c4c:	2920      	cmp	r1, #32
 8006c4e:	d818      	bhi.n	8006c82 <__hexnan+0x7e>
 8006c50:	9b02      	ldr	r3, [sp, #8]
 8006c52:	459b      	cmp	fp, r3
 8006c54:	dd13      	ble.n	8006c7e <__hexnan+0x7a>
 8006c56:	454c      	cmp	r4, r9
 8006c58:	d206      	bcs.n	8006c68 <__hexnan+0x64>
 8006c5a:	2d07      	cmp	r5, #7
 8006c5c:	dc04      	bgt.n	8006c68 <__hexnan+0x64>
 8006c5e:	462a      	mov	r2, r5
 8006c60:	4649      	mov	r1, r9
 8006c62:	4620      	mov	r0, r4
 8006c64:	f7ff ffa8 	bl	8006bb8 <L_shift>
 8006c68:	4544      	cmp	r4, r8
 8006c6a:	d950      	bls.n	8006d0e <__hexnan+0x10a>
 8006c6c:	2300      	movs	r3, #0
 8006c6e:	f1a4 0904 	sub.w	r9, r4, #4
 8006c72:	f844 3c04 	str.w	r3, [r4, #-4]
 8006c76:	461d      	mov	r5, r3
 8006c78:	464c      	mov	r4, r9
 8006c7a:	f8cd b008 	str.w	fp, [sp, #8]
 8006c7e:	9a03      	ldr	r2, [sp, #12]
 8006c80:	e7d7      	b.n	8006c32 <__hexnan+0x2e>
 8006c82:	2929      	cmp	r1, #41	; 0x29
 8006c84:	d156      	bne.n	8006d34 <__hexnan+0x130>
 8006c86:	3202      	adds	r2, #2
 8006c88:	f8ca 2000 	str.w	r2, [sl]
 8006c8c:	f1bb 0f00 	cmp.w	fp, #0
 8006c90:	d050      	beq.n	8006d34 <__hexnan+0x130>
 8006c92:	454c      	cmp	r4, r9
 8006c94:	d206      	bcs.n	8006ca4 <__hexnan+0xa0>
 8006c96:	2d07      	cmp	r5, #7
 8006c98:	dc04      	bgt.n	8006ca4 <__hexnan+0xa0>
 8006c9a:	462a      	mov	r2, r5
 8006c9c:	4649      	mov	r1, r9
 8006c9e:	4620      	mov	r0, r4
 8006ca0:	f7ff ff8a 	bl	8006bb8 <L_shift>
 8006ca4:	4544      	cmp	r4, r8
 8006ca6:	d934      	bls.n	8006d12 <__hexnan+0x10e>
 8006ca8:	4623      	mov	r3, r4
 8006caa:	f1a8 0204 	sub.w	r2, r8, #4
 8006cae:	f853 1b04 	ldr.w	r1, [r3], #4
 8006cb2:	429f      	cmp	r7, r3
 8006cb4:	f842 1f04 	str.w	r1, [r2, #4]!
 8006cb8:	d2f9      	bcs.n	8006cae <__hexnan+0xaa>
 8006cba:	1b3b      	subs	r3, r7, r4
 8006cbc:	f023 0303 	bic.w	r3, r3, #3
 8006cc0:	3304      	adds	r3, #4
 8006cc2:	3401      	adds	r4, #1
 8006cc4:	3e03      	subs	r6, #3
 8006cc6:	42b4      	cmp	r4, r6
 8006cc8:	bf88      	it	hi
 8006cca:	2304      	movhi	r3, #4
 8006ccc:	2200      	movs	r2, #0
 8006cce:	4443      	add	r3, r8
 8006cd0:	f843 2b04 	str.w	r2, [r3], #4
 8006cd4:	429f      	cmp	r7, r3
 8006cd6:	d2fb      	bcs.n	8006cd0 <__hexnan+0xcc>
 8006cd8:	683b      	ldr	r3, [r7, #0]
 8006cda:	b91b      	cbnz	r3, 8006ce4 <__hexnan+0xe0>
 8006cdc:	4547      	cmp	r7, r8
 8006cde:	d127      	bne.n	8006d30 <__hexnan+0x12c>
 8006ce0:	2301      	movs	r3, #1
 8006ce2:	603b      	str	r3, [r7, #0]
 8006ce4:	2005      	movs	r0, #5
 8006ce6:	e026      	b.n	8006d36 <__hexnan+0x132>
 8006ce8:	3501      	adds	r5, #1
 8006cea:	2d08      	cmp	r5, #8
 8006cec:	f10b 0b01 	add.w	fp, fp, #1
 8006cf0:	dd06      	ble.n	8006d00 <__hexnan+0xfc>
 8006cf2:	4544      	cmp	r4, r8
 8006cf4:	d9c3      	bls.n	8006c7e <__hexnan+0x7a>
 8006cf6:	2300      	movs	r3, #0
 8006cf8:	2501      	movs	r5, #1
 8006cfa:	f844 3c04 	str.w	r3, [r4, #-4]
 8006cfe:	3c04      	subs	r4, #4
 8006d00:	6822      	ldr	r2, [r4, #0]
 8006d02:	f000 000f 	and.w	r0, r0, #15
 8006d06:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8006d0a:	6022      	str	r2, [r4, #0]
 8006d0c:	e7b7      	b.n	8006c7e <__hexnan+0x7a>
 8006d0e:	2508      	movs	r5, #8
 8006d10:	e7b5      	b.n	8006c7e <__hexnan+0x7a>
 8006d12:	9b01      	ldr	r3, [sp, #4]
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d0df      	beq.n	8006cd8 <__hexnan+0xd4>
 8006d18:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006d1c:	f1c3 0320 	rsb	r3, r3, #32
 8006d20:	fa22 f303 	lsr.w	r3, r2, r3
 8006d24:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8006d28:	401a      	ands	r2, r3
 8006d2a:	f846 2c04 	str.w	r2, [r6, #-4]
 8006d2e:	e7d3      	b.n	8006cd8 <__hexnan+0xd4>
 8006d30:	3f04      	subs	r7, #4
 8006d32:	e7d1      	b.n	8006cd8 <__hexnan+0xd4>
 8006d34:	2004      	movs	r0, #4
 8006d36:	b007      	add	sp, #28
 8006d38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006d3c <malloc>:
 8006d3c:	4b02      	ldr	r3, [pc, #8]	; (8006d48 <malloc+0xc>)
 8006d3e:	4601      	mov	r1, r0
 8006d40:	6818      	ldr	r0, [r3, #0]
 8006d42:	f000 bd57 	b.w	80077f4 <_malloc_r>
 8006d46:	bf00      	nop
 8006d48:	2000000c 	.word	0x2000000c

08006d4c <__ascii_mbtowc>:
 8006d4c:	b082      	sub	sp, #8
 8006d4e:	b901      	cbnz	r1, 8006d52 <__ascii_mbtowc+0x6>
 8006d50:	a901      	add	r1, sp, #4
 8006d52:	b142      	cbz	r2, 8006d66 <__ascii_mbtowc+0x1a>
 8006d54:	b14b      	cbz	r3, 8006d6a <__ascii_mbtowc+0x1e>
 8006d56:	7813      	ldrb	r3, [r2, #0]
 8006d58:	600b      	str	r3, [r1, #0]
 8006d5a:	7812      	ldrb	r2, [r2, #0]
 8006d5c:	1e10      	subs	r0, r2, #0
 8006d5e:	bf18      	it	ne
 8006d60:	2001      	movne	r0, #1
 8006d62:	b002      	add	sp, #8
 8006d64:	4770      	bx	lr
 8006d66:	4610      	mov	r0, r2
 8006d68:	e7fb      	b.n	8006d62 <__ascii_mbtowc+0x16>
 8006d6a:	f06f 0001 	mvn.w	r0, #1
 8006d6e:	e7f8      	b.n	8006d62 <__ascii_mbtowc+0x16>

08006d70 <memcpy>:
 8006d70:	440a      	add	r2, r1
 8006d72:	4291      	cmp	r1, r2
 8006d74:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8006d78:	d100      	bne.n	8006d7c <memcpy+0xc>
 8006d7a:	4770      	bx	lr
 8006d7c:	b510      	push	{r4, lr}
 8006d7e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006d82:	4291      	cmp	r1, r2
 8006d84:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006d88:	d1f9      	bne.n	8006d7e <memcpy+0xe>
 8006d8a:	bd10      	pop	{r4, pc}

08006d8c <_Balloc>:
 8006d8c:	b570      	push	{r4, r5, r6, lr}
 8006d8e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006d90:	4604      	mov	r4, r0
 8006d92:	460d      	mov	r5, r1
 8006d94:	b976      	cbnz	r6, 8006db4 <_Balloc+0x28>
 8006d96:	2010      	movs	r0, #16
 8006d98:	f7ff ffd0 	bl	8006d3c <malloc>
 8006d9c:	4602      	mov	r2, r0
 8006d9e:	6260      	str	r0, [r4, #36]	; 0x24
 8006da0:	b920      	cbnz	r0, 8006dac <_Balloc+0x20>
 8006da2:	2166      	movs	r1, #102	; 0x66
 8006da4:	4b17      	ldr	r3, [pc, #92]	; (8006e04 <_Balloc+0x78>)
 8006da6:	4818      	ldr	r0, [pc, #96]	; (8006e08 <_Balloc+0x7c>)
 8006da8:	f7ff fc32 	bl	8006610 <__assert_func>
 8006dac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006db0:	6006      	str	r6, [r0, #0]
 8006db2:	60c6      	str	r6, [r0, #12]
 8006db4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006db6:	68f3      	ldr	r3, [r6, #12]
 8006db8:	b183      	cbz	r3, 8006ddc <_Balloc+0x50>
 8006dba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006dbc:	68db      	ldr	r3, [r3, #12]
 8006dbe:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006dc2:	b9b8      	cbnz	r0, 8006df4 <_Balloc+0x68>
 8006dc4:	2101      	movs	r1, #1
 8006dc6:	fa01 f605 	lsl.w	r6, r1, r5
 8006dca:	1d72      	adds	r2, r6, #5
 8006dcc:	4620      	mov	r0, r4
 8006dce:	0092      	lsls	r2, r2, #2
 8006dd0:	f000 fc94 	bl	80076fc <_calloc_r>
 8006dd4:	b160      	cbz	r0, 8006df0 <_Balloc+0x64>
 8006dd6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006dda:	e00e      	b.n	8006dfa <_Balloc+0x6e>
 8006ddc:	2221      	movs	r2, #33	; 0x21
 8006dde:	2104      	movs	r1, #4
 8006de0:	4620      	mov	r0, r4
 8006de2:	f000 fc8b 	bl	80076fc <_calloc_r>
 8006de6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006de8:	60f0      	str	r0, [r6, #12]
 8006dea:	68db      	ldr	r3, [r3, #12]
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d1e4      	bne.n	8006dba <_Balloc+0x2e>
 8006df0:	2000      	movs	r0, #0
 8006df2:	bd70      	pop	{r4, r5, r6, pc}
 8006df4:	6802      	ldr	r2, [r0, #0]
 8006df6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006dfa:	2300      	movs	r3, #0
 8006dfc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006e00:	e7f7      	b.n	8006df2 <_Balloc+0x66>
 8006e02:	bf00      	nop
 8006e04:	080087e0 	.word	0x080087e0
 8006e08:	0800891c 	.word	0x0800891c

08006e0c <_Bfree>:
 8006e0c:	b570      	push	{r4, r5, r6, lr}
 8006e0e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006e10:	4605      	mov	r5, r0
 8006e12:	460c      	mov	r4, r1
 8006e14:	b976      	cbnz	r6, 8006e34 <_Bfree+0x28>
 8006e16:	2010      	movs	r0, #16
 8006e18:	f7ff ff90 	bl	8006d3c <malloc>
 8006e1c:	4602      	mov	r2, r0
 8006e1e:	6268      	str	r0, [r5, #36]	; 0x24
 8006e20:	b920      	cbnz	r0, 8006e2c <_Bfree+0x20>
 8006e22:	218a      	movs	r1, #138	; 0x8a
 8006e24:	4b08      	ldr	r3, [pc, #32]	; (8006e48 <_Bfree+0x3c>)
 8006e26:	4809      	ldr	r0, [pc, #36]	; (8006e4c <_Bfree+0x40>)
 8006e28:	f7ff fbf2 	bl	8006610 <__assert_func>
 8006e2c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006e30:	6006      	str	r6, [r0, #0]
 8006e32:	60c6      	str	r6, [r0, #12]
 8006e34:	b13c      	cbz	r4, 8006e46 <_Bfree+0x3a>
 8006e36:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006e38:	6862      	ldr	r2, [r4, #4]
 8006e3a:	68db      	ldr	r3, [r3, #12]
 8006e3c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006e40:	6021      	str	r1, [r4, #0]
 8006e42:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006e46:	bd70      	pop	{r4, r5, r6, pc}
 8006e48:	080087e0 	.word	0x080087e0
 8006e4c:	0800891c 	.word	0x0800891c

08006e50 <__multadd>:
 8006e50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e54:	4607      	mov	r7, r0
 8006e56:	460c      	mov	r4, r1
 8006e58:	461e      	mov	r6, r3
 8006e5a:	2000      	movs	r0, #0
 8006e5c:	690d      	ldr	r5, [r1, #16]
 8006e5e:	f101 0c14 	add.w	ip, r1, #20
 8006e62:	f8dc 3000 	ldr.w	r3, [ip]
 8006e66:	3001      	adds	r0, #1
 8006e68:	b299      	uxth	r1, r3
 8006e6a:	fb02 6101 	mla	r1, r2, r1, r6
 8006e6e:	0c1e      	lsrs	r6, r3, #16
 8006e70:	0c0b      	lsrs	r3, r1, #16
 8006e72:	fb02 3306 	mla	r3, r2, r6, r3
 8006e76:	b289      	uxth	r1, r1
 8006e78:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006e7c:	4285      	cmp	r5, r0
 8006e7e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006e82:	f84c 1b04 	str.w	r1, [ip], #4
 8006e86:	dcec      	bgt.n	8006e62 <__multadd+0x12>
 8006e88:	b30e      	cbz	r6, 8006ece <__multadd+0x7e>
 8006e8a:	68a3      	ldr	r3, [r4, #8]
 8006e8c:	42ab      	cmp	r3, r5
 8006e8e:	dc19      	bgt.n	8006ec4 <__multadd+0x74>
 8006e90:	6861      	ldr	r1, [r4, #4]
 8006e92:	4638      	mov	r0, r7
 8006e94:	3101      	adds	r1, #1
 8006e96:	f7ff ff79 	bl	8006d8c <_Balloc>
 8006e9a:	4680      	mov	r8, r0
 8006e9c:	b928      	cbnz	r0, 8006eaa <__multadd+0x5a>
 8006e9e:	4602      	mov	r2, r0
 8006ea0:	21b5      	movs	r1, #181	; 0xb5
 8006ea2:	4b0c      	ldr	r3, [pc, #48]	; (8006ed4 <__multadd+0x84>)
 8006ea4:	480c      	ldr	r0, [pc, #48]	; (8006ed8 <__multadd+0x88>)
 8006ea6:	f7ff fbb3 	bl	8006610 <__assert_func>
 8006eaa:	6922      	ldr	r2, [r4, #16]
 8006eac:	f104 010c 	add.w	r1, r4, #12
 8006eb0:	3202      	adds	r2, #2
 8006eb2:	0092      	lsls	r2, r2, #2
 8006eb4:	300c      	adds	r0, #12
 8006eb6:	f7ff ff5b 	bl	8006d70 <memcpy>
 8006eba:	4621      	mov	r1, r4
 8006ebc:	4638      	mov	r0, r7
 8006ebe:	f7ff ffa5 	bl	8006e0c <_Bfree>
 8006ec2:	4644      	mov	r4, r8
 8006ec4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006ec8:	3501      	adds	r5, #1
 8006eca:	615e      	str	r6, [r3, #20]
 8006ecc:	6125      	str	r5, [r4, #16]
 8006ece:	4620      	mov	r0, r4
 8006ed0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006ed4:	08008890 	.word	0x08008890
 8006ed8:	0800891c 	.word	0x0800891c

08006edc <__s2b>:
 8006edc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006ee0:	4615      	mov	r5, r2
 8006ee2:	2209      	movs	r2, #9
 8006ee4:	461f      	mov	r7, r3
 8006ee6:	3308      	adds	r3, #8
 8006ee8:	460c      	mov	r4, r1
 8006eea:	fb93 f3f2 	sdiv	r3, r3, r2
 8006eee:	4606      	mov	r6, r0
 8006ef0:	2201      	movs	r2, #1
 8006ef2:	2100      	movs	r1, #0
 8006ef4:	429a      	cmp	r2, r3
 8006ef6:	db09      	blt.n	8006f0c <__s2b+0x30>
 8006ef8:	4630      	mov	r0, r6
 8006efa:	f7ff ff47 	bl	8006d8c <_Balloc>
 8006efe:	b940      	cbnz	r0, 8006f12 <__s2b+0x36>
 8006f00:	4602      	mov	r2, r0
 8006f02:	21ce      	movs	r1, #206	; 0xce
 8006f04:	4b18      	ldr	r3, [pc, #96]	; (8006f68 <__s2b+0x8c>)
 8006f06:	4819      	ldr	r0, [pc, #100]	; (8006f6c <__s2b+0x90>)
 8006f08:	f7ff fb82 	bl	8006610 <__assert_func>
 8006f0c:	0052      	lsls	r2, r2, #1
 8006f0e:	3101      	adds	r1, #1
 8006f10:	e7f0      	b.n	8006ef4 <__s2b+0x18>
 8006f12:	9b08      	ldr	r3, [sp, #32]
 8006f14:	2d09      	cmp	r5, #9
 8006f16:	6143      	str	r3, [r0, #20]
 8006f18:	f04f 0301 	mov.w	r3, #1
 8006f1c:	6103      	str	r3, [r0, #16]
 8006f1e:	dd16      	ble.n	8006f4e <__s2b+0x72>
 8006f20:	f104 0909 	add.w	r9, r4, #9
 8006f24:	46c8      	mov	r8, r9
 8006f26:	442c      	add	r4, r5
 8006f28:	f818 3b01 	ldrb.w	r3, [r8], #1
 8006f2c:	4601      	mov	r1, r0
 8006f2e:	220a      	movs	r2, #10
 8006f30:	4630      	mov	r0, r6
 8006f32:	3b30      	subs	r3, #48	; 0x30
 8006f34:	f7ff ff8c 	bl	8006e50 <__multadd>
 8006f38:	45a0      	cmp	r8, r4
 8006f3a:	d1f5      	bne.n	8006f28 <__s2b+0x4c>
 8006f3c:	f1a5 0408 	sub.w	r4, r5, #8
 8006f40:	444c      	add	r4, r9
 8006f42:	1b2d      	subs	r5, r5, r4
 8006f44:	1963      	adds	r3, r4, r5
 8006f46:	42bb      	cmp	r3, r7
 8006f48:	db04      	blt.n	8006f54 <__s2b+0x78>
 8006f4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006f4e:	2509      	movs	r5, #9
 8006f50:	340a      	adds	r4, #10
 8006f52:	e7f6      	b.n	8006f42 <__s2b+0x66>
 8006f54:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006f58:	4601      	mov	r1, r0
 8006f5a:	220a      	movs	r2, #10
 8006f5c:	4630      	mov	r0, r6
 8006f5e:	3b30      	subs	r3, #48	; 0x30
 8006f60:	f7ff ff76 	bl	8006e50 <__multadd>
 8006f64:	e7ee      	b.n	8006f44 <__s2b+0x68>
 8006f66:	bf00      	nop
 8006f68:	08008890 	.word	0x08008890
 8006f6c:	0800891c 	.word	0x0800891c

08006f70 <__hi0bits>:
 8006f70:	0c02      	lsrs	r2, r0, #16
 8006f72:	0412      	lsls	r2, r2, #16
 8006f74:	4603      	mov	r3, r0
 8006f76:	b9ca      	cbnz	r2, 8006fac <__hi0bits+0x3c>
 8006f78:	0403      	lsls	r3, r0, #16
 8006f7a:	2010      	movs	r0, #16
 8006f7c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8006f80:	bf04      	itt	eq
 8006f82:	021b      	lsleq	r3, r3, #8
 8006f84:	3008      	addeq	r0, #8
 8006f86:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8006f8a:	bf04      	itt	eq
 8006f8c:	011b      	lsleq	r3, r3, #4
 8006f8e:	3004      	addeq	r0, #4
 8006f90:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8006f94:	bf04      	itt	eq
 8006f96:	009b      	lsleq	r3, r3, #2
 8006f98:	3002      	addeq	r0, #2
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	db05      	blt.n	8006faa <__hi0bits+0x3a>
 8006f9e:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8006fa2:	f100 0001 	add.w	r0, r0, #1
 8006fa6:	bf08      	it	eq
 8006fa8:	2020      	moveq	r0, #32
 8006faa:	4770      	bx	lr
 8006fac:	2000      	movs	r0, #0
 8006fae:	e7e5      	b.n	8006f7c <__hi0bits+0xc>

08006fb0 <__lo0bits>:
 8006fb0:	6803      	ldr	r3, [r0, #0]
 8006fb2:	4602      	mov	r2, r0
 8006fb4:	f013 0007 	ands.w	r0, r3, #7
 8006fb8:	d00b      	beq.n	8006fd2 <__lo0bits+0x22>
 8006fba:	07d9      	lsls	r1, r3, #31
 8006fbc:	d421      	bmi.n	8007002 <__lo0bits+0x52>
 8006fbe:	0798      	lsls	r0, r3, #30
 8006fc0:	bf49      	itett	mi
 8006fc2:	085b      	lsrmi	r3, r3, #1
 8006fc4:	089b      	lsrpl	r3, r3, #2
 8006fc6:	2001      	movmi	r0, #1
 8006fc8:	6013      	strmi	r3, [r2, #0]
 8006fca:	bf5c      	itt	pl
 8006fcc:	2002      	movpl	r0, #2
 8006fce:	6013      	strpl	r3, [r2, #0]
 8006fd0:	4770      	bx	lr
 8006fd2:	b299      	uxth	r1, r3
 8006fd4:	b909      	cbnz	r1, 8006fda <__lo0bits+0x2a>
 8006fd6:	2010      	movs	r0, #16
 8006fd8:	0c1b      	lsrs	r3, r3, #16
 8006fda:	b2d9      	uxtb	r1, r3
 8006fdc:	b909      	cbnz	r1, 8006fe2 <__lo0bits+0x32>
 8006fde:	3008      	adds	r0, #8
 8006fe0:	0a1b      	lsrs	r3, r3, #8
 8006fe2:	0719      	lsls	r1, r3, #28
 8006fe4:	bf04      	itt	eq
 8006fe6:	091b      	lsreq	r3, r3, #4
 8006fe8:	3004      	addeq	r0, #4
 8006fea:	0799      	lsls	r1, r3, #30
 8006fec:	bf04      	itt	eq
 8006fee:	089b      	lsreq	r3, r3, #2
 8006ff0:	3002      	addeq	r0, #2
 8006ff2:	07d9      	lsls	r1, r3, #31
 8006ff4:	d403      	bmi.n	8006ffe <__lo0bits+0x4e>
 8006ff6:	085b      	lsrs	r3, r3, #1
 8006ff8:	f100 0001 	add.w	r0, r0, #1
 8006ffc:	d003      	beq.n	8007006 <__lo0bits+0x56>
 8006ffe:	6013      	str	r3, [r2, #0]
 8007000:	4770      	bx	lr
 8007002:	2000      	movs	r0, #0
 8007004:	4770      	bx	lr
 8007006:	2020      	movs	r0, #32
 8007008:	4770      	bx	lr
	...

0800700c <__i2b>:
 800700c:	b510      	push	{r4, lr}
 800700e:	460c      	mov	r4, r1
 8007010:	2101      	movs	r1, #1
 8007012:	f7ff febb 	bl	8006d8c <_Balloc>
 8007016:	4602      	mov	r2, r0
 8007018:	b928      	cbnz	r0, 8007026 <__i2b+0x1a>
 800701a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800701e:	4b04      	ldr	r3, [pc, #16]	; (8007030 <__i2b+0x24>)
 8007020:	4804      	ldr	r0, [pc, #16]	; (8007034 <__i2b+0x28>)
 8007022:	f7ff faf5 	bl	8006610 <__assert_func>
 8007026:	2301      	movs	r3, #1
 8007028:	6144      	str	r4, [r0, #20]
 800702a:	6103      	str	r3, [r0, #16]
 800702c:	bd10      	pop	{r4, pc}
 800702e:	bf00      	nop
 8007030:	08008890 	.word	0x08008890
 8007034:	0800891c 	.word	0x0800891c

08007038 <__multiply>:
 8007038:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800703c:	4691      	mov	r9, r2
 800703e:	690a      	ldr	r2, [r1, #16]
 8007040:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007044:	460c      	mov	r4, r1
 8007046:	429a      	cmp	r2, r3
 8007048:	bfbe      	ittt	lt
 800704a:	460b      	movlt	r3, r1
 800704c:	464c      	movlt	r4, r9
 800704e:	4699      	movlt	r9, r3
 8007050:	6927      	ldr	r7, [r4, #16]
 8007052:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007056:	68a3      	ldr	r3, [r4, #8]
 8007058:	6861      	ldr	r1, [r4, #4]
 800705a:	eb07 060a 	add.w	r6, r7, sl
 800705e:	42b3      	cmp	r3, r6
 8007060:	b085      	sub	sp, #20
 8007062:	bfb8      	it	lt
 8007064:	3101      	addlt	r1, #1
 8007066:	f7ff fe91 	bl	8006d8c <_Balloc>
 800706a:	b930      	cbnz	r0, 800707a <__multiply+0x42>
 800706c:	4602      	mov	r2, r0
 800706e:	f240 115d 	movw	r1, #349	; 0x15d
 8007072:	4b43      	ldr	r3, [pc, #268]	; (8007180 <__multiply+0x148>)
 8007074:	4843      	ldr	r0, [pc, #268]	; (8007184 <__multiply+0x14c>)
 8007076:	f7ff facb 	bl	8006610 <__assert_func>
 800707a:	f100 0514 	add.w	r5, r0, #20
 800707e:	462b      	mov	r3, r5
 8007080:	2200      	movs	r2, #0
 8007082:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007086:	4543      	cmp	r3, r8
 8007088:	d321      	bcc.n	80070ce <__multiply+0x96>
 800708a:	f104 0314 	add.w	r3, r4, #20
 800708e:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007092:	f109 0314 	add.w	r3, r9, #20
 8007096:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800709a:	9202      	str	r2, [sp, #8]
 800709c:	1b3a      	subs	r2, r7, r4
 800709e:	3a15      	subs	r2, #21
 80070a0:	f022 0203 	bic.w	r2, r2, #3
 80070a4:	3204      	adds	r2, #4
 80070a6:	f104 0115 	add.w	r1, r4, #21
 80070aa:	428f      	cmp	r7, r1
 80070ac:	bf38      	it	cc
 80070ae:	2204      	movcc	r2, #4
 80070b0:	9201      	str	r2, [sp, #4]
 80070b2:	9a02      	ldr	r2, [sp, #8]
 80070b4:	9303      	str	r3, [sp, #12]
 80070b6:	429a      	cmp	r2, r3
 80070b8:	d80c      	bhi.n	80070d4 <__multiply+0x9c>
 80070ba:	2e00      	cmp	r6, #0
 80070bc:	dd03      	ble.n	80070c6 <__multiply+0x8e>
 80070be:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d059      	beq.n	800717a <__multiply+0x142>
 80070c6:	6106      	str	r6, [r0, #16]
 80070c8:	b005      	add	sp, #20
 80070ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070ce:	f843 2b04 	str.w	r2, [r3], #4
 80070d2:	e7d8      	b.n	8007086 <__multiply+0x4e>
 80070d4:	f8b3 a000 	ldrh.w	sl, [r3]
 80070d8:	f1ba 0f00 	cmp.w	sl, #0
 80070dc:	d023      	beq.n	8007126 <__multiply+0xee>
 80070de:	46a9      	mov	r9, r5
 80070e0:	f04f 0c00 	mov.w	ip, #0
 80070e4:	f104 0e14 	add.w	lr, r4, #20
 80070e8:	f85e 2b04 	ldr.w	r2, [lr], #4
 80070ec:	f8d9 1000 	ldr.w	r1, [r9]
 80070f0:	fa1f fb82 	uxth.w	fp, r2
 80070f4:	b289      	uxth	r1, r1
 80070f6:	fb0a 110b 	mla	r1, sl, fp, r1
 80070fa:	4461      	add	r1, ip
 80070fc:	f8d9 c000 	ldr.w	ip, [r9]
 8007100:	0c12      	lsrs	r2, r2, #16
 8007102:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8007106:	fb0a c202 	mla	r2, sl, r2, ip
 800710a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800710e:	b289      	uxth	r1, r1
 8007110:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007114:	4577      	cmp	r7, lr
 8007116:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800711a:	f849 1b04 	str.w	r1, [r9], #4
 800711e:	d8e3      	bhi.n	80070e8 <__multiply+0xb0>
 8007120:	9a01      	ldr	r2, [sp, #4]
 8007122:	f845 c002 	str.w	ip, [r5, r2]
 8007126:	9a03      	ldr	r2, [sp, #12]
 8007128:	3304      	adds	r3, #4
 800712a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800712e:	f1b9 0f00 	cmp.w	r9, #0
 8007132:	d020      	beq.n	8007176 <__multiply+0x13e>
 8007134:	46ae      	mov	lr, r5
 8007136:	f04f 0a00 	mov.w	sl, #0
 800713a:	6829      	ldr	r1, [r5, #0]
 800713c:	f104 0c14 	add.w	ip, r4, #20
 8007140:	f8bc b000 	ldrh.w	fp, [ip]
 8007144:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007148:	b289      	uxth	r1, r1
 800714a:	fb09 220b 	mla	r2, r9, fp, r2
 800714e:	4492      	add	sl, r2
 8007150:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8007154:	f84e 1b04 	str.w	r1, [lr], #4
 8007158:	f85c 2b04 	ldr.w	r2, [ip], #4
 800715c:	f8be 1000 	ldrh.w	r1, [lr]
 8007160:	0c12      	lsrs	r2, r2, #16
 8007162:	fb09 1102 	mla	r1, r9, r2, r1
 8007166:	4567      	cmp	r7, ip
 8007168:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800716c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007170:	d8e6      	bhi.n	8007140 <__multiply+0x108>
 8007172:	9a01      	ldr	r2, [sp, #4]
 8007174:	50a9      	str	r1, [r5, r2]
 8007176:	3504      	adds	r5, #4
 8007178:	e79b      	b.n	80070b2 <__multiply+0x7a>
 800717a:	3e01      	subs	r6, #1
 800717c:	e79d      	b.n	80070ba <__multiply+0x82>
 800717e:	bf00      	nop
 8007180:	08008890 	.word	0x08008890
 8007184:	0800891c 	.word	0x0800891c

08007188 <__pow5mult>:
 8007188:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800718c:	4615      	mov	r5, r2
 800718e:	f012 0203 	ands.w	r2, r2, #3
 8007192:	4606      	mov	r6, r0
 8007194:	460f      	mov	r7, r1
 8007196:	d007      	beq.n	80071a8 <__pow5mult+0x20>
 8007198:	4c25      	ldr	r4, [pc, #148]	; (8007230 <__pow5mult+0xa8>)
 800719a:	3a01      	subs	r2, #1
 800719c:	2300      	movs	r3, #0
 800719e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80071a2:	f7ff fe55 	bl	8006e50 <__multadd>
 80071a6:	4607      	mov	r7, r0
 80071a8:	10ad      	asrs	r5, r5, #2
 80071aa:	d03d      	beq.n	8007228 <__pow5mult+0xa0>
 80071ac:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80071ae:	b97c      	cbnz	r4, 80071d0 <__pow5mult+0x48>
 80071b0:	2010      	movs	r0, #16
 80071b2:	f7ff fdc3 	bl	8006d3c <malloc>
 80071b6:	4602      	mov	r2, r0
 80071b8:	6270      	str	r0, [r6, #36]	; 0x24
 80071ba:	b928      	cbnz	r0, 80071c8 <__pow5mult+0x40>
 80071bc:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80071c0:	4b1c      	ldr	r3, [pc, #112]	; (8007234 <__pow5mult+0xac>)
 80071c2:	481d      	ldr	r0, [pc, #116]	; (8007238 <__pow5mult+0xb0>)
 80071c4:	f7ff fa24 	bl	8006610 <__assert_func>
 80071c8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80071cc:	6004      	str	r4, [r0, #0]
 80071ce:	60c4      	str	r4, [r0, #12]
 80071d0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80071d4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80071d8:	b94c      	cbnz	r4, 80071ee <__pow5mult+0x66>
 80071da:	f240 2171 	movw	r1, #625	; 0x271
 80071de:	4630      	mov	r0, r6
 80071e0:	f7ff ff14 	bl	800700c <__i2b>
 80071e4:	2300      	movs	r3, #0
 80071e6:	4604      	mov	r4, r0
 80071e8:	f8c8 0008 	str.w	r0, [r8, #8]
 80071ec:	6003      	str	r3, [r0, #0]
 80071ee:	f04f 0900 	mov.w	r9, #0
 80071f2:	07eb      	lsls	r3, r5, #31
 80071f4:	d50a      	bpl.n	800720c <__pow5mult+0x84>
 80071f6:	4639      	mov	r1, r7
 80071f8:	4622      	mov	r2, r4
 80071fa:	4630      	mov	r0, r6
 80071fc:	f7ff ff1c 	bl	8007038 <__multiply>
 8007200:	4680      	mov	r8, r0
 8007202:	4639      	mov	r1, r7
 8007204:	4630      	mov	r0, r6
 8007206:	f7ff fe01 	bl	8006e0c <_Bfree>
 800720a:	4647      	mov	r7, r8
 800720c:	106d      	asrs	r5, r5, #1
 800720e:	d00b      	beq.n	8007228 <__pow5mult+0xa0>
 8007210:	6820      	ldr	r0, [r4, #0]
 8007212:	b938      	cbnz	r0, 8007224 <__pow5mult+0x9c>
 8007214:	4622      	mov	r2, r4
 8007216:	4621      	mov	r1, r4
 8007218:	4630      	mov	r0, r6
 800721a:	f7ff ff0d 	bl	8007038 <__multiply>
 800721e:	6020      	str	r0, [r4, #0]
 8007220:	f8c0 9000 	str.w	r9, [r0]
 8007224:	4604      	mov	r4, r0
 8007226:	e7e4      	b.n	80071f2 <__pow5mult+0x6a>
 8007228:	4638      	mov	r0, r7
 800722a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800722e:	bf00      	nop
 8007230:	08008a68 	.word	0x08008a68
 8007234:	080087e0 	.word	0x080087e0
 8007238:	0800891c 	.word	0x0800891c

0800723c <__lshift>:
 800723c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007240:	460c      	mov	r4, r1
 8007242:	4607      	mov	r7, r0
 8007244:	4691      	mov	r9, r2
 8007246:	6923      	ldr	r3, [r4, #16]
 8007248:	6849      	ldr	r1, [r1, #4]
 800724a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800724e:	68a3      	ldr	r3, [r4, #8]
 8007250:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007254:	f108 0601 	add.w	r6, r8, #1
 8007258:	42b3      	cmp	r3, r6
 800725a:	db0b      	blt.n	8007274 <__lshift+0x38>
 800725c:	4638      	mov	r0, r7
 800725e:	f7ff fd95 	bl	8006d8c <_Balloc>
 8007262:	4605      	mov	r5, r0
 8007264:	b948      	cbnz	r0, 800727a <__lshift+0x3e>
 8007266:	4602      	mov	r2, r0
 8007268:	f240 11d9 	movw	r1, #473	; 0x1d9
 800726c:	4b29      	ldr	r3, [pc, #164]	; (8007314 <__lshift+0xd8>)
 800726e:	482a      	ldr	r0, [pc, #168]	; (8007318 <__lshift+0xdc>)
 8007270:	f7ff f9ce 	bl	8006610 <__assert_func>
 8007274:	3101      	adds	r1, #1
 8007276:	005b      	lsls	r3, r3, #1
 8007278:	e7ee      	b.n	8007258 <__lshift+0x1c>
 800727a:	2300      	movs	r3, #0
 800727c:	f100 0114 	add.w	r1, r0, #20
 8007280:	f100 0210 	add.w	r2, r0, #16
 8007284:	4618      	mov	r0, r3
 8007286:	4553      	cmp	r3, sl
 8007288:	db37      	blt.n	80072fa <__lshift+0xbe>
 800728a:	6920      	ldr	r0, [r4, #16]
 800728c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007290:	f104 0314 	add.w	r3, r4, #20
 8007294:	f019 091f 	ands.w	r9, r9, #31
 8007298:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800729c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80072a0:	d02f      	beq.n	8007302 <__lshift+0xc6>
 80072a2:	468a      	mov	sl, r1
 80072a4:	f04f 0c00 	mov.w	ip, #0
 80072a8:	f1c9 0e20 	rsb	lr, r9, #32
 80072ac:	681a      	ldr	r2, [r3, #0]
 80072ae:	fa02 f209 	lsl.w	r2, r2, r9
 80072b2:	ea42 020c 	orr.w	r2, r2, ip
 80072b6:	f84a 2b04 	str.w	r2, [sl], #4
 80072ba:	f853 2b04 	ldr.w	r2, [r3], #4
 80072be:	4298      	cmp	r0, r3
 80072c0:	fa22 fc0e 	lsr.w	ip, r2, lr
 80072c4:	d8f2      	bhi.n	80072ac <__lshift+0x70>
 80072c6:	1b03      	subs	r3, r0, r4
 80072c8:	3b15      	subs	r3, #21
 80072ca:	f023 0303 	bic.w	r3, r3, #3
 80072ce:	3304      	adds	r3, #4
 80072d0:	f104 0215 	add.w	r2, r4, #21
 80072d4:	4290      	cmp	r0, r2
 80072d6:	bf38      	it	cc
 80072d8:	2304      	movcc	r3, #4
 80072da:	f841 c003 	str.w	ip, [r1, r3]
 80072de:	f1bc 0f00 	cmp.w	ip, #0
 80072e2:	d001      	beq.n	80072e8 <__lshift+0xac>
 80072e4:	f108 0602 	add.w	r6, r8, #2
 80072e8:	3e01      	subs	r6, #1
 80072ea:	4638      	mov	r0, r7
 80072ec:	4621      	mov	r1, r4
 80072ee:	612e      	str	r6, [r5, #16]
 80072f0:	f7ff fd8c 	bl	8006e0c <_Bfree>
 80072f4:	4628      	mov	r0, r5
 80072f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80072fa:	f842 0f04 	str.w	r0, [r2, #4]!
 80072fe:	3301      	adds	r3, #1
 8007300:	e7c1      	b.n	8007286 <__lshift+0x4a>
 8007302:	3904      	subs	r1, #4
 8007304:	f853 2b04 	ldr.w	r2, [r3], #4
 8007308:	4298      	cmp	r0, r3
 800730a:	f841 2f04 	str.w	r2, [r1, #4]!
 800730e:	d8f9      	bhi.n	8007304 <__lshift+0xc8>
 8007310:	e7ea      	b.n	80072e8 <__lshift+0xac>
 8007312:	bf00      	nop
 8007314:	08008890 	.word	0x08008890
 8007318:	0800891c 	.word	0x0800891c

0800731c <__mcmp>:
 800731c:	4603      	mov	r3, r0
 800731e:	690a      	ldr	r2, [r1, #16]
 8007320:	6900      	ldr	r0, [r0, #16]
 8007322:	b530      	push	{r4, r5, lr}
 8007324:	1a80      	subs	r0, r0, r2
 8007326:	d10d      	bne.n	8007344 <__mcmp+0x28>
 8007328:	3314      	adds	r3, #20
 800732a:	3114      	adds	r1, #20
 800732c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007330:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007334:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007338:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800733c:	4295      	cmp	r5, r2
 800733e:	d002      	beq.n	8007346 <__mcmp+0x2a>
 8007340:	d304      	bcc.n	800734c <__mcmp+0x30>
 8007342:	2001      	movs	r0, #1
 8007344:	bd30      	pop	{r4, r5, pc}
 8007346:	42a3      	cmp	r3, r4
 8007348:	d3f4      	bcc.n	8007334 <__mcmp+0x18>
 800734a:	e7fb      	b.n	8007344 <__mcmp+0x28>
 800734c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007350:	e7f8      	b.n	8007344 <__mcmp+0x28>
	...

08007354 <__mdiff>:
 8007354:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007358:	460d      	mov	r5, r1
 800735a:	4607      	mov	r7, r0
 800735c:	4611      	mov	r1, r2
 800735e:	4628      	mov	r0, r5
 8007360:	4614      	mov	r4, r2
 8007362:	f7ff ffdb 	bl	800731c <__mcmp>
 8007366:	1e06      	subs	r6, r0, #0
 8007368:	d111      	bne.n	800738e <__mdiff+0x3a>
 800736a:	4631      	mov	r1, r6
 800736c:	4638      	mov	r0, r7
 800736e:	f7ff fd0d 	bl	8006d8c <_Balloc>
 8007372:	4602      	mov	r2, r0
 8007374:	b928      	cbnz	r0, 8007382 <__mdiff+0x2e>
 8007376:	f240 2132 	movw	r1, #562	; 0x232
 800737a:	4b3a      	ldr	r3, [pc, #232]	; (8007464 <__mdiff+0x110>)
 800737c:	483a      	ldr	r0, [pc, #232]	; (8007468 <__mdiff+0x114>)
 800737e:	f7ff f947 	bl	8006610 <__assert_func>
 8007382:	2301      	movs	r3, #1
 8007384:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8007388:	4610      	mov	r0, r2
 800738a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800738e:	bfa4      	itt	ge
 8007390:	4623      	movge	r3, r4
 8007392:	462c      	movge	r4, r5
 8007394:	4638      	mov	r0, r7
 8007396:	6861      	ldr	r1, [r4, #4]
 8007398:	bfa6      	itte	ge
 800739a:	461d      	movge	r5, r3
 800739c:	2600      	movge	r6, #0
 800739e:	2601      	movlt	r6, #1
 80073a0:	f7ff fcf4 	bl	8006d8c <_Balloc>
 80073a4:	4602      	mov	r2, r0
 80073a6:	b918      	cbnz	r0, 80073b0 <__mdiff+0x5c>
 80073a8:	f44f 7110 	mov.w	r1, #576	; 0x240
 80073ac:	4b2d      	ldr	r3, [pc, #180]	; (8007464 <__mdiff+0x110>)
 80073ae:	e7e5      	b.n	800737c <__mdiff+0x28>
 80073b0:	f102 0814 	add.w	r8, r2, #20
 80073b4:	46c2      	mov	sl, r8
 80073b6:	f04f 0c00 	mov.w	ip, #0
 80073ba:	6927      	ldr	r7, [r4, #16]
 80073bc:	60c6      	str	r6, [r0, #12]
 80073be:	692e      	ldr	r6, [r5, #16]
 80073c0:	f104 0014 	add.w	r0, r4, #20
 80073c4:	f105 0914 	add.w	r9, r5, #20
 80073c8:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 80073cc:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80073d0:	3410      	adds	r4, #16
 80073d2:	f854 bf04 	ldr.w	fp, [r4, #4]!
 80073d6:	f859 3b04 	ldr.w	r3, [r9], #4
 80073da:	fa1f f18b 	uxth.w	r1, fp
 80073de:	448c      	add	ip, r1
 80073e0:	b299      	uxth	r1, r3
 80073e2:	0c1b      	lsrs	r3, r3, #16
 80073e4:	ebac 0101 	sub.w	r1, ip, r1
 80073e8:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80073ec:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80073f0:	b289      	uxth	r1, r1
 80073f2:	ea4f 4c23 	mov.w	ip, r3, asr #16
 80073f6:	454e      	cmp	r6, r9
 80073f8:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80073fc:	f84a 3b04 	str.w	r3, [sl], #4
 8007400:	d8e7      	bhi.n	80073d2 <__mdiff+0x7e>
 8007402:	1b73      	subs	r3, r6, r5
 8007404:	3b15      	subs	r3, #21
 8007406:	f023 0303 	bic.w	r3, r3, #3
 800740a:	3515      	adds	r5, #21
 800740c:	3304      	adds	r3, #4
 800740e:	42ae      	cmp	r6, r5
 8007410:	bf38      	it	cc
 8007412:	2304      	movcc	r3, #4
 8007414:	4418      	add	r0, r3
 8007416:	4443      	add	r3, r8
 8007418:	461e      	mov	r6, r3
 800741a:	4605      	mov	r5, r0
 800741c:	4575      	cmp	r5, lr
 800741e:	d30e      	bcc.n	800743e <__mdiff+0xea>
 8007420:	f10e 0103 	add.w	r1, lr, #3
 8007424:	1a09      	subs	r1, r1, r0
 8007426:	f021 0103 	bic.w	r1, r1, #3
 800742a:	3803      	subs	r0, #3
 800742c:	4586      	cmp	lr, r0
 800742e:	bf38      	it	cc
 8007430:	2100      	movcc	r1, #0
 8007432:	4419      	add	r1, r3
 8007434:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8007438:	b18b      	cbz	r3, 800745e <__mdiff+0x10a>
 800743a:	6117      	str	r7, [r2, #16]
 800743c:	e7a4      	b.n	8007388 <__mdiff+0x34>
 800743e:	f855 8b04 	ldr.w	r8, [r5], #4
 8007442:	fa1f f188 	uxth.w	r1, r8
 8007446:	4461      	add	r1, ip
 8007448:	140c      	asrs	r4, r1, #16
 800744a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800744e:	b289      	uxth	r1, r1
 8007450:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8007454:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8007458:	f846 1b04 	str.w	r1, [r6], #4
 800745c:	e7de      	b.n	800741c <__mdiff+0xc8>
 800745e:	3f01      	subs	r7, #1
 8007460:	e7e8      	b.n	8007434 <__mdiff+0xe0>
 8007462:	bf00      	nop
 8007464:	08008890 	.word	0x08008890
 8007468:	0800891c 	.word	0x0800891c

0800746c <__ulp>:
 800746c:	4b11      	ldr	r3, [pc, #68]	; (80074b4 <__ulp+0x48>)
 800746e:	400b      	ands	r3, r1
 8007470:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8007474:	2b00      	cmp	r3, #0
 8007476:	dd02      	ble.n	800747e <__ulp+0x12>
 8007478:	2000      	movs	r0, #0
 800747a:	4619      	mov	r1, r3
 800747c:	4770      	bx	lr
 800747e:	425b      	negs	r3, r3
 8007480:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8007484:	f04f 0000 	mov.w	r0, #0
 8007488:	f04f 0100 	mov.w	r1, #0
 800748c:	ea4f 5223 	mov.w	r2, r3, asr #20
 8007490:	da04      	bge.n	800749c <__ulp+0x30>
 8007492:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8007496:	fa43 f102 	asr.w	r1, r3, r2
 800749a:	4770      	bx	lr
 800749c:	f1a2 0314 	sub.w	r3, r2, #20
 80074a0:	2b1e      	cmp	r3, #30
 80074a2:	bfd6      	itet	le
 80074a4:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 80074a8:	2301      	movgt	r3, #1
 80074aa:	fa22 f303 	lsrle.w	r3, r2, r3
 80074ae:	4618      	mov	r0, r3
 80074b0:	4770      	bx	lr
 80074b2:	bf00      	nop
 80074b4:	7ff00000 	.word	0x7ff00000

080074b8 <__b2d>:
 80074b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80074bc:	6907      	ldr	r7, [r0, #16]
 80074be:	f100 0914 	add.w	r9, r0, #20
 80074c2:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 80074c6:	f857 6c04 	ldr.w	r6, [r7, #-4]
 80074ca:	f1a7 0804 	sub.w	r8, r7, #4
 80074ce:	4630      	mov	r0, r6
 80074d0:	f7ff fd4e 	bl	8006f70 <__hi0bits>
 80074d4:	f1c0 0320 	rsb	r3, r0, #32
 80074d8:	280a      	cmp	r0, #10
 80074da:	600b      	str	r3, [r1, #0]
 80074dc:	491f      	ldr	r1, [pc, #124]	; (800755c <__b2d+0xa4>)
 80074de:	dc17      	bgt.n	8007510 <__b2d+0x58>
 80074e0:	45c1      	cmp	r9, r8
 80074e2:	bf28      	it	cs
 80074e4:	2200      	movcs	r2, #0
 80074e6:	f1c0 0c0b 	rsb	ip, r0, #11
 80074ea:	fa26 f30c 	lsr.w	r3, r6, ip
 80074ee:	bf38      	it	cc
 80074f0:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 80074f4:	ea43 0501 	orr.w	r5, r3, r1
 80074f8:	f100 0315 	add.w	r3, r0, #21
 80074fc:	fa06 f303 	lsl.w	r3, r6, r3
 8007500:	fa22 f20c 	lsr.w	r2, r2, ip
 8007504:	ea43 0402 	orr.w	r4, r3, r2
 8007508:	4620      	mov	r0, r4
 800750a:	4629      	mov	r1, r5
 800750c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007510:	45c1      	cmp	r9, r8
 8007512:	bf2e      	itee	cs
 8007514:	2200      	movcs	r2, #0
 8007516:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800751a:	f1a7 0808 	subcc.w	r8, r7, #8
 800751e:	f1b0 030b 	subs.w	r3, r0, #11
 8007522:	d016      	beq.n	8007552 <__b2d+0x9a>
 8007524:	f1c3 0720 	rsb	r7, r3, #32
 8007528:	fa22 f107 	lsr.w	r1, r2, r7
 800752c:	45c8      	cmp	r8, r9
 800752e:	fa06 f603 	lsl.w	r6, r6, r3
 8007532:	ea46 0601 	orr.w	r6, r6, r1
 8007536:	bf94      	ite	ls
 8007538:	2100      	movls	r1, #0
 800753a:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 800753e:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 8007542:	fa02 f003 	lsl.w	r0, r2, r3
 8007546:	40f9      	lsrs	r1, r7
 8007548:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800754c:	ea40 0401 	orr.w	r4, r0, r1
 8007550:	e7da      	b.n	8007508 <__b2d+0x50>
 8007552:	4614      	mov	r4, r2
 8007554:	ea46 0501 	orr.w	r5, r6, r1
 8007558:	e7d6      	b.n	8007508 <__b2d+0x50>
 800755a:	bf00      	nop
 800755c:	3ff00000 	.word	0x3ff00000

08007560 <__d2b>:
 8007560:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8007564:	2101      	movs	r1, #1
 8007566:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800756a:	4690      	mov	r8, r2
 800756c:	461d      	mov	r5, r3
 800756e:	f7ff fc0d 	bl	8006d8c <_Balloc>
 8007572:	4604      	mov	r4, r0
 8007574:	b930      	cbnz	r0, 8007584 <__d2b+0x24>
 8007576:	4602      	mov	r2, r0
 8007578:	f240 310a 	movw	r1, #778	; 0x30a
 800757c:	4b24      	ldr	r3, [pc, #144]	; (8007610 <__d2b+0xb0>)
 800757e:	4825      	ldr	r0, [pc, #148]	; (8007614 <__d2b+0xb4>)
 8007580:	f7ff f846 	bl	8006610 <__assert_func>
 8007584:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8007588:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800758c:	bb2d      	cbnz	r5, 80075da <__d2b+0x7a>
 800758e:	9301      	str	r3, [sp, #4]
 8007590:	f1b8 0300 	subs.w	r3, r8, #0
 8007594:	d026      	beq.n	80075e4 <__d2b+0x84>
 8007596:	4668      	mov	r0, sp
 8007598:	9300      	str	r3, [sp, #0]
 800759a:	f7ff fd09 	bl	8006fb0 <__lo0bits>
 800759e:	9900      	ldr	r1, [sp, #0]
 80075a0:	b1f0      	cbz	r0, 80075e0 <__d2b+0x80>
 80075a2:	9a01      	ldr	r2, [sp, #4]
 80075a4:	f1c0 0320 	rsb	r3, r0, #32
 80075a8:	fa02 f303 	lsl.w	r3, r2, r3
 80075ac:	430b      	orrs	r3, r1
 80075ae:	40c2      	lsrs	r2, r0
 80075b0:	6163      	str	r3, [r4, #20]
 80075b2:	9201      	str	r2, [sp, #4]
 80075b4:	9b01      	ldr	r3, [sp, #4]
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	bf14      	ite	ne
 80075ba:	2102      	movne	r1, #2
 80075bc:	2101      	moveq	r1, #1
 80075be:	61a3      	str	r3, [r4, #24]
 80075c0:	6121      	str	r1, [r4, #16]
 80075c2:	b1c5      	cbz	r5, 80075f6 <__d2b+0x96>
 80075c4:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80075c8:	4405      	add	r5, r0
 80075ca:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80075ce:	603d      	str	r5, [r7, #0]
 80075d0:	6030      	str	r0, [r6, #0]
 80075d2:	4620      	mov	r0, r4
 80075d4:	b002      	add	sp, #8
 80075d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80075da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80075de:	e7d6      	b.n	800758e <__d2b+0x2e>
 80075e0:	6161      	str	r1, [r4, #20]
 80075e2:	e7e7      	b.n	80075b4 <__d2b+0x54>
 80075e4:	a801      	add	r0, sp, #4
 80075e6:	f7ff fce3 	bl	8006fb0 <__lo0bits>
 80075ea:	2101      	movs	r1, #1
 80075ec:	9b01      	ldr	r3, [sp, #4]
 80075ee:	6121      	str	r1, [r4, #16]
 80075f0:	6163      	str	r3, [r4, #20]
 80075f2:	3020      	adds	r0, #32
 80075f4:	e7e5      	b.n	80075c2 <__d2b+0x62>
 80075f6:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 80075fa:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80075fe:	6038      	str	r0, [r7, #0]
 8007600:	6918      	ldr	r0, [r3, #16]
 8007602:	f7ff fcb5 	bl	8006f70 <__hi0bits>
 8007606:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800760a:	6031      	str	r1, [r6, #0]
 800760c:	e7e1      	b.n	80075d2 <__d2b+0x72>
 800760e:	bf00      	nop
 8007610:	08008890 	.word	0x08008890
 8007614:	0800891c 	.word	0x0800891c

08007618 <__ratio>:
 8007618:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800761c:	4688      	mov	r8, r1
 800761e:	4669      	mov	r1, sp
 8007620:	4681      	mov	r9, r0
 8007622:	f7ff ff49 	bl	80074b8 <__b2d>
 8007626:	460f      	mov	r7, r1
 8007628:	4604      	mov	r4, r0
 800762a:	460d      	mov	r5, r1
 800762c:	4640      	mov	r0, r8
 800762e:	a901      	add	r1, sp, #4
 8007630:	f7ff ff42 	bl	80074b8 <__b2d>
 8007634:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007638:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800763c:	468b      	mov	fp, r1
 800763e:	eba3 0c02 	sub.w	ip, r3, r2
 8007642:	e9dd 3200 	ldrd	r3, r2, [sp]
 8007646:	1a9b      	subs	r3, r3, r2
 8007648:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800764c:	2b00      	cmp	r3, #0
 800764e:	bfd5      	itete	le
 8007650:	460a      	movle	r2, r1
 8007652:	462a      	movgt	r2, r5
 8007654:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8007658:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800765c:	bfd8      	it	le
 800765e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8007662:	465b      	mov	r3, fp
 8007664:	4602      	mov	r2, r0
 8007666:	4639      	mov	r1, r7
 8007668:	4620      	mov	r0, r4
 800766a:	f7f9 f85f 	bl	800072c <__aeabi_ddiv>
 800766e:	b003      	add	sp, #12
 8007670:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007674 <__copybits>:
 8007674:	3901      	subs	r1, #1
 8007676:	b570      	push	{r4, r5, r6, lr}
 8007678:	1149      	asrs	r1, r1, #5
 800767a:	6914      	ldr	r4, [r2, #16]
 800767c:	3101      	adds	r1, #1
 800767e:	f102 0314 	add.w	r3, r2, #20
 8007682:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8007686:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800768a:	1f05      	subs	r5, r0, #4
 800768c:	42a3      	cmp	r3, r4
 800768e:	d30c      	bcc.n	80076aa <__copybits+0x36>
 8007690:	1aa3      	subs	r3, r4, r2
 8007692:	3b11      	subs	r3, #17
 8007694:	f023 0303 	bic.w	r3, r3, #3
 8007698:	3211      	adds	r2, #17
 800769a:	42a2      	cmp	r2, r4
 800769c:	bf88      	it	hi
 800769e:	2300      	movhi	r3, #0
 80076a0:	4418      	add	r0, r3
 80076a2:	2300      	movs	r3, #0
 80076a4:	4288      	cmp	r0, r1
 80076a6:	d305      	bcc.n	80076b4 <__copybits+0x40>
 80076a8:	bd70      	pop	{r4, r5, r6, pc}
 80076aa:	f853 6b04 	ldr.w	r6, [r3], #4
 80076ae:	f845 6f04 	str.w	r6, [r5, #4]!
 80076b2:	e7eb      	b.n	800768c <__copybits+0x18>
 80076b4:	f840 3b04 	str.w	r3, [r0], #4
 80076b8:	e7f4      	b.n	80076a4 <__copybits+0x30>

080076ba <__any_on>:
 80076ba:	f100 0214 	add.w	r2, r0, #20
 80076be:	6900      	ldr	r0, [r0, #16]
 80076c0:	114b      	asrs	r3, r1, #5
 80076c2:	4298      	cmp	r0, r3
 80076c4:	b510      	push	{r4, lr}
 80076c6:	db11      	blt.n	80076ec <__any_on+0x32>
 80076c8:	dd0a      	ble.n	80076e0 <__any_on+0x26>
 80076ca:	f011 011f 	ands.w	r1, r1, #31
 80076ce:	d007      	beq.n	80076e0 <__any_on+0x26>
 80076d0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80076d4:	fa24 f001 	lsr.w	r0, r4, r1
 80076d8:	fa00 f101 	lsl.w	r1, r0, r1
 80076dc:	428c      	cmp	r4, r1
 80076de:	d10b      	bne.n	80076f8 <__any_on+0x3e>
 80076e0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80076e4:	4293      	cmp	r3, r2
 80076e6:	d803      	bhi.n	80076f0 <__any_on+0x36>
 80076e8:	2000      	movs	r0, #0
 80076ea:	bd10      	pop	{r4, pc}
 80076ec:	4603      	mov	r3, r0
 80076ee:	e7f7      	b.n	80076e0 <__any_on+0x26>
 80076f0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80076f4:	2900      	cmp	r1, #0
 80076f6:	d0f5      	beq.n	80076e4 <__any_on+0x2a>
 80076f8:	2001      	movs	r0, #1
 80076fa:	e7f6      	b.n	80076ea <__any_on+0x30>

080076fc <_calloc_r>:
 80076fc:	b570      	push	{r4, r5, r6, lr}
 80076fe:	fba1 5402 	umull	r5, r4, r1, r2
 8007702:	b934      	cbnz	r4, 8007712 <_calloc_r+0x16>
 8007704:	4629      	mov	r1, r5
 8007706:	f000 f875 	bl	80077f4 <_malloc_r>
 800770a:	4606      	mov	r6, r0
 800770c:	b928      	cbnz	r0, 800771a <_calloc_r+0x1e>
 800770e:	4630      	mov	r0, r6
 8007710:	bd70      	pop	{r4, r5, r6, pc}
 8007712:	220c      	movs	r2, #12
 8007714:	2600      	movs	r6, #0
 8007716:	6002      	str	r2, [r0, #0]
 8007718:	e7f9      	b.n	800770e <_calloc_r+0x12>
 800771a:	462a      	mov	r2, r5
 800771c:	4621      	mov	r1, r4
 800771e:	f7fe f8fb 	bl	8005918 <memset>
 8007722:	e7f4      	b.n	800770e <_calloc_r+0x12>

08007724 <_free_r>:
 8007724:	b538      	push	{r3, r4, r5, lr}
 8007726:	4605      	mov	r5, r0
 8007728:	2900      	cmp	r1, #0
 800772a:	d040      	beq.n	80077ae <_free_r+0x8a>
 800772c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007730:	1f0c      	subs	r4, r1, #4
 8007732:	2b00      	cmp	r3, #0
 8007734:	bfb8      	it	lt
 8007736:	18e4      	addlt	r4, r4, r3
 8007738:	f000 fee8 	bl	800850c <__malloc_lock>
 800773c:	4a1c      	ldr	r2, [pc, #112]	; (80077b0 <_free_r+0x8c>)
 800773e:	6813      	ldr	r3, [r2, #0]
 8007740:	b933      	cbnz	r3, 8007750 <_free_r+0x2c>
 8007742:	6063      	str	r3, [r4, #4]
 8007744:	6014      	str	r4, [r2, #0]
 8007746:	4628      	mov	r0, r5
 8007748:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800774c:	f000 bee4 	b.w	8008518 <__malloc_unlock>
 8007750:	42a3      	cmp	r3, r4
 8007752:	d908      	bls.n	8007766 <_free_r+0x42>
 8007754:	6820      	ldr	r0, [r4, #0]
 8007756:	1821      	adds	r1, r4, r0
 8007758:	428b      	cmp	r3, r1
 800775a:	bf01      	itttt	eq
 800775c:	6819      	ldreq	r1, [r3, #0]
 800775e:	685b      	ldreq	r3, [r3, #4]
 8007760:	1809      	addeq	r1, r1, r0
 8007762:	6021      	streq	r1, [r4, #0]
 8007764:	e7ed      	b.n	8007742 <_free_r+0x1e>
 8007766:	461a      	mov	r2, r3
 8007768:	685b      	ldr	r3, [r3, #4]
 800776a:	b10b      	cbz	r3, 8007770 <_free_r+0x4c>
 800776c:	42a3      	cmp	r3, r4
 800776e:	d9fa      	bls.n	8007766 <_free_r+0x42>
 8007770:	6811      	ldr	r1, [r2, #0]
 8007772:	1850      	adds	r0, r2, r1
 8007774:	42a0      	cmp	r0, r4
 8007776:	d10b      	bne.n	8007790 <_free_r+0x6c>
 8007778:	6820      	ldr	r0, [r4, #0]
 800777a:	4401      	add	r1, r0
 800777c:	1850      	adds	r0, r2, r1
 800777e:	4283      	cmp	r3, r0
 8007780:	6011      	str	r1, [r2, #0]
 8007782:	d1e0      	bne.n	8007746 <_free_r+0x22>
 8007784:	6818      	ldr	r0, [r3, #0]
 8007786:	685b      	ldr	r3, [r3, #4]
 8007788:	4401      	add	r1, r0
 800778a:	6011      	str	r1, [r2, #0]
 800778c:	6053      	str	r3, [r2, #4]
 800778e:	e7da      	b.n	8007746 <_free_r+0x22>
 8007790:	d902      	bls.n	8007798 <_free_r+0x74>
 8007792:	230c      	movs	r3, #12
 8007794:	602b      	str	r3, [r5, #0]
 8007796:	e7d6      	b.n	8007746 <_free_r+0x22>
 8007798:	6820      	ldr	r0, [r4, #0]
 800779a:	1821      	adds	r1, r4, r0
 800779c:	428b      	cmp	r3, r1
 800779e:	bf01      	itttt	eq
 80077a0:	6819      	ldreq	r1, [r3, #0]
 80077a2:	685b      	ldreq	r3, [r3, #4]
 80077a4:	1809      	addeq	r1, r1, r0
 80077a6:	6021      	streq	r1, [r4, #0]
 80077a8:	6063      	str	r3, [r4, #4]
 80077aa:	6054      	str	r4, [r2, #4]
 80077ac:	e7cb      	b.n	8007746 <_free_r+0x22>
 80077ae:	bd38      	pop	{r3, r4, r5, pc}
 80077b0:	2000092c 	.word	0x2000092c

080077b4 <sbrk_aligned>:
 80077b4:	b570      	push	{r4, r5, r6, lr}
 80077b6:	4e0e      	ldr	r6, [pc, #56]	; (80077f0 <sbrk_aligned+0x3c>)
 80077b8:	460c      	mov	r4, r1
 80077ba:	6831      	ldr	r1, [r6, #0]
 80077bc:	4605      	mov	r5, r0
 80077be:	b911      	cbnz	r1, 80077c6 <sbrk_aligned+0x12>
 80077c0:	f000 fb80 	bl	8007ec4 <_sbrk_r>
 80077c4:	6030      	str	r0, [r6, #0]
 80077c6:	4621      	mov	r1, r4
 80077c8:	4628      	mov	r0, r5
 80077ca:	f000 fb7b 	bl	8007ec4 <_sbrk_r>
 80077ce:	1c43      	adds	r3, r0, #1
 80077d0:	d00a      	beq.n	80077e8 <sbrk_aligned+0x34>
 80077d2:	1cc4      	adds	r4, r0, #3
 80077d4:	f024 0403 	bic.w	r4, r4, #3
 80077d8:	42a0      	cmp	r0, r4
 80077da:	d007      	beq.n	80077ec <sbrk_aligned+0x38>
 80077dc:	1a21      	subs	r1, r4, r0
 80077de:	4628      	mov	r0, r5
 80077e0:	f000 fb70 	bl	8007ec4 <_sbrk_r>
 80077e4:	3001      	adds	r0, #1
 80077e6:	d101      	bne.n	80077ec <sbrk_aligned+0x38>
 80077e8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80077ec:	4620      	mov	r0, r4
 80077ee:	bd70      	pop	{r4, r5, r6, pc}
 80077f0:	20000930 	.word	0x20000930

080077f4 <_malloc_r>:
 80077f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80077f8:	1ccd      	adds	r5, r1, #3
 80077fa:	f025 0503 	bic.w	r5, r5, #3
 80077fe:	3508      	adds	r5, #8
 8007800:	2d0c      	cmp	r5, #12
 8007802:	bf38      	it	cc
 8007804:	250c      	movcc	r5, #12
 8007806:	2d00      	cmp	r5, #0
 8007808:	4607      	mov	r7, r0
 800780a:	db01      	blt.n	8007810 <_malloc_r+0x1c>
 800780c:	42a9      	cmp	r1, r5
 800780e:	d905      	bls.n	800781c <_malloc_r+0x28>
 8007810:	230c      	movs	r3, #12
 8007812:	2600      	movs	r6, #0
 8007814:	603b      	str	r3, [r7, #0]
 8007816:	4630      	mov	r0, r6
 8007818:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800781c:	4e2e      	ldr	r6, [pc, #184]	; (80078d8 <_malloc_r+0xe4>)
 800781e:	f000 fe75 	bl	800850c <__malloc_lock>
 8007822:	6833      	ldr	r3, [r6, #0]
 8007824:	461c      	mov	r4, r3
 8007826:	bb34      	cbnz	r4, 8007876 <_malloc_r+0x82>
 8007828:	4629      	mov	r1, r5
 800782a:	4638      	mov	r0, r7
 800782c:	f7ff ffc2 	bl	80077b4 <sbrk_aligned>
 8007830:	1c43      	adds	r3, r0, #1
 8007832:	4604      	mov	r4, r0
 8007834:	d14d      	bne.n	80078d2 <_malloc_r+0xde>
 8007836:	6834      	ldr	r4, [r6, #0]
 8007838:	4626      	mov	r6, r4
 800783a:	2e00      	cmp	r6, #0
 800783c:	d140      	bne.n	80078c0 <_malloc_r+0xcc>
 800783e:	6823      	ldr	r3, [r4, #0]
 8007840:	4631      	mov	r1, r6
 8007842:	4638      	mov	r0, r7
 8007844:	eb04 0803 	add.w	r8, r4, r3
 8007848:	f000 fb3c 	bl	8007ec4 <_sbrk_r>
 800784c:	4580      	cmp	r8, r0
 800784e:	d13a      	bne.n	80078c6 <_malloc_r+0xd2>
 8007850:	6821      	ldr	r1, [r4, #0]
 8007852:	3503      	adds	r5, #3
 8007854:	1a6d      	subs	r5, r5, r1
 8007856:	f025 0503 	bic.w	r5, r5, #3
 800785a:	3508      	adds	r5, #8
 800785c:	2d0c      	cmp	r5, #12
 800785e:	bf38      	it	cc
 8007860:	250c      	movcc	r5, #12
 8007862:	4638      	mov	r0, r7
 8007864:	4629      	mov	r1, r5
 8007866:	f7ff ffa5 	bl	80077b4 <sbrk_aligned>
 800786a:	3001      	adds	r0, #1
 800786c:	d02b      	beq.n	80078c6 <_malloc_r+0xd2>
 800786e:	6823      	ldr	r3, [r4, #0]
 8007870:	442b      	add	r3, r5
 8007872:	6023      	str	r3, [r4, #0]
 8007874:	e00e      	b.n	8007894 <_malloc_r+0xa0>
 8007876:	6822      	ldr	r2, [r4, #0]
 8007878:	1b52      	subs	r2, r2, r5
 800787a:	d41e      	bmi.n	80078ba <_malloc_r+0xc6>
 800787c:	2a0b      	cmp	r2, #11
 800787e:	d916      	bls.n	80078ae <_malloc_r+0xba>
 8007880:	1961      	adds	r1, r4, r5
 8007882:	42a3      	cmp	r3, r4
 8007884:	6025      	str	r5, [r4, #0]
 8007886:	bf18      	it	ne
 8007888:	6059      	strne	r1, [r3, #4]
 800788a:	6863      	ldr	r3, [r4, #4]
 800788c:	bf08      	it	eq
 800788e:	6031      	streq	r1, [r6, #0]
 8007890:	5162      	str	r2, [r4, r5]
 8007892:	604b      	str	r3, [r1, #4]
 8007894:	4638      	mov	r0, r7
 8007896:	f104 060b 	add.w	r6, r4, #11
 800789a:	f000 fe3d 	bl	8008518 <__malloc_unlock>
 800789e:	f026 0607 	bic.w	r6, r6, #7
 80078a2:	1d23      	adds	r3, r4, #4
 80078a4:	1af2      	subs	r2, r6, r3
 80078a6:	d0b6      	beq.n	8007816 <_malloc_r+0x22>
 80078a8:	1b9b      	subs	r3, r3, r6
 80078aa:	50a3      	str	r3, [r4, r2]
 80078ac:	e7b3      	b.n	8007816 <_malloc_r+0x22>
 80078ae:	6862      	ldr	r2, [r4, #4]
 80078b0:	42a3      	cmp	r3, r4
 80078b2:	bf0c      	ite	eq
 80078b4:	6032      	streq	r2, [r6, #0]
 80078b6:	605a      	strne	r2, [r3, #4]
 80078b8:	e7ec      	b.n	8007894 <_malloc_r+0xa0>
 80078ba:	4623      	mov	r3, r4
 80078bc:	6864      	ldr	r4, [r4, #4]
 80078be:	e7b2      	b.n	8007826 <_malloc_r+0x32>
 80078c0:	4634      	mov	r4, r6
 80078c2:	6876      	ldr	r6, [r6, #4]
 80078c4:	e7b9      	b.n	800783a <_malloc_r+0x46>
 80078c6:	230c      	movs	r3, #12
 80078c8:	4638      	mov	r0, r7
 80078ca:	603b      	str	r3, [r7, #0]
 80078cc:	f000 fe24 	bl	8008518 <__malloc_unlock>
 80078d0:	e7a1      	b.n	8007816 <_malloc_r+0x22>
 80078d2:	6025      	str	r5, [r4, #0]
 80078d4:	e7de      	b.n	8007894 <_malloc_r+0xa0>
 80078d6:	bf00      	nop
 80078d8:	2000092c 	.word	0x2000092c

080078dc <__sfputc_r>:
 80078dc:	6893      	ldr	r3, [r2, #8]
 80078de:	b410      	push	{r4}
 80078e0:	3b01      	subs	r3, #1
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	6093      	str	r3, [r2, #8]
 80078e6:	da07      	bge.n	80078f8 <__sfputc_r+0x1c>
 80078e8:	6994      	ldr	r4, [r2, #24]
 80078ea:	42a3      	cmp	r3, r4
 80078ec:	db01      	blt.n	80078f2 <__sfputc_r+0x16>
 80078ee:	290a      	cmp	r1, #10
 80078f0:	d102      	bne.n	80078f8 <__sfputc_r+0x1c>
 80078f2:	bc10      	pop	{r4}
 80078f4:	f000 bb0a 	b.w	8007f0c <__swbuf_r>
 80078f8:	6813      	ldr	r3, [r2, #0]
 80078fa:	1c58      	adds	r0, r3, #1
 80078fc:	6010      	str	r0, [r2, #0]
 80078fe:	7019      	strb	r1, [r3, #0]
 8007900:	4608      	mov	r0, r1
 8007902:	bc10      	pop	{r4}
 8007904:	4770      	bx	lr

08007906 <__sfputs_r>:
 8007906:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007908:	4606      	mov	r6, r0
 800790a:	460f      	mov	r7, r1
 800790c:	4614      	mov	r4, r2
 800790e:	18d5      	adds	r5, r2, r3
 8007910:	42ac      	cmp	r4, r5
 8007912:	d101      	bne.n	8007918 <__sfputs_r+0x12>
 8007914:	2000      	movs	r0, #0
 8007916:	e007      	b.n	8007928 <__sfputs_r+0x22>
 8007918:	463a      	mov	r2, r7
 800791a:	4630      	mov	r0, r6
 800791c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007920:	f7ff ffdc 	bl	80078dc <__sfputc_r>
 8007924:	1c43      	adds	r3, r0, #1
 8007926:	d1f3      	bne.n	8007910 <__sfputs_r+0xa>
 8007928:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800792c <_vfiprintf_r>:
 800792c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007930:	460d      	mov	r5, r1
 8007932:	4614      	mov	r4, r2
 8007934:	4698      	mov	r8, r3
 8007936:	4606      	mov	r6, r0
 8007938:	b09d      	sub	sp, #116	; 0x74
 800793a:	b118      	cbz	r0, 8007944 <_vfiprintf_r+0x18>
 800793c:	6983      	ldr	r3, [r0, #24]
 800793e:	b90b      	cbnz	r3, 8007944 <_vfiprintf_r+0x18>
 8007940:	f000 fcd0 	bl	80082e4 <__sinit>
 8007944:	4b89      	ldr	r3, [pc, #548]	; (8007b6c <_vfiprintf_r+0x240>)
 8007946:	429d      	cmp	r5, r3
 8007948:	d11b      	bne.n	8007982 <_vfiprintf_r+0x56>
 800794a:	6875      	ldr	r5, [r6, #4]
 800794c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800794e:	07d9      	lsls	r1, r3, #31
 8007950:	d405      	bmi.n	800795e <_vfiprintf_r+0x32>
 8007952:	89ab      	ldrh	r3, [r5, #12]
 8007954:	059a      	lsls	r2, r3, #22
 8007956:	d402      	bmi.n	800795e <_vfiprintf_r+0x32>
 8007958:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800795a:	f000 fd61 	bl	8008420 <__retarget_lock_acquire_recursive>
 800795e:	89ab      	ldrh	r3, [r5, #12]
 8007960:	071b      	lsls	r3, r3, #28
 8007962:	d501      	bpl.n	8007968 <_vfiprintf_r+0x3c>
 8007964:	692b      	ldr	r3, [r5, #16]
 8007966:	b9eb      	cbnz	r3, 80079a4 <_vfiprintf_r+0x78>
 8007968:	4629      	mov	r1, r5
 800796a:	4630      	mov	r0, r6
 800796c:	f000 fb2e 	bl	8007fcc <__swsetup_r>
 8007970:	b1c0      	cbz	r0, 80079a4 <_vfiprintf_r+0x78>
 8007972:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007974:	07dc      	lsls	r4, r3, #31
 8007976:	d50e      	bpl.n	8007996 <_vfiprintf_r+0x6a>
 8007978:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800797c:	b01d      	add	sp, #116	; 0x74
 800797e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007982:	4b7b      	ldr	r3, [pc, #492]	; (8007b70 <_vfiprintf_r+0x244>)
 8007984:	429d      	cmp	r5, r3
 8007986:	d101      	bne.n	800798c <_vfiprintf_r+0x60>
 8007988:	68b5      	ldr	r5, [r6, #8]
 800798a:	e7df      	b.n	800794c <_vfiprintf_r+0x20>
 800798c:	4b79      	ldr	r3, [pc, #484]	; (8007b74 <_vfiprintf_r+0x248>)
 800798e:	429d      	cmp	r5, r3
 8007990:	bf08      	it	eq
 8007992:	68f5      	ldreq	r5, [r6, #12]
 8007994:	e7da      	b.n	800794c <_vfiprintf_r+0x20>
 8007996:	89ab      	ldrh	r3, [r5, #12]
 8007998:	0598      	lsls	r0, r3, #22
 800799a:	d4ed      	bmi.n	8007978 <_vfiprintf_r+0x4c>
 800799c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800799e:	f000 fd40 	bl	8008422 <__retarget_lock_release_recursive>
 80079a2:	e7e9      	b.n	8007978 <_vfiprintf_r+0x4c>
 80079a4:	2300      	movs	r3, #0
 80079a6:	9309      	str	r3, [sp, #36]	; 0x24
 80079a8:	2320      	movs	r3, #32
 80079aa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80079ae:	2330      	movs	r3, #48	; 0x30
 80079b0:	f04f 0901 	mov.w	r9, #1
 80079b4:	f8cd 800c 	str.w	r8, [sp, #12]
 80079b8:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8007b78 <_vfiprintf_r+0x24c>
 80079bc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80079c0:	4623      	mov	r3, r4
 80079c2:	469a      	mov	sl, r3
 80079c4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80079c8:	b10a      	cbz	r2, 80079ce <_vfiprintf_r+0xa2>
 80079ca:	2a25      	cmp	r2, #37	; 0x25
 80079cc:	d1f9      	bne.n	80079c2 <_vfiprintf_r+0x96>
 80079ce:	ebba 0b04 	subs.w	fp, sl, r4
 80079d2:	d00b      	beq.n	80079ec <_vfiprintf_r+0xc0>
 80079d4:	465b      	mov	r3, fp
 80079d6:	4622      	mov	r2, r4
 80079d8:	4629      	mov	r1, r5
 80079da:	4630      	mov	r0, r6
 80079dc:	f7ff ff93 	bl	8007906 <__sfputs_r>
 80079e0:	3001      	adds	r0, #1
 80079e2:	f000 80aa 	beq.w	8007b3a <_vfiprintf_r+0x20e>
 80079e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80079e8:	445a      	add	r2, fp
 80079ea:	9209      	str	r2, [sp, #36]	; 0x24
 80079ec:	f89a 3000 	ldrb.w	r3, [sl]
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	f000 80a2 	beq.w	8007b3a <_vfiprintf_r+0x20e>
 80079f6:	2300      	movs	r3, #0
 80079f8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80079fc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007a00:	f10a 0a01 	add.w	sl, sl, #1
 8007a04:	9304      	str	r3, [sp, #16]
 8007a06:	9307      	str	r3, [sp, #28]
 8007a08:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007a0c:	931a      	str	r3, [sp, #104]	; 0x68
 8007a0e:	4654      	mov	r4, sl
 8007a10:	2205      	movs	r2, #5
 8007a12:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007a16:	4858      	ldr	r0, [pc, #352]	; (8007b78 <_vfiprintf_r+0x24c>)
 8007a18:	f000 fd6a 	bl	80084f0 <memchr>
 8007a1c:	9a04      	ldr	r2, [sp, #16]
 8007a1e:	b9d8      	cbnz	r0, 8007a58 <_vfiprintf_r+0x12c>
 8007a20:	06d1      	lsls	r1, r2, #27
 8007a22:	bf44      	itt	mi
 8007a24:	2320      	movmi	r3, #32
 8007a26:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007a2a:	0713      	lsls	r3, r2, #28
 8007a2c:	bf44      	itt	mi
 8007a2e:	232b      	movmi	r3, #43	; 0x2b
 8007a30:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007a34:	f89a 3000 	ldrb.w	r3, [sl]
 8007a38:	2b2a      	cmp	r3, #42	; 0x2a
 8007a3a:	d015      	beq.n	8007a68 <_vfiprintf_r+0x13c>
 8007a3c:	4654      	mov	r4, sl
 8007a3e:	2000      	movs	r0, #0
 8007a40:	f04f 0c0a 	mov.w	ip, #10
 8007a44:	9a07      	ldr	r2, [sp, #28]
 8007a46:	4621      	mov	r1, r4
 8007a48:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007a4c:	3b30      	subs	r3, #48	; 0x30
 8007a4e:	2b09      	cmp	r3, #9
 8007a50:	d94e      	bls.n	8007af0 <_vfiprintf_r+0x1c4>
 8007a52:	b1b0      	cbz	r0, 8007a82 <_vfiprintf_r+0x156>
 8007a54:	9207      	str	r2, [sp, #28]
 8007a56:	e014      	b.n	8007a82 <_vfiprintf_r+0x156>
 8007a58:	eba0 0308 	sub.w	r3, r0, r8
 8007a5c:	fa09 f303 	lsl.w	r3, r9, r3
 8007a60:	4313      	orrs	r3, r2
 8007a62:	46a2      	mov	sl, r4
 8007a64:	9304      	str	r3, [sp, #16]
 8007a66:	e7d2      	b.n	8007a0e <_vfiprintf_r+0xe2>
 8007a68:	9b03      	ldr	r3, [sp, #12]
 8007a6a:	1d19      	adds	r1, r3, #4
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	9103      	str	r1, [sp, #12]
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	bfbb      	ittet	lt
 8007a74:	425b      	neglt	r3, r3
 8007a76:	f042 0202 	orrlt.w	r2, r2, #2
 8007a7a:	9307      	strge	r3, [sp, #28]
 8007a7c:	9307      	strlt	r3, [sp, #28]
 8007a7e:	bfb8      	it	lt
 8007a80:	9204      	strlt	r2, [sp, #16]
 8007a82:	7823      	ldrb	r3, [r4, #0]
 8007a84:	2b2e      	cmp	r3, #46	; 0x2e
 8007a86:	d10c      	bne.n	8007aa2 <_vfiprintf_r+0x176>
 8007a88:	7863      	ldrb	r3, [r4, #1]
 8007a8a:	2b2a      	cmp	r3, #42	; 0x2a
 8007a8c:	d135      	bne.n	8007afa <_vfiprintf_r+0x1ce>
 8007a8e:	9b03      	ldr	r3, [sp, #12]
 8007a90:	3402      	adds	r4, #2
 8007a92:	1d1a      	adds	r2, r3, #4
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	9203      	str	r2, [sp, #12]
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	bfb8      	it	lt
 8007a9c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8007aa0:	9305      	str	r3, [sp, #20]
 8007aa2:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8007b7c <_vfiprintf_r+0x250>
 8007aa6:	2203      	movs	r2, #3
 8007aa8:	4650      	mov	r0, sl
 8007aaa:	7821      	ldrb	r1, [r4, #0]
 8007aac:	f000 fd20 	bl	80084f0 <memchr>
 8007ab0:	b140      	cbz	r0, 8007ac4 <_vfiprintf_r+0x198>
 8007ab2:	2340      	movs	r3, #64	; 0x40
 8007ab4:	eba0 000a 	sub.w	r0, r0, sl
 8007ab8:	fa03 f000 	lsl.w	r0, r3, r0
 8007abc:	9b04      	ldr	r3, [sp, #16]
 8007abe:	3401      	adds	r4, #1
 8007ac0:	4303      	orrs	r3, r0
 8007ac2:	9304      	str	r3, [sp, #16]
 8007ac4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ac8:	2206      	movs	r2, #6
 8007aca:	482d      	ldr	r0, [pc, #180]	; (8007b80 <_vfiprintf_r+0x254>)
 8007acc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007ad0:	f000 fd0e 	bl	80084f0 <memchr>
 8007ad4:	2800      	cmp	r0, #0
 8007ad6:	d03f      	beq.n	8007b58 <_vfiprintf_r+0x22c>
 8007ad8:	4b2a      	ldr	r3, [pc, #168]	; (8007b84 <_vfiprintf_r+0x258>)
 8007ada:	bb1b      	cbnz	r3, 8007b24 <_vfiprintf_r+0x1f8>
 8007adc:	9b03      	ldr	r3, [sp, #12]
 8007ade:	3307      	adds	r3, #7
 8007ae0:	f023 0307 	bic.w	r3, r3, #7
 8007ae4:	3308      	adds	r3, #8
 8007ae6:	9303      	str	r3, [sp, #12]
 8007ae8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007aea:	443b      	add	r3, r7
 8007aec:	9309      	str	r3, [sp, #36]	; 0x24
 8007aee:	e767      	b.n	80079c0 <_vfiprintf_r+0x94>
 8007af0:	460c      	mov	r4, r1
 8007af2:	2001      	movs	r0, #1
 8007af4:	fb0c 3202 	mla	r2, ip, r2, r3
 8007af8:	e7a5      	b.n	8007a46 <_vfiprintf_r+0x11a>
 8007afa:	2300      	movs	r3, #0
 8007afc:	f04f 0c0a 	mov.w	ip, #10
 8007b00:	4619      	mov	r1, r3
 8007b02:	3401      	adds	r4, #1
 8007b04:	9305      	str	r3, [sp, #20]
 8007b06:	4620      	mov	r0, r4
 8007b08:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007b0c:	3a30      	subs	r2, #48	; 0x30
 8007b0e:	2a09      	cmp	r2, #9
 8007b10:	d903      	bls.n	8007b1a <_vfiprintf_r+0x1ee>
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d0c5      	beq.n	8007aa2 <_vfiprintf_r+0x176>
 8007b16:	9105      	str	r1, [sp, #20]
 8007b18:	e7c3      	b.n	8007aa2 <_vfiprintf_r+0x176>
 8007b1a:	4604      	mov	r4, r0
 8007b1c:	2301      	movs	r3, #1
 8007b1e:	fb0c 2101 	mla	r1, ip, r1, r2
 8007b22:	e7f0      	b.n	8007b06 <_vfiprintf_r+0x1da>
 8007b24:	ab03      	add	r3, sp, #12
 8007b26:	9300      	str	r3, [sp, #0]
 8007b28:	462a      	mov	r2, r5
 8007b2a:	4630      	mov	r0, r6
 8007b2c:	4b16      	ldr	r3, [pc, #88]	; (8007b88 <_vfiprintf_r+0x25c>)
 8007b2e:	a904      	add	r1, sp, #16
 8007b30:	f3af 8000 	nop.w
 8007b34:	4607      	mov	r7, r0
 8007b36:	1c78      	adds	r0, r7, #1
 8007b38:	d1d6      	bne.n	8007ae8 <_vfiprintf_r+0x1bc>
 8007b3a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007b3c:	07d9      	lsls	r1, r3, #31
 8007b3e:	d405      	bmi.n	8007b4c <_vfiprintf_r+0x220>
 8007b40:	89ab      	ldrh	r3, [r5, #12]
 8007b42:	059a      	lsls	r2, r3, #22
 8007b44:	d402      	bmi.n	8007b4c <_vfiprintf_r+0x220>
 8007b46:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007b48:	f000 fc6b 	bl	8008422 <__retarget_lock_release_recursive>
 8007b4c:	89ab      	ldrh	r3, [r5, #12]
 8007b4e:	065b      	lsls	r3, r3, #25
 8007b50:	f53f af12 	bmi.w	8007978 <_vfiprintf_r+0x4c>
 8007b54:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007b56:	e711      	b.n	800797c <_vfiprintf_r+0x50>
 8007b58:	ab03      	add	r3, sp, #12
 8007b5a:	9300      	str	r3, [sp, #0]
 8007b5c:	462a      	mov	r2, r5
 8007b5e:	4630      	mov	r0, r6
 8007b60:	4b09      	ldr	r3, [pc, #36]	; (8007b88 <_vfiprintf_r+0x25c>)
 8007b62:	a904      	add	r1, sp, #16
 8007b64:	f000 f882 	bl	8007c6c <_printf_i>
 8007b68:	e7e4      	b.n	8007b34 <_vfiprintf_r+0x208>
 8007b6a:	bf00      	nop
 8007b6c:	08008bc8 	.word	0x08008bc8
 8007b70:	08008be8 	.word	0x08008be8
 8007b74:	08008ba8 	.word	0x08008ba8
 8007b78:	08008a74 	.word	0x08008a74
 8007b7c:	08008a7a 	.word	0x08008a7a
 8007b80:	08008a7e 	.word	0x08008a7e
 8007b84:	00000000 	.word	0x00000000
 8007b88:	08007907 	.word	0x08007907

08007b8c <_printf_common>:
 8007b8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007b90:	4616      	mov	r6, r2
 8007b92:	4699      	mov	r9, r3
 8007b94:	688a      	ldr	r2, [r1, #8]
 8007b96:	690b      	ldr	r3, [r1, #16]
 8007b98:	4607      	mov	r7, r0
 8007b9a:	4293      	cmp	r3, r2
 8007b9c:	bfb8      	it	lt
 8007b9e:	4613      	movlt	r3, r2
 8007ba0:	6033      	str	r3, [r6, #0]
 8007ba2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007ba6:	460c      	mov	r4, r1
 8007ba8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007bac:	b10a      	cbz	r2, 8007bb2 <_printf_common+0x26>
 8007bae:	3301      	adds	r3, #1
 8007bb0:	6033      	str	r3, [r6, #0]
 8007bb2:	6823      	ldr	r3, [r4, #0]
 8007bb4:	0699      	lsls	r1, r3, #26
 8007bb6:	bf42      	ittt	mi
 8007bb8:	6833      	ldrmi	r3, [r6, #0]
 8007bba:	3302      	addmi	r3, #2
 8007bbc:	6033      	strmi	r3, [r6, #0]
 8007bbe:	6825      	ldr	r5, [r4, #0]
 8007bc0:	f015 0506 	ands.w	r5, r5, #6
 8007bc4:	d106      	bne.n	8007bd4 <_printf_common+0x48>
 8007bc6:	f104 0a19 	add.w	sl, r4, #25
 8007bca:	68e3      	ldr	r3, [r4, #12]
 8007bcc:	6832      	ldr	r2, [r6, #0]
 8007bce:	1a9b      	subs	r3, r3, r2
 8007bd0:	42ab      	cmp	r3, r5
 8007bd2:	dc28      	bgt.n	8007c26 <_printf_common+0x9a>
 8007bd4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007bd8:	1e13      	subs	r3, r2, #0
 8007bda:	6822      	ldr	r2, [r4, #0]
 8007bdc:	bf18      	it	ne
 8007bde:	2301      	movne	r3, #1
 8007be0:	0692      	lsls	r2, r2, #26
 8007be2:	d42d      	bmi.n	8007c40 <_printf_common+0xb4>
 8007be4:	4649      	mov	r1, r9
 8007be6:	4638      	mov	r0, r7
 8007be8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007bec:	47c0      	blx	r8
 8007bee:	3001      	adds	r0, #1
 8007bf0:	d020      	beq.n	8007c34 <_printf_common+0xa8>
 8007bf2:	6823      	ldr	r3, [r4, #0]
 8007bf4:	68e5      	ldr	r5, [r4, #12]
 8007bf6:	f003 0306 	and.w	r3, r3, #6
 8007bfa:	2b04      	cmp	r3, #4
 8007bfc:	bf18      	it	ne
 8007bfe:	2500      	movne	r5, #0
 8007c00:	6832      	ldr	r2, [r6, #0]
 8007c02:	f04f 0600 	mov.w	r6, #0
 8007c06:	68a3      	ldr	r3, [r4, #8]
 8007c08:	bf08      	it	eq
 8007c0a:	1aad      	subeq	r5, r5, r2
 8007c0c:	6922      	ldr	r2, [r4, #16]
 8007c0e:	bf08      	it	eq
 8007c10:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007c14:	4293      	cmp	r3, r2
 8007c16:	bfc4      	itt	gt
 8007c18:	1a9b      	subgt	r3, r3, r2
 8007c1a:	18ed      	addgt	r5, r5, r3
 8007c1c:	341a      	adds	r4, #26
 8007c1e:	42b5      	cmp	r5, r6
 8007c20:	d11a      	bne.n	8007c58 <_printf_common+0xcc>
 8007c22:	2000      	movs	r0, #0
 8007c24:	e008      	b.n	8007c38 <_printf_common+0xac>
 8007c26:	2301      	movs	r3, #1
 8007c28:	4652      	mov	r2, sl
 8007c2a:	4649      	mov	r1, r9
 8007c2c:	4638      	mov	r0, r7
 8007c2e:	47c0      	blx	r8
 8007c30:	3001      	adds	r0, #1
 8007c32:	d103      	bne.n	8007c3c <_printf_common+0xb0>
 8007c34:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007c38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c3c:	3501      	adds	r5, #1
 8007c3e:	e7c4      	b.n	8007bca <_printf_common+0x3e>
 8007c40:	2030      	movs	r0, #48	; 0x30
 8007c42:	18e1      	adds	r1, r4, r3
 8007c44:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007c48:	1c5a      	adds	r2, r3, #1
 8007c4a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007c4e:	4422      	add	r2, r4
 8007c50:	3302      	adds	r3, #2
 8007c52:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007c56:	e7c5      	b.n	8007be4 <_printf_common+0x58>
 8007c58:	2301      	movs	r3, #1
 8007c5a:	4622      	mov	r2, r4
 8007c5c:	4649      	mov	r1, r9
 8007c5e:	4638      	mov	r0, r7
 8007c60:	47c0      	blx	r8
 8007c62:	3001      	adds	r0, #1
 8007c64:	d0e6      	beq.n	8007c34 <_printf_common+0xa8>
 8007c66:	3601      	adds	r6, #1
 8007c68:	e7d9      	b.n	8007c1e <_printf_common+0x92>
	...

08007c6c <_printf_i>:
 8007c6c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007c70:	7e0f      	ldrb	r7, [r1, #24]
 8007c72:	4691      	mov	r9, r2
 8007c74:	2f78      	cmp	r7, #120	; 0x78
 8007c76:	4680      	mov	r8, r0
 8007c78:	460c      	mov	r4, r1
 8007c7a:	469a      	mov	sl, r3
 8007c7c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007c7e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007c82:	d807      	bhi.n	8007c94 <_printf_i+0x28>
 8007c84:	2f62      	cmp	r7, #98	; 0x62
 8007c86:	d80a      	bhi.n	8007c9e <_printf_i+0x32>
 8007c88:	2f00      	cmp	r7, #0
 8007c8a:	f000 80d9 	beq.w	8007e40 <_printf_i+0x1d4>
 8007c8e:	2f58      	cmp	r7, #88	; 0x58
 8007c90:	f000 80a4 	beq.w	8007ddc <_printf_i+0x170>
 8007c94:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007c98:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007c9c:	e03a      	b.n	8007d14 <_printf_i+0xa8>
 8007c9e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007ca2:	2b15      	cmp	r3, #21
 8007ca4:	d8f6      	bhi.n	8007c94 <_printf_i+0x28>
 8007ca6:	a101      	add	r1, pc, #4	; (adr r1, 8007cac <_printf_i+0x40>)
 8007ca8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007cac:	08007d05 	.word	0x08007d05
 8007cb0:	08007d19 	.word	0x08007d19
 8007cb4:	08007c95 	.word	0x08007c95
 8007cb8:	08007c95 	.word	0x08007c95
 8007cbc:	08007c95 	.word	0x08007c95
 8007cc0:	08007c95 	.word	0x08007c95
 8007cc4:	08007d19 	.word	0x08007d19
 8007cc8:	08007c95 	.word	0x08007c95
 8007ccc:	08007c95 	.word	0x08007c95
 8007cd0:	08007c95 	.word	0x08007c95
 8007cd4:	08007c95 	.word	0x08007c95
 8007cd8:	08007e27 	.word	0x08007e27
 8007cdc:	08007d49 	.word	0x08007d49
 8007ce0:	08007e09 	.word	0x08007e09
 8007ce4:	08007c95 	.word	0x08007c95
 8007ce8:	08007c95 	.word	0x08007c95
 8007cec:	08007e49 	.word	0x08007e49
 8007cf0:	08007c95 	.word	0x08007c95
 8007cf4:	08007d49 	.word	0x08007d49
 8007cf8:	08007c95 	.word	0x08007c95
 8007cfc:	08007c95 	.word	0x08007c95
 8007d00:	08007e11 	.word	0x08007e11
 8007d04:	682b      	ldr	r3, [r5, #0]
 8007d06:	1d1a      	adds	r2, r3, #4
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	602a      	str	r2, [r5, #0]
 8007d0c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007d10:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007d14:	2301      	movs	r3, #1
 8007d16:	e0a4      	b.n	8007e62 <_printf_i+0x1f6>
 8007d18:	6820      	ldr	r0, [r4, #0]
 8007d1a:	6829      	ldr	r1, [r5, #0]
 8007d1c:	0606      	lsls	r6, r0, #24
 8007d1e:	f101 0304 	add.w	r3, r1, #4
 8007d22:	d50a      	bpl.n	8007d3a <_printf_i+0xce>
 8007d24:	680e      	ldr	r6, [r1, #0]
 8007d26:	602b      	str	r3, [r5, #0]
 8007d28:	2e00      	cmp	r6, #0
 8007d2a:	da03      	bge.n	8007d34 <_printf_i+0xc8>
 8007d2c:	232d      	movs	r3, #45	; 0x2d
 8007d2e:	4276      	negs	r6, r6
 8007d30:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007d34:	230a      	movs	r3, #10
 8007d36:	485e      	ldr	r0, [pc, #376]	; (8007eb0 <_printf_i+0x244>)
 8007d38:	e019      	b.n	8007d6e <_printf_i+0x102>
 8007d3a:	680e      	ldr	r6, [r1, #0]
 8007d3c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007d40:	602b      	str	r3, [r5, #0]
 8007d42:	bf18      	it	ne
 8007d44:	b236      	sxthne	r6, r6
 8007d46:	e7ef      	b.n	8007d28 <_printf_i+0xbc>
 8007d48:	682b      	ldr	r3, [r5, #0]
 8007d4a:	6820      	ldr	r0, [r4, #0]
 8007d4c:	1d19      	adds	r1, r3, #4
 8007d4e:	6029      	str	r1, [r5, #0]
 8007d50:	0601      	lsls	r1, r0, #24
 8007d52:	d501      	bpl.n	8007d58 <_printf_i+0xec>
 8007d54:	681e      	ldr	r6, [r3, #0]
 8007d56:	e002      	b.n	8007d5e <_printf_i+0xf2>
 8007d58:	0646      	lsls	r6, r0, #25
 8007d5a:	d5fb      	bpl.n	8007d54 <_printf_i+0xe8>
 8007d5c:	881e      	ldrh	r6, [r3, #0]
 8007d5e:	2f6f      	cmp	r7, #111	; 0x6f
 8007d60:	bf0c      	ite	eq
 8007d62:	2308      	moveq	r3, #8
 8007d64:	230a      	movne	r3, #10
 8007d66:	4852      	ldr	r0, [pc, #328]	; (8007eb0 <_printf_i+0x244>)
 8007d68:	2100      	movs	r1, #0
 8007d6a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007d6e:	6865      	ldr	r5, [r4, #4]
 8007d70:	2d00      	cmp	r5, #0
 8007d72:	bfa8      	it	ge
 8007d74:	6821      	ldrge	r1, [r4, #0]
 8007d76:	60a5      	str	r5, [r4, #8]
 8007d78:	bfa4      	itt	ge
 8007d7a:	f021 0104 	bicge.w	r1, r1, #4
 8007d7e:	6021      	strge	r1, [r4, #0]
 8007d80:	b90e      	cbnz	r6, 8007d86 <_printf_i+0x11a>
 8007d82:	2d00      	cmp	r5, #0
 8007d84:	d04d      	beq.n	8007e22 <_printf_i+0x1b6>
 8007d86:	4615      	mov	r5, r2
 8007d88:	fbb6 f1f3 	udiv	r1, r6, r3
 8007d8c:	fb03 6711 	mls	r7, r3, r1, r6
 8007d90:	5dc7      	ldrb	r7, [r0, r7]
 8007d92:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007d96:	4637      	mov	r7, r6
 8007d98:	42bb      	cmp	r3, r7
 8007d9a:	460e      	mov	r6, r1
 8007d9c:	d9f4      	bls.n	8007d88 <_printf_i+0x11c>
 8007d9e:	2b08      	cmp	r3, #8
 8007da0:	d10b      	bne.n	8007dba <_printf_i+0x14e>
 8007da2:	6823      	ldr	r3, [r4, #0]
 8007da4:	07de      	lsls	r6, r3, #31
 8007da6:	d508      	bpl.n	8007dba <_printf_i+0x14e>
 8007da8:	6923      	ldr	r3, [r4, #16]
 8007daa:	6861      	ldr	r1, [r4, #4]
 8007dac:	4299      	cmp	r1, r3
 8007dae:	bfde      	ittt	le
 8007db0:	2330      	movle	r3, #48	; 0x30
 8007db2:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007db6:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8007dba:	1b52      	subs	r2, r2, r5
 8007dbc:	6122      	str	r2, [r4, #16]
 8007dbe:	464b      	mov	r3, r9
 8007dc0:	4621      	mov	r1, r4
 8007dc2:	4640      	mov	r0, r8
 8007dc4:	f8cd a000 	str.w	sl, [sp]
 8007dc8:	aa03      	add	r2, sp, #12
 8007dca:	f7ff fedf 	bl	8007b8c <_printf_common>
 8007dce:	3001      	adds	r0, #1
 8007dd0:	d14c      	bne.n	8007e6c <_printf_i+0x200>
 8007dd2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007dd6:	b004      	add	sp, #16
 8007dd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ddc:	4834      	ldr	r0, [pc, #208]	; (8007eb0 <_printf_i+0x244>)
 8007dde:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007de2:	6829      	ldr	r1, [r5, #0]
 8007de4:	6823      	ldr	r3, [r4, #0]
 8007de6:	f851 6b04 	ldr.w	r6, [r1], #4
 8007dea:	6029      	str	r1, [r5, #0]
 8007dec:	061d      	lsls	r5, r3, #24
 8007dee:	d514      	bpl.n	8007e1a <_printf_i+0x1ae>
 8007df0:	07df      	lsls	r7, r3, #31
 8007df2:	bf44      	itt	mi
 8007df4:	f043 0320 	orrmi.w	r3, r3, #32
 8007df8:	6023      	strmi	r3, [r4, #0]
 8007dfa:	b91e      	cbnz	r6, 8007e04 <_printf_i+0x198>
 8007dfc:	6823      	ldr	r3, [r4, #0]
 8007dfe:	f023 0320 	bic.w	r3, r3, #32
 8007e02:	6023      	str	r3, [r4, #0]
 8007e04:	2310      	movs	r3, #16
 8007e06:	e7af      	b.n	8007d68 <_printf_i+0xfc>
 8007e08:	6823      	ldr	r3, [r4, #0]
 8007e0a:	f043 0320 	orr.w	r3, r3, #32
 8007e0e:	6023      	str	r3, [r4, #0]
 8007e10:	2378      	movs	r3, #120	; 0x78
 8007e12:	4828      	ldr	r0, [pc, #160]	; (8007eb4 <_printf_i+0x248>)
 8007e14:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007e18:	e7e3      	b.n	8007de2 <_printf_i+0x176>
 8007e1a:	0659      	lsls	r1, r3, #25
 8007e1c:	bf48      	it	mi
 8007e1e:	b2b6      	uxthmi	r6, r6
 8007e20:	e7e6      	b.n	8007df0 <_printf_i+0x184>
 8007e22:	4615      	mov	r5, r2
 8007e24:	e7bb      	b.n	8007d9e <_printf_i+0x132>
 8007e26:	682b      	ldr	r3, [r5, #0]
 8007e28:	6826      	ldr	r6, [r4, #0]
 8007e2a:	1d18      	adds	r0, r3, #4
 8007e2c:	6961      	ldr	r1, [r4, #20]
 8007e2e:	6028      	str	r0, [r5, #0]
 8007e30:	0635      	lsls	r5, r6, #24
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	d501      	bpl.n	8007e3a <_printf_i+0x1ce>
 8007e36:	6019      	str	r1, [r3, #0]
 8007e38:	e002      	b.n	8007e40 <_printf_i+0x1d4>
 8007e3a:	0670      	lsls	r0, r6, #25
 8007e3c:	d5fb      	bpl.n	8007e36 <_printf_i+0x1ca>
 8007e3e:	8019      	strh	r1, [r3, #0]
 8007e40:	2300      	movs	r3, #0
 8007e42:	4615      	mov	r5, r2
 8007e44:	6123      	str	r3, [r4, #16]
 8007e46:	e7ba      	b.n	8007dbe <_printf_i+0x152>
 8007e48:	682b      	ldr	r3, [r5, #0]
 8007e4a:	2100      	movs	r1, #0
 8007e4c:	1d1a      	adds	r2, r3, #4
 8007e4e:	602a      	str	r2, [r5, #0]
 8007e50:	681d      	ldr	r5, [r3, #0]
 8007e52:	6862      	ldr	r2, [r4, #4]
 8007e54:	4628      	mov	r0, r5
 8007e56:	f000 fb4b 	bl	80084f0 <memchr>
 8007e5a:	b108      	cbz	r0, 8007e60 <_printf_i+0x1f4>
 8007e5c:	1b40      	subs	r0, r0, r5
 8007e5e:	6060      	str	r0, [r4, #4]
 8007e60:	6863      	ldr	r3, [r4, #4]
 8007e62:	6123      	str	r3, [r4, #16]
 8007e64:	2300      	movs	r3, #0
 8007e66:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007e6a:	e7a8      	b.n	8007dbe <_printf_i+0x152>
 8007e6c:	462a      	mov	r2, r5
 8007e6e:	4649      	mov	r1, r9
 8007e70:	4640      	mov	r0, r8
 8007e72:	6923      	ldr	r3, [r4, #16]
 8007e74:	47d0      	blx	sl
 8007e76:	3001      	adds	r0, #1
 8007e78:	d0ab      	beq.n	8007dd2 <_printf_i+0x166>
 8007e7a:	6823      	ldr	r3, [r4, #0]
 8007e7c:	079b      	lsls	r3, r3, #30
 8007e7e:	d413      	bmi.n	8007ea8 <_printf_i+0x23c>
 8007e80:	68e0      	ldr	r0, [r4, #12]
 8007e82:	9b03      	ldr	r3, [sp, #12]
 8007e84:	4298      	cmp	r0, r3
 8007e86:	bfb8      	it	lt
 8007e88:	4618      	movlt	r0, r3
 8007e8a:	e7a4      	b.n	8007dd6 <_printf_i+0x16a>
 8007e8c:	2301      	movs	r3, #1
 8007e8e:	4632      	mov	r2, r6
 8007e90:	4649      	mov	r1, r9
 8007e92:	4640      	mov	r0, r8
 8007e94:	47d0      	blx	sl
 8007e96:	3001      	adds	r0, #1
 8007e98:	d09b      	beq.n	8007dd2 <_printf_i+0x166>
 8007e9a:	3501      	adds	r5, #1
 8007e9c:	68e3      	ldr	r3, [r4, #12]
 8007e9e:	9903      	ldr	r1, [sp, #12]
 8007ea0:	1a5b      	subs	r3, r3, r1
 8007ea2:	42ab      	cmp	r3, r5
 8007ea4:	dcf2      	bgt.n	8007e8c <_printf_i+0x220>
 8007ea6:	e7eb      	b.n	8007e80 <_printf_i+0x214>
 8007ea8:	2500      	movs	r5, #0
 8007eaa:	f104 0619 	add.w	r6, r4, #25
 8007eae:	e7f5      	b.n	8007e9c <_printf_i+0x230>
 8007eb0:	08008a85 	.word	0x08008a85
 8007eb4:	08008a96 	.word	0x08008a96

08007eb8 <nan>:
 8007eb8:	2000      	movs	r0, #0
 8007eba:	4901      	ldr	r1, [pc, #4]	; (8007ec0 <nan+0x8>)
 8007ebc:	4770      	bx	lr
 8007ebe:	bf00      	nop
 8007ec0:	7ff80000 	.word	0x7ff80000

08007ec4 <_sbrk_r>:
 8007ec4:	b538      	push	{r3, r4, r5, lr}
 8007ec6:	2300      	movs	r3, #0
 8007ec8:	4d05      	ldr	r5, [pc, #20]	; (8007ee0 <_sbrk_r+0x1c>)
 8007eca:	4604      	mov	r4, r0
 8007ecc:	4608      	mov	r0, r1
 8007ece:	602b      	str	r3, [r5, #0]
 8007ed0:	f7fa f806 	bl	8001ee0 <_sbrk>
 8007ed4:	1c43      	adds	r3, r0, #1
 8007ed6:	d102      	bne.n	8007ede <_sbrk_r+0x1a>
 8007ed8:	682b      	ldr	r3, [r5, #0]
 8007eda:	b103      	cbz	r3, 8007ede <_sbrk_r+0x1a>
 8007edc:	6023      	str	r3, [r4, #0]
 8007ede:	bd38      	pop	{r3, r4, r5, pc}
 8007ee0:	20000938 	.word	0x20000938

08007ee4 <strncmp>:
 8007ee4:	4603      	mov	r3, r0
 8007ee6:	b510      	push	{r4, lr}
 8007ee8:	b172      	cbz	r2, 8007f08 <strncmp+0x24>
 8007eea:	3901      	subs	r1, #1
 8007eec:	1884      	adds	r4, r0, r2
 8007eee:	f813 0b01 	ldrb.w	r0, [r3], #1
 8007ef2:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8007ef6:	4290      	cmp	r0, r2
 8007ef8:	d101      	bne.n	8007efe <strncmp+0x1a>
 8007efa:	42a3      	cmp	r3, r4
 8007efc:	d101      	bne.n	8007f02 <strncmp+0x1e>
 8007efe:	1a80      	subs	r0, r0, r2
 8007f00:	bd10      	pop	{r4, pc}
 8007f02:	2800      	cmp	r0, #0
 8007f04:	d1f3      	bne.n	8007eee <strncmp+0xa>
 8007f06:	e7fa      	b.n	8007efe <strncmp+0x1a>
 8007f08:	4610      	mov	r0, r2
 8007f0a:	e7f9      	b.n	8007f00 <strncmp+0x1c>

08007f0c <__swbuf_r>:
 8007f0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f0e:	460e      	mov	r6, r1
 8007f10:	4614      	mov	r4, r2
 8007f12:	4605      	mov	r5, r0
 8007f14:	b118      	cbz	r0, 8007f1e <__swbuf_r+0x12>
 8007f16:	6983      	ldr	r3, [r0, #24]
 8007f18:	b90b      	cbnz	r3, 8007f1e <__swbuf_r+0x12>
 8007f1a:	f000 f9e3 	bl	80082e4 <__sinit>
 8007f1e:	4b21      	ldr	r3, [pc, #132]	; (8007fa4 <__swbuf_r+0x98>)
 8007f20:	429c      	cmp	r4, r3
 8007f22:	d12b      	bne.n	8007f7c <__swbuf_r+0x70>
 8007f24:	686c      	ldr	r4, [r5, #4]
 8007f26:	69a3      	ldr	r3, [r4, #24]
 8007f28:	60a3      	str	r3, [r4, #8]
 8007f2a:	89a3      	ldrh	r3, [r4, #12]
 8007f2c:	071a      	lsls	r2, r3, #28
 8007f2e:	d52f      	bpl.n	8007f90 <__swbuf_r+0x84>
 8007f30:	6923      	ldr	r3, [r4, #16]
 8007f32:	b36b      	cbz	r3, 8007f90 <__swbuf_r+0x84>
 8007f34:	6923      	ldr	r3, [r4, #16]
 8007f36:	6820      	ldr	r0, [r4, #0]
 8007f38:	b2f6      	uxtb	r6, r6
 8007f3a:	1ac0      	subs	r0, r0, r3
 8007f3c:	6963      	ldr	r3, [r4, #20]
 8007f3e:	4637      	mov	r7, r6
 8007f40:	4283      	cmp	r3, r0
 8007f42:	dc04      	bgt.n	8007f4e <__swbuf_r+0x42>
 8007f44:	4621      	mov	r1, r4
 8007f46:	4628      	mov	r0, r5
 8007f48:	f000 f938 	bl	80081bc <_fflush_r>
 8007f4c:	bb30      	cbnz	r0, 8007f9c <__swbuf_r+0x90>
 8007f4e:	68a3      	ldr	r3, [r4, #8]
 8007f50:	3001      	adds	r0, #1
 8007f52:	3b01      	subs	r3, #1
 8007f54:	60a3      	str	r3, [r4, #8]
 8007f56:	6823      	ldr	r3, [r4, #0]
 8007f58:	1c5a      	adds	r2, r3, #1
 8007f5a:	6022      	str	r2, [r4, #0]
 8007f5c:	701e      	strb	r6, [r3, #0]
 8007f5e:	6963      	ldr	r3, [r4, #20]
 8007f60:	4283      	cmp	r3, r0
 8007f62:	d004      	beq.n	8007f6e <__swbuf_r+0x62>
 8007f64:	89a3      	ldrh	r3, [r4, #12]
 8007f66:	07db      	lsls	r3, r3, #31
 8007f68:	d506      	bpl.n	8007f78 <__swbuf_r+0x6c>
 8007f6a:	2e0a      	cmp	r6, #10
 8007f6c:	d104      	bne.n	8007f78 <__swbuf_r+0x6c>
 8007f6e:	4621      	mov	r1, r4
 8007f70:	4628      	mov	r0, r5
 8007f72:	f000 f923 	bl	80081bc <_fflush_r>
 8007f76:	b988      	cbnz	r0, 8007f9c <__swbuf_r+0x90>
 8007f78:	4638      	mov	r0, r7
 8007f7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007f7c:	4b0a      	ldr	r3, [pc, #40]	; (8007fa8 <__swbuf_r+0x9c>)
 8007f7e:	429c      	cmp	r4, r3
 8007f80:	d101      	bne.n	8007f86 <__swbuf_r+0x7a>
 8007f82:	68ac      	ldr	r4, [r5, #8]
 8007f84:	e7cf      	b.n	8007f26 <__swbuf_r+0x1a>
 8007f86:	4b09      	ldr	r3, [pc, #36]	; (8007fac <__swbuf_r+0xa0>)
 8007f88:	429c      	cmp	r4, r3
 8007f8a:	bf08      	it	eq
 8007f8c:	68ec      	ldreq	r4, [r5, #12]
 8007f8e:	e7ca      	b.n	8007f26 <__swbuf_r+0x1a>
 8007f90:	4621      	mov	r1, r4
 8007f92:	4628      	mov	r0, r5
 8007f94:	f000 f81a 	bl	8007fcc <__swsetup_r>
 8007f98:	2800      	cmp	r0, #0
 8007f9a:	d0cb      	beq.n	8007f34 <__swbuf_r+0x28>
 8007f9c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8007fa0:	e7ea      	b.n	8007f78 <__swbuf_r+0x6c>
 8007fa2:	bf00      	nop
 8007fa4:	08008bc8 	.word	0x08008bc8
 8007fa8:	08008be8 	.word	0x08008be8
 8007fac:	08008ba8 	.word	0x08008ba8

08007fb0 <__ascii_wctomb>:
 8007fb0:	4603      	mov	r3, r0
 8007fb2:	4608      	mov	r0, r1
 8007fb4:	b141      	cbz	r1, 8007fc8 <__ascii_wctomb+0x18>
 8007fb6:	2aff      	cmp	r2, #255	; 0xff
 8007fb8:	d904      	bls.n	8007fc4 <__ascii_wctomb+0x14>
 8007fba:	228a      	movs	r2, #138	; 0x8a
 8007fbc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007fc0:	601a      	str	r2, [r3, #0]
 8007fc2:	4770      	bx	lr
 8007fc4:	2001      	movs	r0, #1
 8007fc6:	700a      	strb	r2, [r1, #0]
 8007fc8:	4770      	bx	lr
	...

08007fcc <__swsetup_r>:
 8007fcc:	4b32      	ldr	r3, [pc, #200]	; (8008098 <__swsetup_r+0xcc>)
 8007fce:	b570      	push	{r4, r5, r6, lr}
 8007fd0:	681d      	ldr	r5, [r3, #0]
 8007fd2:	4606      	mov	r6, r0
 8007fd4:	460c      	mov	r4, r1
 8007fd6:	b125      	cbz	r5, 8007fe2 <__swsetup_r+0x16>
 8007fd8:	69ab      	ldr	r3, [r5, #24]
 8007fda:	b913      	cbnz	r3, 8007fe2 <__swsetup_r+0x16>
 8007fdc:	4628      	mov	r0, r5
 8007fde:	f000 f981 	bl	80082e4 <__sinit>
 8007fe2:	4b2e      	ldr	r3, [pc, #184]	; (800809c <__swsetup_r+0xd0>)
 8007fe4:	429c      	cmp	r4, r3
 8007fe6:	d10f      	bne.n	8008008 <__swsetup_r+0x3c>
 8007fe8:	686c      	ldr	r4, [r5, #4]
 8007fea:	89a3      	ldrh	r3, [r4, #12]
 8007fec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007ff0:	0719      	lsls	r1, r3, #28
 8007ff2:	d42c      	bmi.n	800804e <__swsetup_r+0x82>
 8007ff4:	06dd      	lsls	r5, r3, #27
 8007ff6:	d411      	bmi.n	800801c <__swsetup_r+0x50>
 8007ff8:	2309      	movs	r3, #9
 8007ffa:	6033      	str	r3, [r6, #0]
 8007ffc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008000:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008004:	81a3      	strh	r3, [r4, #12]
 8008006:	e03e      	b.n	8008086 <__swsetup_r+0xba>
 8008008:	4b25      	ldr	r3, [pc, #148]	; (80080a0 <__swsetup_r+0xd4>)
 800800a:	429c      	cmp	r4, r3
 800800c:	d101      	bne.n	8008012 <__swsetup_r+0x46>
 800800e:	68ac      	ldr	r4, [r5, #8]
 8008010:	e7eb      	b.n	8007fea <__swsetup_r+0x1e>
 8008012:	4b24      	ldr	r3, [pc, #144]	; (80080a4 <__swsetup_r+0xd8>)
 8008014:	429c      	cmp	r4, r3
 8008016:	bf08      	it	eq
 8008018:	68ec      	ldreq	r4, [r5, #12]
 800801a:	e7e6      	b.n	8007fea <__swsetup_r+0x1e>
 800801c:	0758      	lsls	r0, r3, #29
 800801e:	d512      	bpl.n	8008046 <__swsetup_r+0x7a>
 8008020:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008022:	b141      	cbz	r1, 8008036 <__swsetup_r+0x6a>
 8008024:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008028:	4299      	cmp	r1, r3
 800802a:	d002      	beq.n	8008032 <__swsetup_r+0x66>
 800802c:	4630      	mov	r0, r6
 800802e:	f7ff fb79 	bl	8007724 <_free_r>
 8008032:	2300      	movs	r3, #0
 8008034:	6363      	str	r3, [r4, #52]	; 0x34
 8008036:	89a3      	ldrh	r3, [r4, #12]
 8008038:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800803c:	81a3      	strh	r3, [r4, #12]
 800803e:	2300      	movs	r3, #0
 8008040:	6063      	str	r3, [r4, #4]
 8008042:	6923      	ldr	r3, [r4, #16]
 8008044:	6023      	str	r3, [r4, #0]
 8008046:	89a3      	ldrh	r3, [r4, #12]
 8008048:	f043 0308 	orr.w	r3, r3, #8
 800804c:	81a3      	strh	r3, [r4, #12]
 800804e:	6923      	ldr	r3, [r4, #16]
 8008050:	b94b      	cbnz	r3, 8008066 <__swsetup_r+0x9a>
 8008052:	89a3      	ldrh	r3, [r4, #12]
 8008054:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008058:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800805c:	d003      	beq.n	8008066 <__swsetup_r+0x9a>
 800805e:	4621      	mov	r1, r4
 8008060:	4630      	mov	r0, r6
 8008062:	f000 fa05 	bl	8008470 <__smakebuf_r>
 8008066:	89a0      	ldrh	r0, [r4, #12]
 8008068:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800806c:	f010 0301 	ands.w	r3, r0, #1
 8008070:	d00a      	beq.n	8008088 <__swsetup_r+0xbc>
 8008072:	2300      	movs	r3, #0
 8008074:	60a3      	str	r3, [r4, #8]
 8008076:	6963      	ldr	r3, [r4, #20]
 8008078:	425b      	negs	r3, r3
 800807a:	61a3      	str	r3, [r4, #24]
 800807c:	6923      	ldr	r3, [r4, #16]
 800807e:	b943      	cbnz	r3, 8008092 <__swsetup_r+0xc6>
 8008080:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008084:	d1ba      	bne.n	8007ffc <__swsetup_r+0x30>
 8008086:	bd70      	pop	{r4, r5, r6, pc}
 8008088:	0781      	lsls	r1, r0, #30
 800808a:	bf58      	it	pl
 800808c:	6963      	ldrpl	r3, [r4, #20]
 800808e:	60a3      	str	r3, [r4, #8]
 8008090:	e7f4      	b.n	800807c <__swsetup_r+0xb0>
 8008092:	2000      	movs	r0, #0
 8008094:	e7f7      	b.n	8008086 <__swsetup_r+0xba>
 8008096:	bf00      	nop
 8008098:	2000000c 	.word	0x2000000c
 800809c:	08008bc8 	.word	0x08008bc8
 80080a0:	08008be8 	.word	0x08008be8
 80080a4:	08008ba8 	.word	0x08008ba8

080080a8 <abort>:
 80080a8:	2006      	movs	r0, #6
 80080aa:	b508      	push	{r3, lr}
 80080ac:	f000 fa62 	bl	8008574 <raise>
 80080b0:	2001      	movs	r0, #1
 80080b2:	f7f9 fea2 	bl	8001dfa <_exit>
	...

080080b8 <__sflush_r>:
 80080b8:	898a      	ldrh	r2, [r1, #12]
 80080ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080bc:	4605      	mov	r5, r0
 80080be:	0710      	lsls	r0, r2, #28
 80080c0:	460c      	mov	r4, r1
 80080c2:	d457      	bmi.n	8008174 <__sflush_r+0xbc>
 80080c4:	684b      	ldr	r3, [r1, #4]
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	dc04      	bgt.n	80080d4 <__sflush_r+0x1c>
 80080ca:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	dc01      	bgt.n	80080d4 <__sflush_r+0x1c>
 80080d0:	2000      	movs	r0, #0
 80080d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80080d4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80080d6:	2e00      	cmp	r6, #0
 80080d8:	d0fa      	beq.n	80080d0 <__sflush_r+0x18>
 80080da:	2300      	movs	r3, #0
 80080dc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80080e0:	682f      	ldr	r7, [r5, #0]
 80080e2:	602b      	str	r3, [r5, #0]
 80080e4:	d032      	beq.n	800814c <__sflush_r+0x94>
 80080e6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80080e8:	89a3      	ldrh	r3, [r4, #12]
 80080ea:	075a      	lsls	r2, r3, #29
 80080ec:	d505      	bpl.n	80080fa <__sflush_r+0x42>
 80080ee:	6863      	ldr	r3, [r4, #4]
 80080f0:	1ac0      	subs	r0, r0, r3
 80080f2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80080f4:	b10b      	cbz	r3, 80080fa <__sflush_r+0x42>
 80080f6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80080f8:	1ac0      	subs	r0, r0, r3
 80080fa:	2300      	movs	r3, #0
 80080fc:	4602      	mov	r2, r0
 80080fe:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008100:	4628      	mov	r0, r5
 8008102:	6a21      	ldr	r1, [r4, #32]
 8008104:	47b0      	blx	r6
 8008106:	1c43      	adds	r3, r0, #1
 8008108:	89a3      	ldrh	r3, [r4, #12]
 800810a:	d106      	bne.n	800811a <__sflush_r+0x62>
 800810c:	6829      	ldr	r1, [r5, #0]
 800810e:	291d      	cmp	r1, #29
 8008110:	d82c      	bhi.n	800816c <__sflush_r+0xb4>
 8008112:	4a29      	ldr	r2, [pc, #164]	; (80081b8 <__sflush_r+0x100>)
 8008114:	40ca      	lsrs	r2, r1
 8008116:	07d6      	lsls	r6, r2, #31
 8008118:	d528      	bpl.n	800816c <__sflush_r+0xb4>
 800811a:	2200      	movs	r2, #0
 800811c:	6062      	str	r2, [r4, #4]
 800811e:	6922      	ldr	r2, [r4, #16]
 8008120:	04d9      	lsls	r1, r3, #19
 8008122:	6022      	str	r2, [r4, #0]
 8008124:	d504      	bpl.n	8008130 <__sflush_r+0x78>
 8008126:	1c42      	adds	r2, r0, #1
 8008128:	d101      	bne.n	800812e <__sflush_r+0x76>
 800812a:	682b      	ldr	r3, [r5, #0]
 800812c:	b903      	cbnz	r3, 8008130 <__sflush_r+0x78>
 800812e:	6560      	str	r0, [r4, #84]	; 0x54
 8008130:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008132:	602f      	str	r7, [r5, #0]
 8008134:	2900      	cmp	r1, #0
 8008136:	d0cb      	beq.n	80080d0 <__sflush_r+0x18>
 8008138:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800813c:	4299      	cmp	r1, r3
 800813e:	d002      	beq.n	8008146 <__sflush_r+0x8e>
 8008140:	4628      	mov	r0, r5
 8008142:	f7ff faef 	bl	8007724 <_free_r>
 8008146:	2000      	movs	r0, #0
 8008148:	6360      	str	r0, [r4, #52]	; 0x34
 800814a:	e7c2      	b.n	80080d2 <__sflush_r+0x1a>
 800814c:	6a21      	ldr	r1, [r4, #32]
 800814e:	2301      	movs	r3, #1
 8008150:	4628      	mov	r0, r5
 8008152:	47b0      	blx	r6
 8008154:	1c41      	adds	r1, r0, #1
 8008156:	d1c7      	bne.n	80080e8 <__sflush_r+0x30>
 8008158:	682b      	ldr	r3, [r5, #0]
 800815a:	2b00      	cmp	r3, #0
 800815c:	d0c4      	beq.n	80080e8 <__sflush_r+0x30>
 800815e:	2b1d      	cmp	r3, #29
 8008160:	d001      	beq.n	8008166 <__sflush_r+0xae>
 8008162:	2b16      	cmp	r3, #22
 8008164:	d101      	bne.n	800816a <__sflush_r+0xb2>
 8008166:	602f      	str	r7, [r5, #0]
 8008168:	e7b2      	b.n	80080d0 <__sflush_r+0x18>
 800816a:	89a3      	ldrh	r3, [r4, #12]
 800816c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008170:	81a3      	strh	r3, [r4, #12]
 8008172:	e7ae      	b.n	80080d2 <__sflush_r+0x1a>
 8008174:	690f      	ldr	r7, [r1, #16]
 8008176:	2f00      	cmp	r7, #0
 8008178:	d0aa      	beq.n	80080d0 <__sflush_r+0x18>
 800817a:	0793      	lsls	r3, r2, #30
 800817c:	bf18      	it	ne
 800817e:	2300      	movne	r3, #0
 8008180:	680e      	ldr	r6, [r1, #0]
 8008182:	bf08      	it	eq
 8008184:	694b      	ldreq	r3, [r1, #20]
 8008186:	1bf6      	subs	r6, r6, r7
 8008188:	600f      	str	r7, [r1, #0]
 800818a:	608b      	str	r3, [r1, #8]
 800818c:	2e00      	cmp	r6, #0
 800818e:	dd9f      	ble.n	80080d0 <__sflush_r+0x18>
 8008190:	4633      	mov	r3, r6
 8008192:	463a      	mov	r2, r7
 8008194:	4628      	mov	r0, r5
 8008196:	6a21      	ldr	r1, [r4, #32]
 8008198:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800819c:	47e0      	blx	ip
 800819e:	2800      	cmp	r0, #0
 80081a0:	dc06      	bgt.n	80081b0 <__sflush_r+0xf8>
 80081a2:	89a3      	ldrh	r3, [r4, #12]
 80081a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80081a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80081ac:	81a3      	strh	r3, [r4, #12]
 80081ae:	e790      	b.n	80080d2 <__sflush_r+0x1a>
 80081b0:	4407      	add	r7, r0
 80081b2:	1a36      	subs	r6, r6, r0
 80081b4:	e7ea      	b.n	800818c <__sflush_r+0xd4>
 80081b6:	bf00      	nop
 80081b8:	20400001 	.word	0x20400001

080081bc <_fflush_r>:
 80081bc:	b538      	push	{r3, r4, r5, lr}
 80081be:	690b      	ldr	r3, [r1, #16]
 80081c0:	4605      	mov	r5, r0
 80081c2:	460c      	mov	r4, r1
 80081c4:	b913      	cbnz	r3, 80081cc <_fflush_r+0x10>
 80081c6:	2500      	movs	r5, #0
 80081c8:	4628      	mov	r0, r5
 80081ca:	bd38      	pop	{r3, r4, r5, pc}
 80081cc:	b118      	cbz	r0, 80081d6 <_fflush_r+0x1a>
 80081ce:	6983      	ldr	r3, [r0, #24]
 80081d0:	b90b      	cbnz	r3, 80081d6 <_fflush_r+0x1a>
 80081d2:	f000 f887 	bl	80082e4 <__sinit>
 80081d6:	4b14      	ldr	r3, [pc, #80]	; (8008228 <_fflush_r+0x6c>)
 80081d8:	429c      	cmp	r4, r3
 80081da:	d11b      	bne.n	8008214 <_fflush_r+0x58>
 80081dc:	686c      	ldr	r4, [r5, #4]
 80081de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d0ef      	beq.n	80081c6 <_fflush_r+0xa>
 80081e6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80081e8:	07d0      	lsls	r0, r2, #31
 80081ea:	d404      	bmi.n	80081f6 <_fflush_r+0x3a>
 80081ec:	0599      	lsls	r1, r3, #22
 80081ee:	d402      	bmi.n	80081f6 <_fflush_r+0x3a>
 80081f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80081f2:	f000 f915 	bl	8008420 <__retarget_lock_acquire_recursive>
 80081f6:	4628      	mov	r0, r5
 80081f8:	4621      	mov	r1, r4
 80081fa:	f7ff ff5d 	bl	80080b8 <__sflush_r>
 80081fe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008200:	4605      	mov	r5, r0
 8008202:	07da      	lsls	r2, r3, #31
 8008204:	d4e0      	bmi.n	80081c8 <_fflush_r+0xc>
 8008206:	89a3      	ldrh	r3, [r4, #12]
 8008208:	059b      	lsls	r3, r3, #22
 800820a:	d4dd      	bmi.n	80081c8 <_fflush_r+0xc>
 800820c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800820e:	f000 f908 	bl	8008422 <__retarget_lock_release_recursive>
 8008212:	e7d9      	b.n	80081c8 <_fflush_r+0xc>
 8008214:	4b05      	ldr	r3, [pc, #20]	; (800822c <_fflush_r+0x70>)
 8008216:	429c      	cmp	r4, r3
 8008218:	d101      	bne.n	800821e <_fflush_r+0x62>
 800821a:	68ac      	ldr	r4, [r5, #8]
 800821c:	e7df      	b.n	80081de <_fflush_r+0x22>
 800821e:	4b04      	ldr	r3, [pc, #16]	; (8008230 <_fflush_r+0x74>)
 8008220:	429c      	cmp	r4, r3
 8008222:	bf08      	it	eq
 8008224:	68ec      	ldreq	r4, [r5, #12]
 8008226:	e7da      	b.n	80081de <_fflush_r+0x22>
 8008228:	08008bc8 	.word	0x08008bc8
 800822c:	08008be8 	.word	0x08008be8
 8008230:	08008ba8 	.word	0x08008ba8

08008234 <std>:
 8008234:	2300      	movs	r3, #0
 8008236:	b510      	push	{r4, lr}
 8008238:	4604      	mov	r4, r0
 800823a:	e9c0 3300 	strd	r3, r3, [r0]
 800823e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008242:	6083      	str	r3, [r0, #8]
 8008244:	8181      	strh	r1, [r0, #12]
 8008246:	6643      	str	r3, [r0, #100]	; 0x64
 8008248:	81c2      	strh	r2, [r0, #14]
 800824a:	6183      	str	r3, [r0, #24]
 800824c:	4619      	mov	r1, r3
 800824e:	2208      	movs	r2, #8
 8008250:	305c      	adds	r0, #92	; 0x5c
 8008252:	f7fd fb61 	bl	8005918 <memset>
 8008256:	4b05      	ldr	r3, [pc, #20]	; (800826c <std+0x38>)
 8008258:	6224      	str	r4, [r4, #32]
 800825a:	6263      	str	r3, [r4, #36]	; 0x24
 800825c:	4b04      	ldr	r3, [pc, #16]	; (8008270 <std+0x3c>)
 800825e:	62a3      	str	r3, [r4, #40]	; 0x28
 8008260:	4b04      	ldr	r3, [pc, #16]	; (8008274 <std+0x40>)
 8008262:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008264:	4b04      	ldr	r3, [pc, #16]	; (8008278 <std+0x44>)
 8008266:	6323      	str	r3, [r4, #48]	; 0x30
 8008268:	bd10      	pop	{r4, pc}
 800826a:	bf00      	nop
 800826c:	080085ad 	.word	0x080085ad
 8008270:	080085cf 	.word	0x080085cf
 8008274:	08008607 	.word	0x08008607
 8008278:	0800862b 	.word	0x0800862b

0800827c <_cleanup_r>:
 800827c:	4901      	ldr	r1, [pc, #4]	; (8008284 <_cleanup_r+0x8>)
 800827e:	f000 b8af 	b.w	80083e0 <_fwalk_reent>
 8008282:	bf00      	nop
 8008284:	080081bd 	.word	0x080081bd

08008288 <__sfmoreglue>:
 8008288:	2268      	movs	r2, #104	; 0x68
 800828a:	b570      	push	{r4, r5, r6, lr}
 800828c:	1e4d      	subs	r5, r1, #1
 800828e:	4355      	muls	r5, r2
 8008290:	460e      	mov	r6, r1
 8008292:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008296:	f7ff faad 	bl	80077f4 <_malloc_r>
 800829a:	4604      	mov	r4, r0
 800829c:	b140      	cbz	r0, 80082b0 <__sfmoreglue+0x28>
 800829e:	2100      	movs	r1, #0
 80082a0:	e9c0 1600 	strd	r1, r6, [r0]
 80082a4:	300c      	adds	r0, #12
 80082a6:	60a0      	str	r0, [r4, #8]
 80082a8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80082ac:	f7fd fb34 	bl	8005918 <memset>
 80082b0:	4620      	mov	r0, r4
 80082b2:	bd70      	pop	{r4, r5, r6, pc}

080082b4 <__sfp_lock_acquire>:
 80082b4:	4801      	ldr	r0, [pc, #4]	; (80082bc <__sfp_lock_acquire+0x8>)
 80082b6:	f000 b8b3 	b.w	8008420 <__retarget_lock_acquire_recursive>
 80082ba:	bf00      	nop
 80082bc:	20000935 	.word	0x20000935

080082c0 <__sfp_lock_release>:
 80082c0:	4801      	ldr	r0, [pc, #4]	; (80082c8 <__sfp_lock_release+0x8>)
 80082c2:	f000 b8ae 	b.w	8008422 <__retarget_lock_release_recursive>
 80082c6:	bf00      	nop
 80082c8:	20000935 	.word	0x20000935

080082cc <__sinit_lock_acquire>:
 80082cc:	4801      	ldr	r0, [pc, #4]	; (80082d4 <__sinit_lock_acquire+0x8>)
 80082ce:	f000 b8a7 	b.w	8008420 <__retarget_lock_acquire_recursive>
 80082d2:	bf00      	nop
 80082d4:	20000936 	.word	0x20000936

080082d8 <__sinit_lock_release>:
 80082d8:	4801      	ldr	r0, [pc, #4]	; (80082e0 <__sinit_lock_release+0x8>)
 80082da:	f000 b8a2 	b.w	8008422 <__retarget_lock_release_recursive>
 80082de:	bf00      	nop
 80082e0:	20000936 	.word	0x20000936

080082e4 <__sinit>:
 80082e4:	b510      	push	{r4, lr}
 80082e6:	4604      	mov	r4, r0
 80082e8:	f7ff fff0 	bl	80082cc <__sinit_lock_acquire>
 80082ec:	69a3      	ldr	r3, [r4, #24]
 80082ee:	b11b      	cbz	r3, 80082f8 <__sinit+0x14>
 80082f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80082f4:	f7ff bff0 	b.w	80082d8 <__sinit_lock_release>
 80082f8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80082fc:	6523      	str	r3, [r4, #80]	; 0x50
 80082fe:	4b13      	ldr	r3, [pc, #76]	; (800834c <__sinit+0x68>)
 8008300:	4a13      	ldr	r2, [pc, #76]	; (8008350 <__sinit+0x6c>)
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	62a2      	str	r2, [r4, #40]	; 0x28
 8008306:	42a3      	cmp	r3, r4
 8008308:	bf08      	it	eq
 800830a:	2301      	moveq	r3, #1
 800830c:	4620      	mov	r0, r4
 800830e:	bf08      	it	eq
 8008310:	61a3      	streq	r3, [r4, #24]
 8008312:	f000 f81f 	bl	8008354 <__sfp>
 8008316:	6060      	str	r0, [r4, #4]
 8008318:	4620      	mov	r0, r4
 800831a:	f000 f81b 	bl	8008354 <__sfp>
 800831e:	60a0      	str	r0, [r4, #8]
 8008320:	4620      	mov	r0, r4
 8008322:	f000 f817 	bl	8008354 <__sfp>
 8008326:	2200      	movs	r2, #0
 8008328:	2104      	movs	r1, #4
 800832a:	60e0      	str	r0, [r4, #12]
 800832c:	6860      	ldr	r0, [r4, #4]
 800832e:	f7ff ff81 	bl	8008234 <std>
 8008332:	2201      	movs	r2, #1
 8008334:	2109      	movs	r1, #9
 8008336:	68a0      	ldr	r0, [r4, #8]
 8008338:	f7ff ff7c 	bl	8008234 <std>
 800833c:	2202      	movs	r2, #2
 800833e:	2112      	movs	r1, #18
 8008340:	68e0      	ldr	r0, [r4, #12]
 8008342:	f7ff ff77 	bl	8008234 <std>
 8008346:	2301      	movs	r3, #1
 8008348:	61a3      	str	r3, [r4, #24]
 800834a:	e7d1      	b.n	80082f0 <__sinit+0xc>
 800834c:	08008780 	.word	0x08008780
 8008350:	0800827d 	.word	0x0800827d

08008354 <__sfp>:
 8008354:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008356:	4607      	mov	r7, r0
 8008358:	f7ff ffac 	bl	80082b4 <__sfp_lock_acquire>
 800835c:	4b1e      	ldr	r3, [pc, #120]	; (80083d8 <__sfp+0x84>)
 800835e:	681e      	ldr	r6, [r3, #0]
 8008360:	69b3      	ldr	r3, [r6, #24]
 8008362:	b913      	cbnz	r3, 800836a <__sfp+0x16>
 8008364:	4630      	mov	r0, r6
 8008366:	f7ff ffbd 	bl	80082e4 <__sinit>
 800836a:	3648      	adds	r6, #72	; 0x48
 800836c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008370:	3b01      	subs	r3, #1
 8008372:	d503      	bpl.n	800837c <__sfp+0x28>
 8008374:	6833      	ldr	r3, [r6, #0]
 8008376:	b30b      	cbz	r3, 80083bc <__sfp+0x68>
 8008378:	6836      	ldr	r6, [r6, #0]
 800837a:	e7f7      	b.n	800836c <__sfp+0x18>
 800837c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008380:	b9d5      	cbnz	r5, 80083b8 <__sfp+0x64>
 8008382:	4b16      	ldr	r3, [pc, #88]	; (80083dc <__sfp+0x88>)
 8008384:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008388:	60e3      	str	r3, [r4, #12]
 800838a:	6665      	str	r5, [r4, #100]	; 0x64
 800838c:	f000 f847 	bl	800841e <__retarget_lock_init_recursive>
 8008390:	f7ff ff96 	bl	80082c0 <__sfp_lock_release>
 8008394:	2208      	movs	r2, #8
 8008396:	4629      	mov	r1, r5
 8008398:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800839c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80083a0:	6025      	str	r5, [r4, #0]
 80083a2:	61a5      	str	r5, [r4, #24]
 80083a4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80083a8:	f7fd fab6 	bl	8005918 <memset>
 80083ac:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80083b0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80083b4:	4620      	mov	r0, r4
 80083b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80083b8:	3468      	adds	r4, #104	; 0x68
 80083ba:	e7d9      	b.n	8008370 <__sfp+0x1c>
 80083bc:	2104      	movs	r1, #4
 80083be:	4638      	mov	r0, r7
 80083c0:	f7ff ff62 	bl	8008288 <__sfmoreglue>
 80083c4:	4604      	mov	r4, r0
 80083c6:	6030      	str	r0, [r6, #0]
 80083c8:	2800      	cmp	r0, #0
 80083ca:	d1d5      	bne.n	8008378 <__sfp+0x24>
 80083cc:	f7ff ff78 	bl	80082c0 <__sfp_lock_release>
 80083d0:	230c      	movs	r3, #12
 80083d2:	603b      	str	r3, [r7, #0]
 80083d4:	e7ee      	b.n	80083b4 <__sfp+0x60>
 80083d6:	bf00      	nop
 80083d8:	08008780 	.word	0x08008780
 80083dc:	ffff0001 	.word	0xffff0001

080083e0 <_fwalk_reent>:
 80083e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80083e4:	4606      	mov	r6, r0
 80083e6:	4688      	mov	r8, r1
 80083e8:	2700      	movs	r7, #0
 80083ea:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80083ee:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80083f2:	f1b9 0901 	subs.w	r9, r9, #1
 80083f6:	d505      	bpl.n	8008404 <_fwalk_reent+0x24>
 80083f8:	6824      	ldr	r4, [r4, #0]
 80083fa:	2c00      	cmp	r4, #0
 80083fc:	d1f7      	bne.n	80083ee <_fwalk_reent+0xe>
 80083fe:	4638      	mov	r0, r7
 8008400:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008404:	89ab      	ldrh	r3, [r5, #12]
 8008406:	2b01      	cmp	r3, #1
 8008408:	d907      	bls.n	800841a <_fwalk_reent+0x3a>
 800840a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800840e:	3301      	adds	r3, #1
 8008410:	d003      	beq.n	800841a <_fwalk_reent+0x3a>
 8008412:	4629      	mov	r1, r5
 8008414:	4630      	mov	r0, r6
 8008416:	47c0      	blx	r8
 8008418:	4307      	orrs	r7, r0
 800841a:	3568      	adds	r5, #104	; 0x68
 800841c:	e7e9      	b.n	80083f2 <_fwalk_reent+0x12>

0800841e <__retarget_lock_init_recursive>:
 800841e:	4770      	bx	lr

08008420 <__retarget_lock_acquire_recursive>:
 8008420:	4770      	bx	lr

08008422 <__retarget_lock_release_recursive>:
 8008422:	4770      	bx	lr

08008424 <__swhatbuf_r>:
 8008424:	b570      	push	{r4, r5, r6, lr}
 8008426:	460e      	mov	r6, r1
 8008428:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800842c:	4614      	mov	r4, r2
 800842e:	2900      	cmp	r1, #0
 8008430:	461d      	mov	r5, r3
 8008432:	b096      	sub	sp, #88	; 0x58
 8008434:	da08      	bge.n	8008448 <__swhatbuf_r+0x24>
 8008436:	2200      	movs	r2, #0
 8008438:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800843c:	602a      	str	r2, [r5, #0]
 800843e:	061a      	lsls	r2, r3, #24
 8008440:	d410      	bmi.n	8008464 <__swhatbuf_r+0x40>
 8008442:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008446:	e00e      	b.n	8008466 <__swhatbuf_r+0x42>
 8008448:	466a      	mov	r2, sp
 800844a:	f000 f915 	bl	8008678 <_fstat_r>
 800844e:	2800      	cmp	r0, #0
 8008450:	dbf1      	blt.n	8008436 <__swhatbuf_r+0x12>
 8008452:	9a01      	ldr	r2, [sp, #4]
 8008454:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008458:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800845c:	425a      	negs	r2, r3
 800845e:	415a      	adcs	r2, r3
 8008460:	602a      	str	r2, [r5, #0]
 8008462:	e7ee      	b.n	8008442 <__swhatbuf_r+0x1e>
 8008464:	2340      	movs	r3, #64	; 0x40
 8008466:	2000      	movs	r0, #0
 8008468:	6023      	str	r3, [r4, #0]
 800846a:	b016      	add	sp, #88	; 0x58
 800846c:	bd70      	pop	{r4, r5, r6, pc}
	...

08008470 <__smakebuf_r>:
 8008470:	898b      	ldrh	r3, [r1, #12]
 8008472:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008474:	079d      	lsls	r5, r3, #30
 8008476:	4606      	mov	r6, r0
 8008478:	460c      	mov	r4, r1
 800847a:	d507      	bpl.n	800848c <__smakebuf_r+0x1c>
 800847c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008480:	6023      	str	r3, [r4, #0]
 8008482:	6123      	str	r3, [r4, #16]
 8008484:	2301      	movs	r3, #1
 8008486:	6163      	str	r3, [r4, #20]
 8008488:	b002      	add	sp, #8
 800848a:	bd70      	pop	{r4, r5, r6, pc}
 800848c:	466a      	mov	r2, sp
 800848e:	ab01      	add	r3, sp, #4
 8008490:	f7ff ffc8 	bl	8008424 <__swhatbuf_r>
 8008494:	9900      	ldr	r1, [sp, #0]
 8008496:	4605      	mov	r5, r0
 8008498:	4630      	mov	r0, r6
 800849a:	f7ff f9ab 	bl	80077f4 <_malloc_r>
 800849e:	b948      	cbnz	r0, 80084b4 <__smakebuf_r+0x44>
 80084a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80084a4:	059a      	lsls	r2, r3, #22
 80084a6:	d4ef      	bmi.n	8008488 <__smakebuf_r+0x18>
 80084a8:	f023 0303 	bic.w	r3, r3, #3
 80084ac:	f043 0302 	orr.w	r3, r3, #2
 80084b0:	81a3      	strh	r3, [r4, #12]
 80084b2:	e7e3      	b.n	800847c <__smakebuf_r+0xc>
 80084b4:	4b0d      	ldr	r3, [pc, #52]	; (80084ec <__smakebuf_r+0x7c>)
 80084b6:	62b3      	str	r3, [r6, #40]	; 0x28
 80084b8:	89a3      	ldrh	r3, [r4, #12]
 80084ba:	6020      	str	r0, [r4, #0]
 80084bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80084c0:	81a3      	strh	r3, [r4, #12]
 80084c2:	9b00      	ldr	r3, [sp, #0]
 80084c4:	6120      	str	r0, [r4, #16]
 80084c6:	6163      	str	r3, [r4, #20]
 80084c8:	9b01      	ldr	r3, [sp, #4]
 80084ca:	b15b      	cbz	r3, 80084e4 <__smakebuf_r+0x74>
 80084cc:	4630      	mov	r0, r6
 80084ce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80084d2:	f000 f8e3 	bl	800869c <_isatty_r>
 80084d6:	b128      	cbz	r0, 80084e4 <__smakebuf_r+0x74>
 80084d8:	89a3      	ldrh	r3, [r4, #12]
 80084da:	f023 0303 	bic.w	r3, r3, #3
 80084de:	f043 0301 	orr.w	r3, r3, #1
 80084e2:	81a3      	strh	r3, [r4, #12]
 80084e4:	89a0      	ldrh	r0, [r4, #12]
 80084e6:	4305      	orrs	r5, r0
 80084e8:	81a5      	strh	r5, [r4, #12]
 80084ea:	e7cd      	b.n	8008488 <__smakebuf_r+0x18>
 80084ec:	0800827d 	.word	0x0800827d

080084f0 <memchr>:
 80084f0:	4603      	mov	r3, r0
 80084f2:	b510      	push	{r4, lr}
 80084f4:	b2c9      	uxtb	r1, r1
 80084f6:	4402      	add	r2, r0
 80084f8:	4293      	cmp	r3, r2
 80084fa:	4618      	mov	r0, r3
 80084fc:	d101      	bne.n	8008502 <memchr+0x12>
 80084fe:	2000      	movs	r0, #0
 8008500:	e003      	b.n	800850a <memchr+0x1a>
 8008502:	7804      	ldrb	r4, [r0, #0]
 8008504:	3301      	adds	r3, #1
 8008506:	428c      	cmp	r4, r1
 8008508:	d1f6      	bne.n	80084f8 <memchr+0x8>
 800850a:	bd10      	pop	{r4, pc}

0800850c <__malloc_lock>:
 800850c:	4801      	ldr	r0, [pc, #4]	; (8008514 <__malloc_lock+0x8>)
 800850e:	f7ff bf87 	b.w	8008420 <__retarget_lock_acquire_recursive>
 8008512:	bf00      	nop
 8008514:	20000934 	.word	0x20000934

08008518 <__malloc_unlock>:
 8008518:	4801      	ldr	r0, [pc, #4]	; (8008520 <__malloc_unlock+0x8>)
 800851a:	f7ff bf82 	b.w	8008422 <__retarget_lock_release_recursive>
 800851e:	bf00      	nop
 8008520:	20000934 	.word	0x20000934

08008524 <_raise_r>:
 8008524:	291f      	cmp	r1, #31
 8008526:	b538      	push	{r3, r4, r5, lr}
 8008528:	4604      	mov	r4, r0
 800852a:	460d      	mov	r5, r1
 800852c:	d904      	bls.n	8008538 <_raise_r+0x14>
 800852e:	2316      	movs	r3, #22
 8008530:	6003      	str	r3, [r0, #0]
 8008532:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008536:	bd38      	pop	{r3, r4, r5, pc}
 8008538:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800853a:	b112      	cbz	r2, 8008542 <_raise_r+0x1e>
 800853c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008540:	b94b      	cbnz	r3, 8008556 <_raise_r+0x32>
 8008542:	4620      	mov	r0, r4
 8008544:	f000 f830 	bl	80085a8 <_getpid_r>
 8008548:	462a      	mov	r2, r5
 800854a:	4601      	mov	r1, r0
 800854c:	4620      	mov	r0, r4
 800854e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008552:	f000 b817 	b.w	8008584 <_kill_r>
 8008556:	2b01      	cmp	r3, #1
 8008558:	d00a      	beq.n	8008570 <_raise_r+0x4c>
 800855a:	1c59      	adds	r1, r3, #1
 800855c:	d103      	bne.n	8008566 <_raise_r+0x42>
 800855e:	2316      	movs	r3, #22
 8008560:	6003      	str	r3, [r0, #0]
 8008562:	2001      	movs	r0, #1
 8008564:	e7e7      	b.n	8008536 <_raise_r+0x12>
 8008566:	2400      	movs	r4, #0
 8008568:	4628      	mov	r0, r5
 800856a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800856e:	4798      	blx	r3
 8008570:	2000      	movs	r0, #0
 8008572:	e7e0      	b.n	8008536 <_raise_r+0x12>

08008574 <raise>:
 8008574:	4b02      	ldr	r3, [pc, #8]	; (8008580 <raise+0xc>)
 8008576:	4601      	mov	r1, r0
 8008578:	6818      	ldr	r0, [r3, #0]
 800857a:	f7ff bfd3 	b.w	8008524 <_raise_r>
 800857e:	bf00      	nop
 8008580:	2000000c 	.word	0x2000000c

08008584 <_kill_r>:
 8008584:	b538      	push	{r3, r4, r5, lr}
 8008586:	2300      	movs	r3, #0
 8008588:	4d06      	ldr	r5, [pc, #24]	; (80085a4 <_kill_r+0x20>)
 800858a:	4604      	mov	r4, r0
 800858c:	4608      	mov	r0, r1
 800858e:	4611      	mov	r1, r2
 8008590:	602b      	str	r3, [r5, #0]
 8008592:	f7f9 fc22 	bl	8001dda <_kill>
 8008596:	1c43      	adds	r3, r0, #1
 8008598:	d102      	bne.n	80085a0 <_kill_r+0x1c>
 800859a:	682b      	ldr	r3, [r5, #0]
 800859c:	b103      	cbz	r3, 80085a0 <_kill_r+0x1c>
 800859e:	6023      	str	r3, [r4, #0]
 80085a0:	bd38      	pop	{r3, r4, r5, pc}
 80085a2:	bf00      	nop
 80085a4:	20000938 	.word	0x20000938

080085a8 <_getpid_r>:
 80085a8:	f7f9 bc10 	b.w	8001dcc <_getpid>

080085ac <__sread>:
 80085ac:	b510      	push	{r4, lr}
 80085ae:	460c      	mov	r4, r1
 80085b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80085b4:	f000 f894 	bl	80086e0 <_read_r>
 80085b8:	2800      	cmp	r0, #0
 80085ba:	bfab      	itete	ge
 80085bc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80085be:	89a3      	ldrhlt	r3, [r4, #12]
 80085c0:	181b      	addge	r3, r3, r0
 80085c2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80085c6:	bfac      	ite	ge
 80085c8:	6563      	strge	r3, [r4, #84]	; 0x54
 80085ca:	81a3      	strhlt	r3, [r4, #12]
 80085cc:	bd10      	pop	{r4, pc}

080085ce <__swrite>:
 80085ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80085d2:	461f      	mov	r7, r3
 80085d4:	898b      	ldrh	r3, [r1, #12]
 80085d6:	4605      	mov	r5, r0
 80085d8:	05db      	lsls	r3, r3, #23
 80085da:	460c      	mov	r4, r1
 80085dc:	4616      	mov	r6, r2
 80085de:	d505      	bpl.n	80085ec <__swrite+0x1e>
 80085e0:	2302      	movs	r3, #2
 80085e2:	2200      	movs	r2, #0
 80085e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80085e8:	f000 f868 	bl	80086bc <_lseek_r>
 80085ec:	89a3      	ldrh	r3, [r4, #12]
 80085ee:	4632      	mov	r2, r6
 80085f0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80085f4:	81a3      	strh	r3, [r4, #12]
 80085f6:	4628      	mov	r0, r5
 80085f8:	463b      	mov	r3, r7
 80085fa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80085fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008602:	f000 b817 	b.w	8008634 <_write_r>

08008606 <__sseek>:
 8008606:	b510      	push	{r4, lr}
 8008608:	460c      	mov	r4, r1
 800860a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800860e:	f000 f855 	bl	80086bc <_lseek_r>
 8008612:	1c43      	adds	r3, r0, #1
 8008614:	89a3      	ldrh	r3, [r4, #12]
 8008616:	bf15      	itete	ne
 8008618:	6560      	strne	r0, [r4, #84]	; 0x54
 800861a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800861e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008622:	81a3      	strheq	r3, [r4, #12]
 8008624:	bf18      	it	ne
 8008626:	81a3      	strhne	r3, [r4, #12]
 8008628:	bd10      	pop	{r4, pc}

0800862a <__sclose>:
 800862a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800862e:	f000 b813 	b.w	8008658 <_close_r>
	...

08008634 <_write_r>:
 8008634:	b538      	push	{r3, r4, r5, lr}
 8008636:	4604      	mov	r4, r0
 8008638:	4608      	mov	r0, r1
 800863a:	4611      	mov	r1, r2
 800863c:	2200      	movs	r2, #0
 800863e:	4d05      	ldr	r5, [pc, #20]	; (8008654 <_write_r+0x20>)
 8008640:	602a      	str	r2, [r5, #0]
 8008642:	461a      	mov	r2, r3
 8008644:	f7f9 fc00 	bl	8001e48 <_write>
 8008648:	1c43      	adds	r3, r0, #1
 800864a:	d102      	bne.n	8008652 <_write_r+0x1e>
 800864c:	682b      	ldr	r3, [r5, #0]
 800864e:	b103      	cbz	r3, 8008652 <_write_r+0x1e>
 8008650:	6023      	str	r3, [r4, #0]
 8008652:	bd38      	pop	{r3, r4, r5, pc}
 8008654:	20000938 	.word	0x20000938

08008658 <_close_r>:
 8008658:	b538      	push	{r3, r4, r5, lr}
 800865a:	2300      	movs	r3, #0
 800865c:	4d05      	ldr	r5, [pc, #20]	; (8008674 <_close_r+0x1c>)
 800865e:	4604      	mov	r4, r0
 8008660:	4608      	mov	r0, r1
 8008662:	602b      	str	r3, [r5, #0]
 8008664:	f7f9 fc0c 	bl	8001e80 <_close>
 8008668:	1c43      	adds	r3, r0, #1
 800866a:	d102      	bne.n	8008672 <_close_r+0x1a>
 800866c:	682b      	ldr	r3, [r5, #0]
 800866e:	b103      	cbz	r3, 8008672 <_close_r+0x1a>
 8008670:	6023      	str	r3, [r4, #0]
 8008672:	bd38      	pop	{r3, r4, r5, pc}
 8008674:	20000938 	.word	0x20000938

08008678 <_fstat_r>:
 8008678:	b538      	push	{r3, r4, r5, lr}
 800867a:	2300      	movs	r3, #0
 800867c:	4d06      	ldr	r5, [pc, #24]	; (8008698 <_fstat_r+0x20>)
 800867e:	4604      	mov	r4, r0
 8008680:	4608      	mov	r0, r1
 8008682:	4611      	mov	r1, r2
 8008684:	602b      	str	r3, [r5, #0]
 8008686:	f7f9 fc06 	bl	8001e96 <_fstat>
 800868a:	1c43      	adds	r3, r0, #1
 800868c:	d102      	bne.n	8008694 <_fstat_r+0x1c>
 800868e:	682b      	ldr	r3, [r5, #0]
 8008690:	b103      	cbz	r3, 8008694 <_fstat_r+0x1c>
 8008692:	6023      	str	r3, [r4, #0]
 8008694:	bd38      	pop	{r3, r4, r5, pc}
 8008696:	bf00      	nop
 8008698:	20000938 	.word	0x20000938

0800869c <_isatty_r>:
 800869c:	b538      	push	{r3, r4, r5, lr}
 800869e:	2300      	movs	r3, #0
 80086a0:	4d05      	ldr	r5, [pc, #20]	; (80086b8 <_isatty_r+0x1c>)
 80086a2:	4604      	mov	r4, r0
 80086a4:	4608      	mov	r0, r1
 80086a6:	602b      	str	r3, [r5, #0]
 80086a8:	f7f9 fc04 	bl	8001eb4 <_isatty>
 80086ac:	1c43      	adds	r3, r0, #1
 80086ae:	d102      	bne.n	80086b6 <_isatty_r+0x1a>
 80086b0:	682b      	ldr	r3, [r5, #0]
 80086b2:	b103      	cbz	r3, 80086b6 <_isatty_r+0x1a>
 80086b4:	6023      	str	r3, [r4, #0]
 80086b6:	bd38      	pop	{r3, r4, r5, pc}
 80086b8:	20000938 	.word	0x20000938

080086bc <_lseek_r>:
 80086bc:	b538      	push	{r3, r4, r5, lr}
 80086be:	4604      	mov	r4, r0
 80086c0:	4608      	mov	r0, r1
 80086c2:	4611      	mov	r1, r2
 80086c4:	2200      	movs	r2, #0
 80086c6:	4d05      	ldr	r5, [pc, #20]	; (80086dc <_lseek_r+0x20>)
 80086c8:	602a      	str	r2, [r5, #0]
 80086ca:	461a      	mov	r2, r3
 80086cc:	f7f9 fbfc 	bl	8001ec8 <_lseek>
 80086d0:	1c43      	adds	r3, r0, #1
 80086d2:	d102      	bne.n	80086da <_lseek_r+0x1e>
 80086d4:	682b      	ldr	r3, [r5, #0]
 80086d6:	b103      	cbz	r3, 80086da <_lseek_r+0x1e>
 80086d8:	6023      	str	r3, [r4, #0]
 80086da:	bd38      	pop	{r3, r4, r5, pc}
 80086dc:	20000938 	.word	0x20000938

080086e0 <_read_r>:
 80086e0:	b538      	push	{r3, r4, r5, lr}
 80086e2:	4604      	mov	r4, r0
 80086e4:	4608      	mov	r0, r1
 80086e6:	4611      	mov	r1, r2
 80086e8:	2200      	movs	r2, #0
 80086ea:	4d05      	ldr	r5, [pc, #20]	; (8008700 <_read_r+0x20>)
 80086ec:	602a      	str	r2, [r5, #0]
 80086ee:	461a      	mov	r2, r3
 80086f0:	f7f9 fb8d 	bl	8001e0e <_read>
 80086f4:	1c43      	adds	r3, r0, #1
 80086f6:	d102      	bne.n	80086fe <_read_r+0x1e>
 80086f8:	682b      	ldr	r3, [r5, #0]
 80086fa:	b103      	cbz	r3, 80086fe <_read_r+0x1e>
 80086fc:	6023      	str	r3, [r4, #0]
 80086fe:	bd38      	pop	{r3, r4, r5, pc}
 8008700:	20000938 	.word	0x20000938

08008704 <_init>:
 8008704:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008706:	bf00      	nop
 8008708:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800870a:	bc08      	pop	{r3}
 800870c:	469e      	mov	lr, r3
 800870e:	4770      	bx	lr

08008710 <_fini>:
 8008710:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008712:	bf00      	nop
 8008714:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008716:	bc08      	pop	{r3}
 8008718:	469e      	mov	lr, r3
 800871a:	4770      	bx	lr
